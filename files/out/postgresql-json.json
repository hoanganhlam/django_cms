{"head":{"title":"PostgreSQL JSON","layout":"2017/sheet","prism_languages":["sql"],"updated":"2018-12-06T00:00:00.000Z","category":"Databases"},"body":[{"title":"Accessors","elms":"\n```sql\nSELECT * FROM users WHERE data->>'name' = 'John';\nSELECT data->>'name' AS name FROM users;\n```\n{: .-setup}\n\n| Operator       | Description                        | Example          | Returns |\n| ----           | ----                               | ----             | ----    |\n| `->` _int_     | Get array element `2`              | `data->2`        | JSON    |\n| `->` _text_    | Get object key `name`              | `data->'name'`   | JSON    |\n| `#>` _text[]_  | Get keypath `a,b` (eg, `data.a.b`) | `data#>'{a,b}'`  | JSON    |\n| -\n| `->>` _int_    | Get array element `2`              | `data->>2`       | Text    |\n| `->>` _text_   | Get object key `name`              | `data->>'name'`  | Text    |\n| `#>>` _text[]_ | Get keypath `a,b` (eg, `data.a.b`) | `data#>>'{a,b}'` | Text    |\n{: .-headers.-shortcuts}\n\n`>` returns JSON, `>>` returns text.\n","h2":"Operators"},{"title":"Boolean operators","elms":"\n```sql\nSELECT * FROM users WHERE data->tags ? 'admin';\nSELECT data->tags ? 'admin' AS is_admin FROM users;\n```\n{: .-setup}\n\n| Operator      | Description                   | Example                          |\n| ----          | ----                          | ----                             |\n| `?` _str_     | Does `data` have key `name`?  | `data ? 'name'`                  |\n| `?|` _text[]_ | Does `data` have `a` or `b`?  | `data ?| array['a','b']`         |\n| `?&` _text[]_ | Does `data` have `a` and `b`? | `data ?& array['a','b']`         |\n| `@>` _jsonb_  | Does `left` include `right`?  | `data @> '{\"b\":2}'::jsonb`       |\n| `<@` _jsonb_  | Does `right` include `left`?  | `data <@ '{\"a\":1,\"b\":2}'::jsonb` |\n{: .-headers.-shortcuts.-left-align}\n\nWhen `?`/`?|`/`?&` works on objects, it checks keys; when it works on arrays, it checks for elements.\n","h2":"Operators"},{"title":"Arrays and objects","elms":"\n```sql\nUPDATE users SET tags = tags || array['admin'];\n```\n{: .-setup}\n\n| Operator       |  Example                   |  Description\n| ----           |  ----                      |  ----\n| `||` _json_    |  `data || array['a','b']`  |  Concatenate\n| `-` _str_      |  `data - 'a'`              |  Delete a key\n| `-` _int_      |  `data - 1`                |  Delete an array item\n| `#-` _text[]_  |  `data #- '{us,name}'`     |  Delete a path\n{: .-headers.-shortcuts}\n\nOnly available in PostgreSQL 9.5+.\n","h2":"Updating"},{"title":"jsonb_set","elms":"\n```sql\nUPDATE users SET data = jsonb_set(data, '{name}', '\"John\"');\n```\n\nOnly available in PostgreSQL 9.5+.\n","h2":"Updating"},{"title":null,"elms":"\n#### fn(json) → json\n\n```sql\njsonb_set(data, '{path}', value)\njsonb_strip_nulls(data)\n```\n\n#### fn(···) → json\n\n```sql\nto_json(\"Hello\"::text)\narray_to_json('{1,2}'::int[])\n```\n\n#### Iteration\n\n```sql\nSELECT * from json_each('{\"a\":1, \"b\":2}')\nSELECT * from json_each_text('{\"a\":1, \"b\":2}')\n-- key | value\n```\n\nThis is an incomplete list, there's way too many!\n\nSee: [JSON functions](https://www.postgresql.org/docs/9.5/static/functions-json.html)\n","h2":"Functions"},{"title":null,"elms":"\n- `'{\"a\":1}'::jsonb ? 'a'`\n- `'[\"a\"]'::jsonb ? 'a'`\n","h2":"More examples"},{"title":null,"elms":"\n- <https://www.postgresql.org/docs/9.5/static/functions-json.html>\n- <https://www.postgresql.org/docs/9.5/static/datatype-json.html>","h2":"References"}]}