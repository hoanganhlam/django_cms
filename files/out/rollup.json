{"head":{"title":"Rollup.js","category":"JavaScript libraries","layout":"2017/sheet","updated":"2020-01-29T00:00:00.000Z","authors":[{"github":"ryanSN"}],"keywords":["rollup.watch","bundle","rollup.config.js"],"intro":"[Rollup](https://rollupjs.org/) Rollup is a module bundler for JavaScript which compiles small pieces of code into something larger and more complex, such as a library or application.\n"},"body":[{"title":"Basic config","elms":"\n#### rollup.config.js\n\n```js\nexport default {\n  input: 'src/main.js',\n  output: {\n    file: 'bundle.js',\n    format: 'cjs'\n  }\n}\n```\n#### Terminal\n\n```bash\nnpm install -D rollup\n```\n\n| Command                                | Description         |\n| ---                                    | ---                 |\n| `rollup -c -o bundle.js`               | bundle using config |\n| `rollup main.js --o bundle.js --f cjs` | bundle              |\n| `rollup --watch`                       | bundle continuously |\n\nYou may need to use `./node_modules/.bin/rollup` as a command if you did not install rollup globally.\n","h2":null},{"title":"Multiple outputs","elms":"\n#### rollup.config.js\n\n```js\nexport default [\n  {\n    input: 'src/main.js',\n    output: {\n      file: __dirname + '/public/main.js',\n      format: 'cjs',\n      name: 'main'\n    }\n  },\n  {\n    input: 'src/vendor.js',\n    output: {\n      file: __dirname + 'public/vendor.js',\n      format: 'cjs',\n      name: 'vendor'\n    }\n  }\n]\n```\n\nThis creates `main.js` and `vendor.js`.\n","h2":null},{"title":"Plugins","elms":"\n#### Terminal\n\n```bash\nnpm install -D @rollup/plugin-json\n```\n\n#### rollup.config.js\n\n```js\nimport json from '@rollup/plugin-json'\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    file: 'bundle.js',\n    format: 'cjs'\n  },\n  plugins: [ json() ]\n}\n\n```\n","h2":"Using plugins"},{"title":"npm packages","elms":"\n#### Terminal\n```bash\nnpm install -D @rollup/plugin-node-resolve\n```\n\n#### rollup.config.js\n```js\nimport resolve from '@rollup/plugin-node-resolve'\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    file: 'bundle.js',\n    format: 'cjs'\n  },\n  plugins: [ resolve() ]\n}\n```\n\nWhen you run a npm run build, no warning is emitted and contains the imported modules.\n","h2":"Using plugins"},{"title":"Peer dependencies","elms":"\n#### Terminal\n\n```bash\nnpm install -D @rollup/plugin-node-resolve\n```\n\n#### rollup.config.js\n\n```js\nimport resolve from '@rollup/plugin-node-resolve'\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    file: 'bundle.js',\n    format: 'cjs'\n  },\n  plugins: [resolve({\n    // pass custom options to the resolve plugin\n    customResolveOptions: {\n      moduleDirectory: 'node_modules'\n    }\n  })],\n  // indicate which modules should be treated as external\n  external: ['lodash']\n}\n```\n","h2":"Using plugins"},{"title":"Babel","elms":"\n#### Terminal\n\n```bash\nnpm install -D rollup-plugin-babel\n```\n\n#### rollup.config.js\n\n```js\nimport resolve from '@rollup/plugin-node-resolve'\nimport babel from 'rollup-plugin-babel'\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    file: 'bundle.js',\n    format: 'cjs'\n  },\n  plugins: [\n    resolve(),\n    babel({\n      exclude: 'node_modules/**' // only transpile our source code\n    })\n  ]\n}\n```\n\n#### src/.babelrc\n\n```js\n{\n  \"presets\": [\n    [\"latest\", {\n      \"es2015\": {\n        \"modules\": false\n      }\n    }]\n  ],\n  \"plugins\": [\"external-helpers\"]\n}\n```","h2":"Using plugins"}]}