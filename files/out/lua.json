{"head":{"title":"Lua"},"body":[{"title":null,"elms":"\n    -- comment\n    --[[ Multiline\n         comment ]]\n","h2":"Comments"},{"title":null,"elms":"\n    print()\n    print(\"Hi\")\n\n    -- You can omit parentheses if the argument is one string or table literal\n    print \"Hello World\"     <-->     print(\"Hello World\")\n    dofile 'a.lua'          <-->     dofile ('a.lua')\n    print [[a multi-line    <-->     print([[a multi-line\n     message]]                        message]])\n    f{x=10, y=20}           <-->     f({x=10, y=20})\n    type{}                  <-->     type({})\n","h2":"Invoking functions"},{"title":null,"elms":"\n    t = {}\n    t = { a = 1, b = 2 }\n    t.a = function() ... end\n\n    t = { [\"hello\"] = 200 }\n    t.hello\n\n    -- Remember, arrays are also tables\n    array = { \"a\", \"b\", \"c\", \"d\" }\n    print(array[2])       -- \"b\" (one-indexed)\n    print(#array)         -- 4 (length)\n","h2":"Tables / arrays"},{"title":null,"elms":"\n    while condition do\n    end\n\n    for i = 1,5 do\n    end\n\n    for i = start,finish,delta do\n    end\n\n    for k,v in pairs(tab) do\n    end\n\n    repeat\n    until condition\n\n    -- Breaking out:\n    while x do\n      if condition then break end\n    end\n","h2":"Loops"},{"title":null,"elms":"\n    if condition then\n      print(\"yes\")\n    elseif condition then\n      print(\"maybe\")\n    else\n      print(\"no\")\n    end\n","h2":"Conditionals"},{"title":null,"elms":"\n    local x = 2\n    two, four = 2, 4\n","h2":"Variables"},{"title":null,"elms":"\n    function myFunction()\n      return 1\n    end\n\n    function myFunctionWithArgs(a, b)\n      -- ...\n    end\n\n    myFunction()\n\n    anonymousFunctions(function()\n      -- ...\n    end)\n\n    -- Not exported in the module\n    local function myPrivateFunction()\n    end\n\n    -- Splats\n    function doAction(action, ...)\n      print(\"Doing '\"..action..\"' to\", ...)\n      --> print(\"Doing 'write' to\", \"Shirley\", \"Abed\")\n    end\n\n    doAction('write', \"Shirley\", \"Abed\")\n","h2":"Functions"},{"title":null,"elms":"\n    mytable = { x = 2, y = function() .. end }\n\n    -- The same:\n    mytable.x\n    mytable['x']\n\n    -- Syntactic sugar, these are equivalent:\n    mytable.y(mytable)\n    mytable:y()\n\n    mytable.y(mytable, a, b)\n    mytable:y(a, b)\n\n    function X:y(z) .. end\n    function X.y(self, z) .. end\n","h2":"Lookups"},{"title":null,"elms":"\n\n    mt = {}\n\n    -- A metatable is simply a table with functions in it.\n    mt.__tostring = function() return \"lol\" end\n    mt.__add      = function(b) ... end       -- a + b\n    mt.__mul      = function(b) ... end       -- a * b\n    mt.__index    = function(k) ... end       -- Lookups (a[k] or a.k)\n    mt.__newindex = function(k, v) ... end    -- Setters (a[k] = v)\n\n    -- Metatables allow you to override behavior of another table.\n    mytable = {}\n    setmetatable(mytable, mt)\n\n    print(myobject)\n","h2":"Metatables"},{"title":null,"elms":"\n    Account = {}\n\n    function Account:new(balance)\n      local t = setmetatable({}, { __index = Account })\n\n      -- Your constructor stuff\n      t.balance = (balance or 0)\n      return t\n    end\n\n    function Account:withdraw(amount)\n      print(\"Withdrawing \"..amount..\"...\")\n      self.balance = self.balance - amount\n      self:report()\n    end\n\n    function Account:report()\n      print(\"Your current balance is: \"..self.balance)\n    end\n\n    a = Account:new(9000)\n    a:withdraw(200)    -- method call\n","h2":"Classes"},{"title":null,"elms":"\n    nil\n    false\n    true\n","h2":"Constants"},{"title":null,"elms":"\n    -- Relational (binary)\n    -- __eq  __lt  __gt  __le  __ge\n       ==    <     >     <=    >=\n    ~=   -- Not equal, just like !=\n\n    -- Arithmetic (binary)\n    -- __add  __sub  __muv  __div  __mod  __pow\n       +      -      *      /      %      ^\n\n    -- Arithmetic (unary)\n    -- __unm (unary minus)\n       -\n\n    -- Logic (and/or)\n    nil and false  --> nil\n    false and nil  --> false\n    0 and 20       --> 20\n    10 and 20      --> 20\n\n\n    -- Length\n    -- __len(array)\n    #array\n\n\n    -- Indexing\n    -- __index(table, key)\n    t[key]\n    t.key\n\n    -- __newindex(table, key, value)\n    t[key]=value\n\n    -- String concat\n    -- __concat(left, right)\n    \"hello, \"..name\n\n    -- Call\n    -- __call(func, ...)\n\n","h2":"Operators (and their metatable names)"},{"title":null,"elms":"\n    dofile(\"hello.lua\")\n    loadfile(\"hello.lua\")\n\n    assert(x)    -- x or (raise an error)\n    assert(x, \"failed\")\n\n    type(var)   -- \"nil\" | \"number\" | \"string\" | \"boolean\" | \"table\" | \"function\" | \"thread\" | \"userdata\"\n\n    -- Does /not/ invoke meta methods (__index and __newindex)\n    rawset(t, index, value)    -- Like t[index] = value\n    rawget(t, index)           -- Like t[index]\n\n    _G  -- Global context\n    setfenv(1, {})  -- 1: current function, 2: caller, and so on -- {}: the new _G\n\n    pairs(t)     -- iterable list of {key, value}\n    ipairs(t)    -- iterable list of {index, value}\n\n    tonumber(\"34\")\n    tonumber(\"8f\", 16)\n","h2":"API: Global functions  [(ref)](http://lua.gts-stolberg.de/en/Basis.php)"},{"title":null,"elms":"\n    'string'..'concatenation'\n\n    s = \"Hello\"\n    s:upper()\n    s:lower()\n    s:len()    -- Just like #s\n\n    s:find()\n    s:gfind()\n\n    s:match()\n    s:gmatch()\n\n    s:sub()\n    s:gsub()\n\n    s:rep()\n    s:char()\n    s:dump()\n    s:reverse()\n    s:byte()\n    s:format()\n","h2":"API: Strings"},{"title":null,"elms":"\n    table.foreach(t, function(row) ... end)\n    table.setn\n    table.insert(t, 21)          -- append (--> t[#t+1] = 21)\n    table.insert(t, 4, 99)\n    table.getn\n    table.concat\n    table.sort\n    table.remove(t, 4)\n","h2":"API: Tables"},{"title":null,"elms":"\n    math.abs     math.acos    math.asin       math.atan    math.atan2\n    math.ceil    math.cos     math.cosh       math.deg     math.exp\n    math.floor   math.fmod    math.frexp      math.ldexp   math.log\n    math.log10   math.max     math.min        math.modf    math.pow\n    math.rad     math.random  math.randomseed math.sin     math.sinh\n    math.sqrt    math.tan     math.tanh\n\n    math.sqrt(144)\n    math\n","h2":"API: Math [(ref)](http://lua-users.org/wiki/MathLibraryTutorial)"},{"title":null,"elms":"\n    io.output(io.open(\"file.txt\", \"w\"))\n    io.write(x)\n    io.close()\n\n    for line in io.lines(\"file.txt\")\n\n    file = assert(io.open(\"file.txt\", \"r\"))\n    file:read()\n    file:lines()\n    file:close()\n","h2":"API: Misc"},{"title":null,"elms":"\n  http://www.lua.org/pil/13.html\n  http://lua-users.org/wiki/ObjectOrientedProgramming","h2":"Reference"}]}