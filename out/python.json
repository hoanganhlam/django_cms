{"head":{"title":"Python","category":"Python"},"body":[{"title":"Lists","elms":"\n    list = []\n    list[i:j]  # returns list subset\n    list[-1]   # returns last element\n    list[:-1]  # returns all but the last element\n    \n    list[i] = val\n    list[i:j] = otherlist  # replace ith to jth-1 elements with otherlist\n    del list[i:j]\n\n    list.append(item)\n    list.extend(another_list)\n    list.insert(index, item)\n    list.pop()        # returns and removes last element from the list\n    list.pop(i)       # returns and removes i-th element from the list\n    list.remove(i)    # removes the first item from the list whose value is i\n    list1 + list2     # combine two list    \n    set(list)         # remove duplicate elements from a list\n\n    list.reverse()    # reverses the elements of the list in-place\n    list.count(item)\n    sum(list)\n\n    zip(list1, list2)  # returns list of tuples with n-th element of both list1 and list2\n    list.sort()        # sorts in-place, returns None\n    sorted(list)       # returns sorted copy of list\n    \",\".join(list)     # returns a string with list elements seperated by comma\n","h2":null},{"title":"Dict","elms":"\n    dict.keys()\n    dict.values()\n    \"key\" in dict    # let's say this returns False, then...\n    dict[\"key\"]      # ...this raises KeyError\n    dict.get(\"key\")  # ...this returns None\n    dict.setdefault(\"key\", 1)\n","h2":null},{"title":"Iteration","elms":"\n    for item in [\"a\", \"b\", \"c\"]:\n    for i in range(4):        # 0 to 3\n    for i in range(4, 8):     # 4 to 7\n    for i in range(1, 9, 2):  # 1, 3, 5, 7\n    for key, val in dict.items():\n    for index, item in enumerate(list):\n","h2":null},{"title":"[String](https://docs.python.org/2/library/stdtypes.html#string-methods)","elms":"\n    str[0:4]\n    len(str)\n\n    string.replace(\"-\", \" \")\n    \",\".join(list)\n    \"hi {0}\".format('j')\n    f\"hi {name}\" # same as \"hi {}\".format('name')\n    str.find(\",\")\n    str.index(\",\")   # same, but raises IndexError\n    str.count(\",\")\n    str.split(\",\")\n\n    str.lower()\n    str.upper()\n    str.title()\n\n    str.lstrip()\n    str.rstrip()\n    str.strip()\n\n    str.islower()\n    \n    /* escape characters */\n    >>> 'doesn\\'t'  # use \\' to escape the single quote...\n        \"doesn't\"\n    >>> \"doesn't\"  # ...or use double quotes instead\n        \"doesn't\"\n    >>> '\"Yes,\" they said.'\n        '\"Yes,\" they said.'\n    >>> \"\\\"Yes,\\\" they said.\"\n        '\"Yes,\" they said.'\n    >>> '\"Isn\\'t,\" they said.'\n        '\"Isn\\'t,\" they said.'\n","h2":null},{"title":"Casting","elms":"\n    int(str)\n    float(str)\n    str(int)\n    str(float)\n    'string'.encode()\n","h2":null},{"title":"Comprehensions","elms":"\n    [fn(i) for i in list]            # .map\n    map(fn, list)                    # .map, returns iterator\n    \n    filter(fn, list)                 # .filter, returns iterator\n    [fn(i) for i in list if i > 0]   # .filter.map\n","h2":null},{"title":"Regex","elms":"\n    import re\n\n    re.match(r'^[aeiou]', str)\n    re.sub(r'^[aeiou]', '?', str)\n    re.sub(r'(xyz)', r'\\1', str)\n\n    expr = re.compile(r'^...$')\n    expr.match(...)\n    expr.sub(...)\n","h2":null},{"title":"Reading","elms":"\n```py\nfile = open(\"hello.txt\", \"r\") # open in read mode 'r'\nfile.close() \n```\n\n```py\nprint(file.read())  # read the entire file and set the cursor at the end of file\nprint file.readline() # Reading one line\nfile.seek(0, 0) # place the cursor at the beggining of the file\n```\n","h2":"File manipulation"},{"title":"Writing (overwrite)","elms":"\n```py\nfile = open(\"hello.txt\", \"w\") # open in write mode 'w'\nfile.write(\"Hello World\") \n\ntext_lines = [\"First line\", \"Second line\", \"Last line\"] \nfile.writelines(text_lines)\n\nfile.close()\n```\n","h2":"File manipulation"},{"title":"Writing (append)","elms":"\n```py\nfile = open(\"Hello.txt\", \"a\") # open in append mode\nfile.write(\"Hello World again\")  \nfile.close()\n```\n","h2":"File manipulation"},{"title":"Context manager","elms":"\n```py\nwith open(\"welcome.txt\", \"r\") as file:\n    # 'file' refers directly to \"welcome.txt\"\n   data = file.read()\n\n# It closes the file automatically at the end of scope, no need for `file.close()`.\n```\n","h2":"File manipulation"}]}