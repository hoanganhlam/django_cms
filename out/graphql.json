{"head":{"title":"GraphQL","layout":"2017/sheet","updated":"2019-07-07T00:00:00.000Z","category":"API"},"body":[{"title":null,"elms":"{: .-three-column}\n","h2":"Queries"},{"title":"Basic query","elms":"\n```js\n{ status }\n```\n\n#### ↓\n\n```js\n{ status: 'available' }\n```\n{: .-setup}\n","h2":"Queries"},{"title":"Nesting","elms":"\n```js\n{ hero { name height } }\n```\n\n#### ↓\n\n```js\n{ hero:\n    { name: \"Luke Skywalker\",\n      height: 1.74 } }\n```\n{: .-setup}\n","h2":"Queries"},{"title":"Lists","elms":"\n```js\n{ friends { name } }\n```\n\n#### ↓\n\n```js\n{ friends:\n    [ { name: \"Luke Skywalker\" },\n      { name: \"Han Solo\" },\n      { name: \"R2D2\" } ] }\n```\n{: .-setup}\n\nGraphQL queries look the same for both single items or lists of items.\n","h2":"Queries"},{"title":"Lookups","elms":"\n```js\n{\n  hero(id: \"1000\") { id name }\n}\n```\n\n#### ↓\n\n```js\n{ hero:\n    { id: \"1000\",\n    { name: \"Luke Skywalker\" } }\n```\n{: .-setup}\n","h2":"Queries"},{"title":"Aliases","elms":"\n```js\n{\n  luke: hero(id: \"1000\") { name }\n  han: hero(id: \"1001\") { name }\n}\n```\n\n#### ↓\n\n```js\n{ luke:\n    { name: \"Luke Skywalker\" },\n    han:\n    { name: \"Han Solo\" } }\n```\n{: .-setup}\n","h2":"Queries"},{"title":"Operation names and variables","elms":"\n#### Query\n```js\nquery FindHero($id: String!) {\n  hero(id: $id) { name }\n}\n```\n\nJust to make things less ambiguous. Also, to use variables, you need an operation name.\n\n#### Variables\n\n```js\n{ id: '1000' }\n```\n","h2":"Queries"},{"title":"Mutations","elms":"\n#### Query\n\n```js\n{ createReview($review) { id } }\n```\n\n#### Variables\n\n```js\n{ review: { stars: 5 } }\n```\n\n#### ↓\n\n```js\n{ createReview: { id: 5291 } }\n```\n\nMutations are just fields that do something when queried.\n","h2":"Queries"},{"title":"Multiple types","elms":"\n```js\n{\n  search(q: \"john\") {\n    id\n    ... on User { name }\n    ... on Comment { body author { name } }\n  }\n}\n```\n\nGreat for searching.\n\n\nOver HTTP\n---------\n\n#### GET\n\n```js\nfetch('http://myapi/graphql?query={ me { name } }')\n```\n\n#### POST\n\n```js\nfetch('http://myapi/graphql', {\n  body: JSON.stringify({\n    query: '...',\n    operationName: '...',\n    variables: { ... }\n  })\n})\n```\n\nSchema\n------\n{: .-three-column}\n","h2":"Queries"},{"title":"Basic schemas","elms":"\n```js\ntype Query {\n  me: User\n  users(limit: Int): [User]\n}\n\ntype User {\n  id: ID!\n  name: String\n}\n```\n\nSee: [sogko/graphql-shorthand-notation-cheat-sheet](https://raw.githubusercontent.com/sogko/graphql-shorthand-notation-cheat-sheet/master/graphql-shorthand-notation-cheat-sheet.png)\n","h2":"Queries"},{"title":"Built in types","elms":"\n#### Scalar types\n\n| `Int` | Integer |\n| `Float` | Float |\n| `String` | String |\n| `Boolean` | Boolean |\n| `ID` | ID |\n\n#### Type definitions\n\n| `scalar` | Scalar type |\n| `type` | Object type |\n| `interface` | Interface type |\n| `union` | Union type |\n| `enum` | Enumerable type |\n| `input` | Input object type |\n\n#### Type modifiers\n\n| `String` | Nullable string |\n| `String!` | Required string |\n| `[String]` | List of strings |\n| `[String]!` | Required list of strings |\n| `[String!]!` | Required list of required strings |\n","h2":"Queries"},{"title":"Mutations","elms":"\n```js\ntype Mutation {\n  users(params: ListUsersInput) [User]!\n}\n```\n","h2":"Queries"},{"title":"Interfaces","elms":"\n```js\ninterface Entity {\n  id: ID!\n}\n\ntype User implements Entity {\n  id: ID!\n  name: String\n}\n```\n","h2":"Queries"},{"title":"Enums","elms":"\n```js\nenum DIRECTION {\n  LEFT\n  RIGHT\n}\n\ntype Root {\n  direction: DIRECTION!\n}\n```\n{: data-line=\"1,2,3,4\"}\n","h2":"Queries"},{"title":"Unions","elms":"\n```js\ntype Artist { ··· }\ntype Album { ··· }\n\nunion Result = Artist | Album\n\ntype Query {\n  search(q: String) [Result]\n}\n```\n{: data-line=\"4\"}\n\nReferences\n----------\n\n- <http://graphql.org/learn/queries/>\n- <http://graphql.org/learn/serving-over-http/>","h2":"Queries"}]}