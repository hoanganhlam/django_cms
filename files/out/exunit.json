{"head":{"title":"ExUnit","category":"Elixir","layout":"2017/sheet","updated":"2018-11-19T00:00:00.000Z"},"body":[{"title":"Test cases","elms":"\n```elixir\ndefmodule MyTest do\n  use ExUnit.Case\n  use ExUnit.Case, async: true  # for async\n\n  test \"the truth\" do\n    assert 1 + 1 == 2\n  end\nend\n```\n","h2":null},{"title":"Capture IO","elms":"\n```elixir\nimport ExUnit.CaptureIO\n\ntest \"capture io\" do\n  result = capture_io(fn ->\n    IO.puts \"sup\"\n  end)\n\n  assert result == \"sup\\n\"\nend\n```\n","h2":null},{"title":"Capture logs","elms":"\n```elixir\nconfig :ex_unit, capture_logs: true\n```\n","h2":null},{"title":"Async","elms":"\n```elixir\ndefmodule AssertionTest do\n  # run concurrently with other test cases\n  use ExUnit.Case, async: true\nend\n```\n","h2":null},{"title":"Assertions","elms":"\n```elixir\nassert x == y\nrefute x == y\n\nassert_raise ArithmeticError, fn ->\n  1 + \"test\"\nend\n\nassert_raise ArithmeticError, \"message\", fn -> ...\nassert_raise ArithmeticError, ~r/message/, fn -> ...\n\nflunk \"This should've been an error\"\n```\n\nSee: [Assertions](http://devdocs.io/elixir/ex_unit/exunit.assertions)\n","h2":null},{"title":"Pattern matching","elms":"\n```elixir\nsetup do\n  {:ok, name: \"John\"}\nend\n```\n\n```elixir\ntest \"it works\", %{name: name} do\n  assert name == \"John\"\nend\n```\n","h2":"Setup"},{"title":"Setup","elms":"\n\n```elixir\ndefp my_hook(_context) do\n  # Invoked in every block in \"a block\"\n  {:ok, name: \"John\", age: 54}\nend\n\ndescribe \"a block\" do\n  setup [:my_hook]\n  \n  test \"John's age\", context do\n    assert context[:name] == \"John\"\n    assert context[:age] == 54\n  end\nend\n```\n\n","h2":"Setup"},{"title":null,"elms":"{: .-one-column}\n\n* [ExUnit Docs](http://devdocs.io/elixir/ex_unit/exunit#configure/1)","h2":"Also see"}]}