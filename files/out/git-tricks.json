{"head":{"title":"Git tricks","category":"Git"},"body":[{"title":null,"elms":"\n    HEAD^       # 1 commit before head\n    HEAD^^      # 2 commits before head\n    HEAD~5      # 5 commits before head\n","h2":"Refs"},{"title":null,"elms":"\n    # create a new branch\n      git checkout -b $branchname\n      git push origin $branchname --set-upstream\n\n    # get a remote branch\n      git fetch origin\n      git checkout --track origin/$branchname\n\n    # delete local remote-tracking branches (lol)\n      git remote prune origin\n\n    # list merged branches\n      git branch -a --merged\n\n    # delete remote branch\n      git push origin :$branchname\n      \n    # go back to previous branch\n      git checkout -\n      ","h2":"Branches"},{"title":null,"elms":"\n    # Rebase your changes on top of the remote master\n      git pull --rebase upstream master\n      \n    # Squash multiple commits into one for a cleaner git log\n    # (on the following screen change the word pick to either 'f' or 's')\n      git rebase -i $commit_ref\n\nSubmodules\n----------\n\n    # Import .gitmodules\n      git submodule init\n\n    # Clone missing submodules, and checkout commits\n      git submodule update --init --recursive\n\n    # Update remote URLs in .gitmodules\n    # (Use when you changed remotes in submodules)\n      git submodule sync\n\nDiff\n----\n","h2":"Collaboration"},{"title":"Diff with stats","elms":"\n    git diff --stat\n    app/a.txt    | 2 +-\n    app/b.txt    | 8 ++----\n    2 files changed, 10 insertions(+), 84 deletions(-)\n","h2":"Collaboration"},{"title":"Just filenames","elms":"\n    git diff --summary\n\nLog options\n-----------\n\n    --oneline\n      e11e9f9 Commit message here\n\n    --decorate\n      shows \"(origin/master)\"\n\n    --graph\n      shows graph lines\n\n    --date=relative\n      \"2 hours ago\"\n\nMisc\n----\n","h2":"Collaboration"},{"title":"Cherry pick","elms":"\n    git rebase 76acada^\n","h2":"Collaboration"},{"title":"Misc","elms":"\n    # get current sha1 (?)\n      git show-ref HEAD -s\n\n    # show single commit info\n      git log -1 f5a960b5\n\n    # Go back up to root directory\n      cd \"$(git rev-parse --show-top-level)\"\n","h2":"Collaboration"},{"title":null,"elms":"\n     $ git shortlog\n     $ git shortlog HEAD~20..    # last 20 commits\n\n     James Dean (1):\n         Commit here\n         Commit there\n\n     Frank Sinatra (5):\n         Another commit\n         This other commit\n","h2":"Short log"},{"title":null,"elms":"\n    git bisect start HEAD HEAD~6\n    git bisect run npm test\n    git checkout refs/bisect/bad   # this is where it screwed up\n    git bisect reset\n","h2":"Bisect"},{"title":"Manual bisection","elms":"\n    git bisect start\n    git bisect good   # current version is good\n\n    git checkout HEAD~8\n    npm test          # see if it's good\n    git bisect bad    # current version is bad\n\n    git bisect reset  # abort\n","h2":"Bisect"},{"title":null,"elms":"\n    git log --grep=\"fixes things\"  # search in commit messages\n    git log -S\"window.alert\"       # search in code\n    git log -G\"foo.*\"              # search in code (regex)\n","h2":"Searching"},{"title":null,"elms":"\n    git config set user.signingkey <GPG KEY ID>       # Sets GPG key to use for signing\n\n    git commit -m \"Implement feature Y\" --gpg-sign    # Or -S, GPG signs commit\n\n    git config set commit.gpgsign true                # Sign commits by default\n    git commit -m \"Implement feature Y\" --no-gpg-sign # Do not sign\n    ","h2":"GPG Signing"}]}