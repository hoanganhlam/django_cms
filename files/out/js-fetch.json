{"head":{"title":"fetch()","category":"JavaScript","layout":"2017/sheet","weight":-3},"body":[{"title":"Fetch","elms":"{: .-prime}\n\n```js\nfetch('/data.json')\n  .then(response => response.json())\n  .then(data => {\n    console.log(data)\n  })\n  .catch(err => ...)\n```\n{: data-line=\"4\"}\n","h2":null},{"title":"Response","elms":"\n```js\nfetch('/data.json')\n.then(res => {\n  res.text()       // response body (=> Promise)\n  res.json()       // parse via JSON (=> Promise)\n  res.status       //=> 200\n  res.statusText   //=> 'OK'\n  res.redirected   //=> false\n  res.ok           //=> true\n  res.url          //=> 'http://site.com/data.json'\n  res.type         //=> 'basic'\n                   //   ('cors' 'default' 'error'\n                   //    'opaque' 'opaqueredirect')\n\n  res.headers.get('Content-Type')\n})\n```\n","h2":null},{"title":"Request options","elms":"\n```js\nfetch('/data.json', {\n  method: 'post',\n  body: new FormData(form), // post body\n  body: JSON.stringify(...),\n\n  headers: {\n    'Accept': 'application/json'\n  },\n\n  credentials: 'same-origin', // send cookies\n  credentials: 'include',     // send cookies, even in CORS\n\n})\n```\n","h2":null},{"title":"Catching errors","elms":"\n```js\nfetch('/data.json')\n  .then(checkStatus)\n```\n\n```js\nfunction checkStatus (res) {\n  if (res.status >= 200 && res.status < 300) {\n    return res\n  } else {\n    let err = new Error(res.statusText)\n    err.response = res\n    throw err\n  }\n}\n```\n\nNon-2xx responses are still successful requests. Use another function to turn them to errors.\n","h2":null},{"title":"Using with node.js","elms":"\n```js\nconst fetch = require('isomorphic-fetch')\n```\n\nSee: [isomorphic-fetch](https://npmjs.com/package/isomorphic-fetch) _(npmjs.com)_\n","h2":null},{"title":null,"elms":"{: .-one-column}\n\n- <https://fetch.spec.whatwg.org/>\n- <https://www.npmjs.com/package/whatwg-fetch>","h2":"References"}]}