{"head":{"title":"Minitest","category":"Ruby"},"body":[{"title":"Usage","elms":"\n    require 'minitest/autorun'\n\n    describe \"X\" do\n      before do .. end\n      after do .. end\n      subject { .. }\n      let(:list) { Array.new }\n\n      it \"should work\" do\n        assert true\n      end\n    end\n","h2":null},{"title":"Specs (.must/.wont)","elms":"\n    expect(x)\n    .must_be :==, 0\n    .must_equal b\n    .must_be_close_to 2.99999\n    .must_be_same_as b\n\n    .must_include needle\n    .must_be_empty\n\n    .must_be_kind_of\n    .must_be_instance_of\n    .must_be_nil\n    .must_match /regex/\n    .must_be :<=, 42\n    .must_respond_to msg\n\n    .must_be_silent  ( proc { \"no stdout or stderr\" }.must_be_silent)\n    .must_output \"hi\"\n\n    proc { ... }.must_output out_or_nil [, err]\n    proc { ... }.must_raise exception\n    proc { ... }.must_throw sym\n","h2":null},{"title":"Test","elms":"\n    class TestHipster < Minitest::Test\n      def setup\n        @subject = [\"silly hats\", \"skinny jeans\"]\n      end\n\n      def teardown\n        @hipster.destroy!\n      end\n\n      def test_for_helvetica_font\n        assert_equal \"helvetica!\", @hipster.preferred_font\n      end\n\n      def test_not_mainstream\n        refute @hipster.mainstream?\n      end\n    end\n","h2":null},{"title":"Assertions","elms":"\n    assert\n    assert_block { ... }\n    assert_empty\n    assert_equal 2, @size\n    assert_in_delta @size, 1, 1\n    assert_in_epsilon\n    assert_includes @list, \"item\"\n    assert_instance_of Array, @list\n    assert_kind_of Enumerable, @list\n    assert_match @str, /regex/\n    assert_nil\n    assert_operator @n, :==, 0\n    assert_output\n    assert_raises\n    assert_respond_to\n    assert_same\n    assert_send\n    assert_silent\n    assert_throws\n","h2":null},{"title":"Minitest::Mock","elms":"\nA simple and clean mock system. There two essential methods at our disposal: expect and verify.\n\n    require 'minitest/autorun'\n\n    describe Twipster, \"Make every tweet a hipster tweet.\" do\n      before do\n        @twitter  = Minitest::Mock.new\n        @twipster = Twipster.new(@twitter)\n      end\n\n      it \"should append a #lolhipster hashtag and update Twitter with our status\" do\n        tweet = \"Skyrim? Too mainstream.\"\n        @twitter.expect :update, true, [\"#{tweet} #lolhipster\"]\n        @twipster.submit(tweet)\n        assert @twitter.verify # verifies tweet and hashtag was passed to `@twitter.update`\n      end\n    end\n","h2":null},{"title":"Reporters","elms":"\n    gem 'minitest-reporters'\n\n    require 'minitest/reporters'\n    Minitest::Reporters.use! Minitest::Reporters::SpecReporter.new\n\n    [Default, Spec, Progress, RubyMate, RubyMine, JUnit]","h2":null}]}