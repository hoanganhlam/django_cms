{"head":{"title":"Routes","category":"Rails"},"body":[{"title":null,"elms":"\n    resources :photos\n\n    # PhotosController:\n    # index  =>    GET /photos\n    # new    =>    GET /photos/new\n    # create =>   POST /photos/new\n    # show   =>    GET /photos/:id\n    # edit   =>    GET /photos/:id/edit\n    # update =>    PUT /photos/:id\n    # delete => DELETE /photos/:id\n    #\n    # Helpers:\n    # new_photo_path\n    # photo_path(id)\n    # edit_photo_path(id)\n","h2":"Multiple resources (`resources`)"},{"title":"Custom actions","elms":"\n    resources :photos do\n      member { get 'preview' }       # /photo/1/preview\n      collection { get 'search' }    # /photos/search\n\n      get 'preview', on: :member     # (..same as the first)\n    end\n","h2":"Multiple resources (`resources`)"},{"title":"Options","elms":"\n    resources :photos,\n      path_names: { new: 'brand_new' }    # /photos/1/brand_new\n      path: 'postings'                    # /postings\n      only: :index\n      only: [:index, :show]\n      except: :show\n      except: [:index, :show]\n\n      shallow: true                       # also generate shallow routes\n      shalow_path: 'secret'\n      shallow_prefix: 'secret'\n","h2":"Multiple resources (`resources`)"},{"title":null,"elms":"\n    resource :coder\n\n    # CodersController:\n    # new    =>    GET /coder/new\n    # create =>   POST /coder/new\n    # show   =>    GET /coder\n    # edit   =>    GET /coder/edit\n    # update =>    PUT /coder\n    # delete => DELETE /coder\n","h2":"Single resource (`resource`)"},{"title":null,"elms":"\n    match 'photo/:id' => 'photos#show'  # /photo/what-is-it\n    match 'photo/:id', id: /[0-9]+/     # /photo/0192\n    match 'photo/:id' => 'photos#show', constraints: { id: /[0-9]+/ }\n    match 'photo/:id', via: :get\n    match 'photo/:id', via: [:get, :post]\n\n    match 'photo/*path' => 'photos#unknown'    # /photo/what/ever\n\n    # params[:format] == 'jpg'\n    match 'photos/:id' => 'photos#show', :defaults => { :format => 'jpg' }\n","h2":"Matching (`match`)"},{"title":"Get/post","elms":"\n`get` is the same as `match via: :get`.\n\n    get 'photo/:id' => 'photos#show'\n    # same as match 'photo/:id' => 'photos#show', via: :get\n\n    post 'photo/:id' => 'photos#update'\n    # same as match 'photo/:id' => 'photos#show', via: :post\n","h2":"Matching (`match`)"},{"title":"Redirection","elms":"\n    match '/stories' => redirect('/posts')\n    match '/stories/:name' => redirect('/posts/%{name}')\n","h2":"Matching (`match`)"},{"title":"Named","elms":"\n    # logout_path\n    match 'exit' => 'sessions#destroy', as: :logout\n    ","h2":"Matching (`match`)"},{"title":"Constraints","elms":"\n    match '/', constraints: { subdomain: 'admin' }\n\n    # admin.site.com/admin/photos\n    namespace 'admin' do\n      constraints subdomain: 'admin' do\n        resources :photos\n      end\n    end\n","h2":"Matching (`match`)"},{"title":"Custom constraints","elms":"\n    class BlacklistConstraint\n      def initialize\n        @ips = Blacklist.retrieve_ips\n      end\n     \n      def matches?(request)\n        @ips.include?(request.remote_ip)\n      end\n    end\n     \n    TwitterClone::Application.routes.draw do\n      match \"*path\" => \"blacklist#index\",\n        :constraints => BlacklistConstraint.new\n    end\n","h2":"Matching (`match`)"},{"title":"Scopes","elms":"\n    scope 'admin', constraints: { subdomain: 'admin' } do\n      resources ...\n    end\n","h2":"Matching (`match`)"},{"title":"Rack middleware","elms":"\n    # Yes, Sprockets is middleware\n    match '/application.js' => Sprockets\n","h2":"Matching (`match`)"},{"title":"Route helpers","elms":"\n    projects_path   # /projects\n    projects_url    # http://site.com/projects\n\n","h2":"Matching (`match`)"},{"title":"Default help text","elms":"\n    # The priority is based upon order of creation:\n    # first created -> highest priority.\n\n    # Sample of regular route:\n    match 'products/:id' => 'catalog#view'\n\n    # Keep in mind you can assign values other than :controller and :action\n\n    # Sample of named route:\n    match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase\n\n    # This route can be invoked with purchase_url(:id => product.id)\n\n    # Sample resource route (maps HTTP verbs to controller actions automatically):\n    resources :products\n\n    # Sample resource route with options:\n    resources :products do\n      member do\n        get 'short'\n        post 'toggle'\n      end\n    \n      collection do\n        get 'sold'\n      end\n    end\n\n    # Sample resource route with sub-resources:\n    resources :products do\n      resources :comments, :sales\n      resource :seller\n    end\n\n    # Sample resource route with more complex sub-resources\n    resources :products do\n      resources :comments\n      resources :sales do\n        get 'recent', :on => :collection\n      end\n    end\n\n    # Sample resource route within a namespace:\n    namespace :admin do\n      # Directs /admin/products/* to Admin::ProductsController\n      # (app/controllers/admin/products_controller.rb)\n      resources :products\n    end\n\n    # You can have the root of your site routed with \"root\"\n    # just remember to delete public/index.html.\n    root :to => 'welcome#index'\n\n    # See how all your routes lay out with \"rake routes\"\n\n    # This is a legacy wild controller route that's not recommended for RESTful applications.\n    # Note: This route will make all actions in every controller accessible via GET requests.\n    match ':controller(/:action(/:id(.:format)))'\n","h2":"Matching (`match`)"},{"title":"References","elms":"\n * [Guides/Routing](http://guides.rubyonrails.org/routing.html)\n\n * [ActionDispatch::Routing::Mapper](http://api.rubyonrails.org/classes/ActionDispatch/Routing/Mapper.html)\n    (See included modules)\n","h2":"Matching (`match`)"}]}