{"head":{"title":"React.js","category":"React","layout":"2017/sheet","ads":true,"tags":["Featured"],"updated":"2020-07-05T00:00:00.000Z","weight":-10,"keywords":["React.Component","render()","componentDidMount()","props/state","dangerouslySetInnerHTML"],"intro":"[React](https://reactjs.org/) is a JavaScript library for building user interfaces. This guide targets React v15 to v16.\n"},"body":[{"title":"Components","elms":"{: .-prime}\n\n```jsx\nimport React from 'cs/react'\nimport ReactDOM from 'react-dom'\n```\n{: .-setup}\n\n```jsx\nclass Hello extends React.Component {\n  render () {\n    return <div className='message-box'>\n      Hello {this.props.name}\n    </div>\n  }\n}\n```\n\n```jsx\nconst el = document.body\nReactDOM.render(<Hello name='John' />, el)\n```\n\nUse the [React.js jsfiddle](http://jsfiddle.net/reactjs/69z2wepo/) to start hacking. (or the unofficial [jsbin](http://jsbin.com/yafixat/edit?js,output))\n","h2":null},{"title":"Import multiple exports","elms":"{: .-prime}\n\n```jsx\nimport React, {Component} from 'react'\nimport ReactDOM from 'react-dom'\n```\n{: .-setup}\n\n```jsx\nclass Hello extends Component {\n  ...\n}\n```\n","h2":null},{"title":"Properties","elms":"\n```html\n<Video fullscreen={true} autoplay={false} />\n```\n{: .-setup}\n\n```jsx\nrender () {\n  this.props.fullscreen\n  const { fullscreen, autoplay } = this.props\n  ···\n}\n```\n{: data-line=\"2,3\"}\n\nUse `this.props` to access properties passed to the component.\n\nSee: [Properties](https://reactjs.org/docs/tutorial.html#using-props)\n","h2":null},{"title":"States","elms":"\n```jsx\nconstructor(props) {\n  super(props)\n  this.state = { username: undefined }\n}\n```\n\n```jsx\nthis.setState({ username: 'rstacruz' })\n```\n\n```jsx\nrender () {\n  this.state.username\n  const { username } = this.state\n  ···\n}\n```\n{: data-line=\"2,3\"}\n\nUse states (`this.state`) to manage dynamic data.\n\nWith [Babel](https://babeljs.io/) you can use [proposal-class-fields](https://github.com/tc39/proposal-class-fields) and get rid of constructor\n\n```jsx\nclass Hello extends Component {\n  state = { username: undefined };\n  ...\n}\n```\n\nSee: [States](https://reactjs.org/docs/tutorial.html#reactive-state)\n\n","h2":null},{"title":"Nesting","elms":"\n```jsx\nclass Info extends Component {\n  render () {\n    const { avatar, username } = this.props\n\n    return <div>\n      <UserAvatar src={avatar} />\n      <UserProfile username={username} />\n    </div>\n  }\n}\n```\nAs of React v16.2.0, fragments can be used to return multiple children without adding extra wrapping nodes to the DOM.\n\n```jsx\nimport React, {\n  Component,\n  Fragment\n} from 'react'\n\nclass Info extends Component {\n  render () {\n    const { avatar, username } = this.props\n\n    return (\n      <Fragment>\n        <UserAvatar src={avatar} />\n        <UserProfile username={username} />\n      </Fragment>\n    )\n  }\n}\n```\n\n{: data-line=\"5,6,7,8,9,10\"}\n\nNest components to separate concerns.\n\nSee: [Composing Components](https://reactjs.org/docs/components-and-props.html#composing-components)\n","h2":null},{"title":"Children","elms":"\n```jsx\n<AlertBox>\n  <h1>You have pending notifications</h1>\n</AlertBox>\n```\n{: data-line=\"2\"}\n\n```jsx\nclass AlertBox extends Component {\n  render () {\n    return <div className='alert-box'>\n      {this.props.children}\n    </div>\n  }\n}\n```\n{: data-line=\"4\"}\n\nChildren are passed as the `children` property.\n\nDefaults\n--------\n","h2":null},{"title":"Setting default props","elms":"\n```jsx\nHello.defaultProps = {\n  color: 'blue'\n}\n```\n{: data-line=\"1\"}\n\nSee: [defaultProps](https://reactjs.org/docs/react-component.html#defaultprops)\n","h2":null},{"title":"Setting default state","elms":"\n```jsx\nclass Hello extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { visible: true }\n  }\n}\n```\n{: data-line=\"4\"}\n\nSet the default state in the `constructor()`.\n\nAnd without constructor using [Babel](https://babeljs.io/) with [proposal-class-fields](https://github.com/tc39/proposal-class-fields).\n\n```jsx\nclass Hello extends Component {\n  state = { visible: true }\n}\n```\n{: data-line=\"2\"}\n\nSee: [Setting the default state](https://reactjs.org/docs/react-without-es6.html#setting-the-initial-state)\n\nOther components\n----------------\n{: .-three-column}\n","h2":null},{"title":"Functional components","elms":"\n```jsx\nfunction MyComponent ({ name }) {\n  return <div className='message-box'>\n    Hello {name}\n  </div>\n}\n```\n{: data-line=\"1\"}\n\nFunctional components have no state. Also, their `props` are passed as the first parameter to a function.\n\nSee: [Function and Class Components](https://reactjs.org/docs/components-and-props.html#functional-and-class-components)\n","h2":null},{"title":"Pure components","elms":"\n```jsx\nimport React, {PureComponent} from 'react'\n\nclass MessageBox extends PureComponent {\n  ···\n}\n```\n{: data-line=\"3\"}\n\nPerformance-optimized version of `React.Component`. Doesn't rerender if props/state hasn't changed.\n\nSee: [Pure components](https://reactjs.org/docs/react-api.html#react.purecomponent)\n","h2":null},{"title":"Component API","elms":"\n```jsx\nthis.forceUpdate()\n```\n\n```jsx\nthis.setState({ ... })\nthis.setState(state => { ... })\n```\n\n```jsx\nthis.state\nthis.props\n```\n\nThese methods and properties are available for `Component` instances.\n\nSee: [Component API](http://facebook.github.io/react/docs/component-api.html)\n\nLifecycle\n---------\n{: .-two-column}\n","h2":null},{"title":"Mounting","elms":"\n| Method                   | Description                                                                                          |\n| ------------------------ | ---------------------------------------------------------------------------------------------------- |\n| `constructor` _(props)_  | Before rendering [#](https://reactjs.org/docs/react-component.html#constructor)                      |\n| `componentWillMount()`   | _Don't use this_ [#](https://reactjs.org/docs/react-component.html#componentwillmount)               |\n| `render()`               | Render [#](https://reactjs.org/docs/react-component.html#render)                                     |\n| `componentDidMount()`    | After rendering (DOM available) [#](https://reactjs.org/docs/react-component.html#componentdidmount) |\n| ---                      | ---                                                                                                  |\n| `componentWillUnmount()` | Before DOM removal [#](https://reactjs.org/docs/react-component.html#componentwillunmount)           |\n| ---                      | ---                                                                                                  |\n| `componentDidCatch()`    | Catch errors (16+) [#](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)          |\n\nSet initial the state on `constructor()`.\nAdd DOM event handlers, timers (etc) on `componentDidMount()`, then remove them on `componentWillUnmount()`.\n","h2":null},{"title":"Updating","elms":"\n| Method                                                  | Description                                          |\n| ------------------------------------------------------- | ---------------------------------------------------- |\n| `componentDidUpdate` _(prevProps, prevState, snapshot)_ | Use `setState()` here, but remember to compare props |\n| `shouldComponentUpdate` _(newProps, newState)_          | Skips `render()` if returns false                    |\n| `render()`                                              | Render                                               |\n| `componentDidUpdate` _(prevProps, prevState)_           | Operate on the DOM here                              |\n\nCalled when parents change properties and `.setState()`. These are not called for initial renders.\n\nSee: [Component specs](http://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops)\n\nHooks (New)\n-----------\n{: .-two-column}\n","h2":null},{"title":"State Hook","elms":"\n```jsx\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n{: data-line=\"5,10\"}\n\nHooks are a new addition in React 16.8.\n\nSee: [Hooks at a Glance](https://reactjs.org/docs/hooks-overview.html)\n","h2":null},{"title":"Declaring multiple state variables","elms":"\n```jsx\nfunction ExampleWithManyStates() {\n  // Declare multiple state variables!\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n  // ...\n}\n```\n","h2":null},{"title":"Effect hook","elms":"\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `You clicked ${count} times`;\n  }, [count]);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n{: data-line=\"6,7,8,9,10\"}\n\nIf you’re familiar with React class lifecycle methods, you can think of `useEffect` Hook as `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` combined.\n\nBy default, React runs the effects after every render — including the first render.\n","h2":null},{"title":"Building your own hooks","elms":"\n#### Define FriendStatus\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  }, [props.friend.id]);\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n```\n{: data-line=\"11,12,13,14\"}\n\nEffects may also optionally specify how to “clean up” after them by returning a function. \n\n#### Use FriendStatus\n\n```jsx\nfunction FriendStatus(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n```\n{: data-line=\"2\"}\n\nSee: [Building Your Own Hooks](https://reactjs.org/docs/hooks-custom.html)\n","h2":null},{"title":"Hooks API Reference","elms":"\nAlso see: [Hooks FAQ](https://reactjs.org/docs/hooks-faq.html)\n\n#### Basic Hooks\n\n| Hook                         | Description                               |\n| ---------------------------- | ----------------------------------------- |\n| `useState`_(initialState)_   |                                           |\n| `useEffect`_(() => { ... })_ |                                           |\n| `useContext`_(MyContext)_    | value returned from `React.createContext` |\n\nFull details: [Basic Hooks](https://reactjs.org/docs/hooks-reference.html#basic-hooks)\n\n#### Additional Hooks\n\n| Hook                                         | Description                                                                 |\n| -------------------------------------------- | ---------------------------------------------------------------------------- |\n| `useReducer`_(reducer, initialArg, init)_    |                                                                              |\n| `useCallback`_(() => { ... })_               |                                                                              |\n| `useMemo`_(() => { ... })_                   |                                                                              |\n| `useRef`_(initialValue)_                     |                                                                              |\n| `useImperativeHandle`_(ref, () => { ... })_  |                                                                              |\n| `useLayoutEffect`                            | identical to `useEffect`, but it fires synchronously after all DOM mutations |\n| `useDebugValue`_(value)_                     | display a label for custom hooks in React DevTools                           |\n\nFull details: [Additional Hooks](https://reactjs.org/docs/hooks-reference.html#additional-hooks)\n\nDOM nodes\n---------\n{: .-two-column}\n","h2":null},{"title":"References","elms":"\n```jsx\nclass MyComponent extends Component {\n  render () {\n    return <div>\n      <input ref={el => this.input = el} />\n    </div>\n  }\n\n  componentDidMount () {\n    this.input.focus()\n  }\n}\n```\n{: data-line=\"4,9\"}\n\nAllows access to DOM nodes.\n\nSee: [Refs and the DOM](https://reactjs.org/docs/refs-and-the-dom.html)\n","h2":null},{"title":"DOM Events","elms":"\n```jsx\nclass MyComponent extends Component {\n  render () {\n    <input type=\"text\"\n        value={this.state.value}\n        onChange={event => this.onChange(event)} />\n  }\n\n  onChange (event) {\n    this.setState({ value: event.target.value })\n  }\n}\n```\n{: data-line=\"5,9\"}\n\nPass functions to attributes like `onChange`.\n\nSee: [Events](https://reactjs.org/docs/events.html)\n","h2":null},{"title":"Transferring props","elms":"\n```html\n<VideoPlayer src=\"video.mp4\" />\n```\n{: .-setup}\n\n```jsx\nclass VideoPlayer extends Component {\n  render () {\n    return <VideoEmbed {...this.props} />\n  }\n}\n```\n{: data-line=\"3\"}\n\nPropagates `src=\"...\"` down to the sub-component.\n\nSee [Transferring props](http://facebook.github.io/react/docs/transferring-props.html)\n","h2":"Other features"},{"title":"Top-level API","elms":"\n```jsx\nReact.createClass({ ... })\nReact.isValidElement(c)\n```\n\n```jsx\nReactDOM.render(<Component />, domnode, [callback])\nReactDOM.unmountComponentAtNode(domnode)\n```\n\n```jsx\nReactDOMServer.renderToString(<Component />)\nReactDOMServer.renderToStaticMarkup(<Component />)\n```\n\nThere are more, but these are most common.\n\nSee: [React top-level API](https://reactjs.org/docs/react-api.html)\n\nJSX patterns\n------------\n{: .-two-column}\n","h2":"Other features"},{"title":"Style shorthand","elms":"\n```jsx\nconst style = { height: 10 }\nreturn <div style={style}></div>\n```\n\n```jsx\nreturn <div style={{ margin: 0, padding: 0 }}></div>\n```\n\nSee: [Inline styles](https://reactjs.org/tips/inline-styles.html)\n","h2":"Other features"},{"title":"Inner HTML","elms":"\n```jsx\nfunction markdownify() { return \"<p>...</p>\"; }\n<div dangerouslySetInnerHTML={{__html: markdownify()}} />\n```\n\nSee: [Dangerously set innerHTML](https://reactjs.org/tips/dangerously-set-inner-html.html)\n","h2":"Other features"},{"title":"Lists","elms":"\n```jsx\nclass TodoList extends Component {\n  render () {\n    const { items } = this.props\n\n    return <ul>\n      {items.map(item =>\n        <TodoItem item={item} key={item.key} />)}\n    </ul>\n  }\n}\n```\n{: data-line=\"6,7\"}\n\nAlways supply a `key` property.\n","h2":"Other features"},{"title":"Conditionals","elms":"\n```jsx\n<Fragment>\n  {showMyComponent\n    ? <MyComponent />\n    : <OtherComponent />}\n</Fragment>\n```\n","h2":"Other features"},{"title":"Short-circuit evaluation","elms":"\n```jsx\n<Fragment>\n  {showPopup && <Popup />}\n  ...\n</Fragment>\n```\n\nNew features\n------------\n{: .-three-column}\n","h2":"Other features"},{"title":"Returning multiple elements","elms":"\nYou can return multiple elements as arrays or fragments.\n\n#### Arrays\n\n```js\nrender () {\n  // Don't forget the keys!\n  return [\n    <li key=\"A\">First item</li>,\n    <li key=\"B\">Second item</li>\n  ]\n}\n```\n{: data-line=\"3,4,5,6\"}\n\n#### Fragments\n```js\nrender () {\n  // Fragments don't require keys!\n  return (\n    <Fragment>\n      <li>First item</li>\n      <li>Second item</li>\n    </Fragment>\n  )\n}\n```\n{: data-line=\"3,4,5,6,7,8\"}\n\nSee: [Fragments and strings](https://reactjs.org/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings)\n","h2":"Other features"},{"title":"Returning strings","elms":"\n```js\nrender() {\n  return 'Look ma, no spans!';\n}\n```\n{: data-line=\"2\"}\n\nYou can return just a string.\n\nSee: [Fragments and strings](https://reactjs.org/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings)\n","h2":"Other features"},{"title":"Errors","elms":"\n```js\nclass MyComponent extends Component {\n  ···\n  componentDidCatch (error, info) {\n    this.setState({ error })\n  }\n}\n```\n{: data-line=\"3,4,5\"}\n\nCatch errors via `componentDidCatch`. (React 16+)\n\nSee: [Error handling in React 16](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)\n","h2":"Other features"},{"title":"Portals","elms":"\n```js\nrender () {\n  return React.createPortal(\n    this.props.children,\n    document.getElementById('menu')\n  )\n}\n```\n{: data-line=\"2,3,4,5\"}\n\nThis renders `this.props.children` into any location in the DOM.\n\nSee: [Portals](https://reactjs.org/docs/portals.html)\n","h2":"Other features"},{"title":"Hydration","elms":"\n```js\nconst el = document.getElementById('app')\nReactDOM.hydrate(<App />, el)\n```\n{: data-line=\"2\"}\n\nUse `ReactDOM.hydrate` instead of using `ReactDOM.render` if you're rendering over the output of [ReactDOMServer](https://reactjs.org/docs/react-dom-server.html).\n\nSee: [Hydrate](https://reactjs.org/docs/react-dom.html#hydrate)\n\nProperty validation\n-------------------\n{: .-three-column}\n","h2":"Other features"},{"title":"PropTypes","elms":"\n```js\nimport PropTypes from 'prop-types'\n```\n{: .-setup}\n\nSee: [Typechecking with PropTypes](https://reactjs.org/docs/typechecking-with-proptypes.html)\n\n| Key   | Description |\n| ----- | ----------- |\n| `any` | Anything    |\n\n#### Basic\n\n| Key      | Description   |\n| -------- | ------------- |\n| `string` |               |\n| `number` |               |\n| `func`   | Function      |\n| `bool`   | True or false |\n\n#### Enum\n\n| Key                       | Description |\n| ------------------------- | ----------- |\n| `oneOf`_(any)_            | Enum types  |\n| `oneOfType`_(type array)_ | Union       |\n\n#### Array\n\n| Key              | Description |\n| ---------------- | ----------- |\n| `array`          |             |\n| `arrayOf`_(...)_ |             |\n\n#### Object\n\n| Key                 | Description                          |\n| ------------------- | ------------------------------------ |\n| `object`            |                                      |\n| `objectOf`_(...)_   | Object with values of a certain type |\n| `instanceOf`_(...)_ | Instance of a class                  |\n| `shape`_(...)_      |                                      |\n\n#### Elements\n\n| Key       | Description   |\n| --------- | ------------- |\n| `element` | React element |\n| `node`    | DOM node      |\n\n#### Required\n\n| Key                | Description |\n| ------------------ | ----------- |\n| `(···).isRequired` | Required    |\n","h2":"Other features"},{"title":"Basic types","elms":"\n```jsx\nMyComponent.propTypes = {\n  email:      PropTypes.string,\n  seats:      PropTypes.number,\n  callback:   PropTypes.func,\n  isClosed:   PropTypes.bool,\n  any:        PropTypes.any\n}\n```\n","h2":"Other features"},{"title":"Required types","elms":"\n```jsx\nMyCo.propTypes = {\n  name:  PropTypes.string.isRequired\n}\n```\n","h2":"Other features"},{"title":"Elements","elms":"\n```jsx\nMyCo.propTypes = {\n  // React element\n  element: PropTypes.element,\n\n  // num, string, element, or an array of those\n  node: PropTypes.node\n}\n```\n","h2":"Other features"},{"title":"Enumerables (oneOf)","elms":"\n```jsx\nMyCo.propTypes = {\n  direction: PropTypes.oneOf([\n    'left', 'right'\n  ])\n}\n```\n","h2":"Other features"},{"title":"Arrays and objects","elms":"\n```jsx\nMyCo.propTypes = {\n  list: PropTypes.array,\n  ages: PropTypes.arrayOf(PropTypes.number),\n  user: PropTypes.object,\n  user: PropTypes.objectOf(PropTypes.number),\n  message: PropTypes.instanceOf(Message)\n}\n```\n\n```jsx\nMyCo.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    age:  PropTypes.number\n  })\n}\n```\n\nUse `.array[Of]`, `.object[Of]`, `.instanceOf`, `.shape`.\n","h2":"Other features"},{"title":"Custom validation","elms":"\n```jsx\nMyCo.propTypes = {\n  customProp: (props, key, componentName) => {\n    if (!/matchme/.test(props[key])) {\n      return new Error('Validation failed!')\n    }\n  }\n}\n```\n\nAlso see\n--------\n\n* [React website](https://reactjs.org) _(reactjs.org)_\n* [React cheatsheet](https://reactcheatsheet.com/) _(reactcheatsheet.com)_\n* [Awesome React](https://github.com/enaqx/awesome-react) _(github.com)_\n* [React v0.14 cheatsheet](react@0.14) _Legacy version_\n\n{%endraw%}","h2":"Other features"}]}