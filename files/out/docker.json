{"head":{"title":"Docker CLI","category":"Devops","layout":"2017/sheet"},"body":[{"title":"`docker build`","elms":"\n```yml\ndocker build [options] .\n  -t \"app/container_name\"    # name\n  --build-arg APP_HOME=$APP_HOME    # Set build-time variables\n```\n\nCreate an `image` from a Dockerfile.\n\n","h2":null},{"title":"`docker run`","elms":"\n```yml\ndocker run [options] IMAGE\n  # see `docker create` for options\n```\n\n#### Example\n\n```\n$ docker run -it debian:buster /bin/bash\n```\nRun a command in an `image`.\n\nManage containers\n-----------------\n","h2":null},{"title":"`docker create`","elms":"\n```yml\ndocker create [options] IMAGE\n  -a, --attach               # attach stdout/err\n  -i, --interactive          # attach stdin (interactive)\n  -t, --tty                  # pseudo-tty\n      --name NAME            # name your image\n  -p, --publish 5000:5000    # port map (host:container)\n      --expose 5432          # expose a port to linked containers\n  -P, --publish-all          # publish all ports\n      --link container:alias # linking\n  -v, --volume `pwd`:/app    # mount (absolute paths needed)\n  -e, --env NAME=hello       # env vars\n```\n\n#### Example\n\n```\n$ docker create --name app_redis_1 \\\n  --expose 6379 \\\n  redis:3.0.2\n```\n\nCreate a `container` from an `image`.\n","h2":null},{"title":"`docker exec`","elms":"\n```yml\ndocker exec [options] CONTAINER COMMAND\n  -d, --detach        # run in background\n  -i, --interactive   # stdin\n  -t, --tty           # interactive\n```\n\n#### Example\n\n```\n$ docker exec app_web_1 tail logs/development.log\n$ docker exec -t -i app_web_1 rails c\n```\n\nRun commands in a `container`.\n\n","h2":null},{"title":"`docker start`","elms":"\n```yml\ndocker start [options] CONTAINER\n  -a, --attach        # attach stdout/err\n  -i, --interactive   # attach stdin\n\ndocker stop [options] CONTAINER\n```\n\nStart/stop a `container`.\n\n","h2":null},{"title":"`docker ps`","elms":"\n```\n$ docker ps\n$ docker ps -a\n$ docker kill $ID\n```\n\nManage `container`s using ps/kill.\n\n","h2":null},{"title":"`docker logs`","elms":"\n```\n$ docker logs $ID\n$ docker logs $ID 2>&1 | less\n$ docker logs -f $ID # Follow log output\n```\n\nSee what's being logged in an `container`.\n\n\nImages\n------\n","h2":null},{"title":"`docker images`","elms":"\n```sh\n$ docker images\n  REPOSITORY   TAG        ID\n  ubuntu       12.10      b750fe78269d\n  me/myapp     latest     7b2431a8d968\n```\n\n```sh\n$ docker images -a   # also show intermediate\n```\n\nManages `image`s.\n","h2":null},{"title":"`docker rmi`","elms":"\n```yml\ndocker rmi b750fe78269d\n```\n\nDeletes `image`s.\n","h2":null},{"title":"Clean all","elms":"\n```sh\ndocker system prune\n```\n\nCleans up dangling images, containers, volumes, and networks (ie, not associated with a container)\n\n```sh\ndocker system prune -a\n```\n\nAdditionally remove any stopped containers and all unused images (not just dangling images)\n","h2":"Clean up"},{"title":"Containers","elms":"\n```sh\n# Stop all running containers\ndocker stop $(docker ps -a -q)\n\n# Delete stopped containers\ndocker container prune\n```\n","h2":"Clean up"},{"title":"Images","elms":"\n```sh\ndocker image prune [-a]\n```\n\nDelete all the images\n","h2":"Clean up"},{"title":"Volumes","elms":"\n```sh\ndocker volume prune\n```\n\nDelete all the volumes\n\nAlso see\n--------\n\n * [Getting Started](http://www.docker.io/gettingstarted/) _(docker.io)_","h2":"Clean up"}]}