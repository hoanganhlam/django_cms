{"head":{"title":"Node.js streams","category":"Node.js","layout":"2017/sheet","weight":-1,"updated":"2017-08-30T00:00:00.000Z"},"body":[{"title":"Types","elms":"\n| Stream      | Description                        |\n| ---         | ---                                |\n| `Readable`  | Data emitter                       |\n| `Writable`  | Data receiver                      |\n| `Transform` | Emitter and receiver               |\n| `Duplex`    | Emitter and receiver (independent) |\n\nSee: [Stream](https://nodejs.org/api/stream.html#stream_stream) _(nodejs.org)_\n","h2":null},{"title":"Streams","elms":"\n```js\nconst Readable = require('stream').Readable\nconst Writable = require('stream').Writable\nconst Transform = require('stream').Transform\n```\n","h2":null},{"title":"Piping","elms":"\n```js\nclock()              // Readable stream\n  .pipe(xformer())   // Transform stream\n  .pipe(renderer())  // Writable stream\n```\n","h2":null},{"title":"Methods","elms":"\n```js\nstream.push(/*...*/)         // Emit a chunk\nstream.emit('error', error)  // Raise an error\nstream.push(null)            // Close a stream\n```\n","h2":null},{"title":"Events","elms":"\n```js\nconst st = source()\nst.on('data', (data) => { console.log('<-', data) })\nst.on('error', (err) => { console.log('!', err.message) })\nst.on('close', () => { console.log('** bye') })\nst.on('finish', () => { console.log('** bye') })\n```\n\nAssuming `source()` is a readable stream.\n","h2":null},{"title":"Flowing mode","elms":"\n```js\n// Toggle flowing mode\nst.resume()\nst.pause()\n```\n\n```js\n// Automatically turns on flowing mode\nst.on('data', /*...*/)\n```\n\nStream types\n------------\n{: .-three-column}\n","h2":null},{"title":"Readable","elms":"\n```js\nfunction clock () {\n  const stream = new Readable({\n    objectMode: true,\n    read() {}\n  })\n\n  setInterval(() => {\n    stream.push({ time: new Date() })\n  }, 1000)\n\n  return stream\n}\n\n// Implement read() if you\n// need on-demand reading.\n```\n\nReadable streams are generators of data. Write data using `stream.push()`.\n","h2":null},{"title":"Transform","elms":"\n```js\nfunction xformer () {\n  let count = 0\n\n  return new Transform({\n    objectMode: true,\n    transform: (data, _, done) => {\n      done(null, { ...data, index: count++ })\n    }\n  })\n}\n```\n\nPass the updated chunk to `done(null, chunk)`.\n","h2":null},{"title":"Writable","elms":"\n```js\nfunction renderer () {\n  return new Writable({\n    objectMode: true,\n    write: (data, _, done) => {\n      console.log('<-', data)\n      done()\n    }\n  })\n}\n```\n","h2":null},{"title":"All together now","elms":"\n```js\nclock()              // Readable stream\n  .pipe(xformer())   // Transform stream\n  .pipe(renderer())  // Writable stream\n```\n","h2":null},{"title":null,"elms":"{: .-one-column}\n\n- <https://nodejs.org/api/stream.html>\n- <https://github.com/substack/stream-handbook>","h2":"Also see"}]}