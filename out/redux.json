{"head":{"title":"Redux","category":"React","layout":"2017/sheet","updated":"2018-01-17T00:00:00.000Z","weight":-3},"body":[{"title":"Creating a store","elms":"\n```js\nimport { createStore } from 'cs/redux'\n```\n{: .-setup}\n\n```js\n// Reducer\nfunction counter (state = { value: 0 }, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return { value: state.value + 1 }\n  case 'DECREMENT':\n    return { value: state.value - 1 }\n  default:\n    return state\n  }\n}\n```\n\n```js\nlet store = createStore(counter)\n```\n\n```js\n// Optional - you can pass `initialState` as a second arg\nlet store = createStore(counter, { value: 0 })\n```\n\nA store is made from a reducer function, which takes the current `state`, and\nreturns a new `state` depending on the `action` it was given.\n","h2":null},{"title":"Using a store","elms":"\n```js\nlet store = createStore(counter)\n```\n{: .-setup}\n\n```js\n// Dispatches an action; this changes the state\nstore.dispatch({ type: 'INCREMENT' })\nstore.dispatch({ type: 'DECREMENT' })\n```\n\n```js\n// Gets the current state\nstore.getState()\n```\n\n```js\n// Listens for changes\nstore.subscribe(() => { ... })\n```\n\nDispatch actions to change the store's state.\n","h2":null},{"title":"Provider","elms":"\n```js\nimport { Provider } from 'react-redux'\n```\n{: .-setup}\n\n```js\nReact.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, mountNode)\n```\n\nThe `<Provider>` component makes the store available in your React components. You need this so you can use `connect()`.\n","h2":"React Redux"},{"title":"Mapping state","elms":"\n```js\nimport { connect } from 'react-redux'\n```\n{: .-setup}\n\n```js\n// A functional React component\nfunction App ({ message, onMessageClick }) {\n  return (\n    <div onClick={() => onMessageClick('hello')}>\n      {message}\n    </div>\n  )\n}\n```\n\n```js\n// Maps `state` to `props`:\n// These will be added as props to the component.\nfunction mapState (state) {\n  return { message: state.message }\n}\n\n// Maps `dispatch` to `props`:\nfunction mapDispatch (dispatch) {\n  return {\n    onMessageClick (message) {\n      dispatch({ type: 'click', message })\n    }\n  }\n}\n\n// Connect them:\nexport default connect(mapState, mapDispatch)(App)\n```\n","h2":"React Redux"},{"title":"Shorthand","elms":"\n```js\nexport default connect(\n  (state) => ({\n    message: state.message\n  }),\n  (dispatch) => ({\n    onMessageClick: (message) => {\n      dispatch({ type: 'click', message })\n    }\n  })\n)(App)\n```\n\nSame as above, but shorter.\n","h2":"React Redux"},{"title":"Combining reducers","elms":"\n```js\nconst reducer = combineReducers({\n  counter, user, store\n})\n```\n\nCombines multiple reducers into one reducer function. See: [combineReducers](https://redux.js.org/docs/api/combineReducers.html) _(redux.js.org)_\n","h2":"React Redux"},{"title":"Signature","elms":"\n```js\n// noop middleware\nconst logger = store => dispatch => action { dispatch(action) }\n```\n\n```js\nconst logger = store => {\n  // This function runs on createStore().\n  // It returns a decorator for dispatch().\n\n  return dispatch => {\n    // Runs on createStore(), too.\n    // It returns a new dispatch() function\n\n    return action => {\n      // Runs on every dispatch()\n    }\n  }\n}\n```\n\nMiddlewares are simply decorators for `dispatch()` to allow you to take\ndifferent kinds of actions, and to perform different tasks when receiving\nactions.\n","h2":"Middleware"},{"title":"Applying middleware","elms":"\n```js\nconst enhancer = applyMiddleware(logger, thunk, ...)\n```\n\n```js\nconst store = createStore(reducer, {}, enhancer)\n```\n{: data-line=\"1\"}\n","h2":"Middleware"},{"title":null,"elms":"{: .-one-column}\n\n* [Redux](https://www.npmjs.com/package/redux) _(npmjs.com)_\n* [React-redux](https://www.npmjs.com/package/react-redux) _(npmjs.com)_\n* [Usage with React](http://redux.js.org/docs/basics/UsageWithReact.html) _(redux.js.org)_\n{: .-also-see}","h2":"References"}]}