{"head":{"title":"React.js (v0.14)","category":"React","layout":"2017/sheet","deprecated":true,"intro":"**Deprecated:** this guide targets an old version of React (v0.14). See the [updated React cheatsheet](react) for new versions.\n"},"body":[{"title":"Components","elms":"\n```js\nvar Component = React.createClass({\n  render: function () {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n\n```js\nReactDOM.render(<Component name=\"John\" />, document.body);\n```\n{:.light}\n\nUse the [React.js jsfiddle](http://jsfiddle.net/reactjs/69z2wepo/) to start hacking. (or the unofficial [jsbin](http://jsbin.com/yafixat/edit?js,output))\n","h2":null},{"title":"Nesting","elms":"\n```js\nvar UserAvatar  = React.createClass({...});\nvar UserProfile = React.createClass({...});\n```\n{:.light}\n\n```js\nvar Info = React.createClass({\n  render() {\n    return <div>\n      <UserAvatar src={this.props.avatar} />\n      <UserProfile username={this.props.username} />\n    </div>;\n  }\n});\n```\n\nNest components to separate concerns. See [multiple components](http://facebook.github.io/react/docs/multiple-components.html).\n","h2":null},{"title":null,"elms":"{:.center}\n","h2":"States & Properties"},{"title":"States and props","elms":"\n```html\n<MyComponent fullscreen={true} />\n```\n{:.light}\n \n```js\n// props\n  this.props.fullscreen //=> true\n\n// state\n  this.setState({ username: 'rstacruz' });\n  this.replaceState({ ... });\n  this.state.username //=> 'rstacruz'\n```\n\n```js\nrender: function () {\n  return <div className={this.props.fullscreen ? 'full' : ''}>\n    Welcome, {this.state.username}\n  </div>;\n}\n```\n\nUse [props](https://facebook.github.io/react/docs/tutorial.html#using-props) (`this.props`) to access parameters passed from the parent.\nUse [states](https://facebook.github.io/react/docs/tutorial.html#reactive-state) (`this.state`) to manage dynamic data.\n","h2":"States & Properties"},{"title":"Setting defaults","elms":"\n```js\nReact.createClass({\n  getInitialState: function () {\n    return { comments: [] };\n  },\n\n  getDefaultProps: function () {\n    return { name: \"Hello\" };\n  }\n);\n```\n\nPre-populates `this.state.comments` and `this.props.name`.\n","h2":"States & Properties"},{"title":"Component API","elms":"\n```js\nReactDOM.findDOMNode(c)  // 0.14+\nReact.findDOMNode(c)  // 0.13\nc.getDOMNode()        // 0.12 below\n```\n{:.light}\n\n```js\nc.forceUpdate()\nc.isMounted()\n\nc.state\nc.props\n\nc.setState({ ... })\nc.replaceState({ ... })\n\nc.setProps({ ... })       // for deprecation\nc.replaceProps({ ... })   // for deprecation\n\nc.refs\n```\n\nThese are methods available for `Component` instances. See [Component API](http://facebook.github.io/react/docs/component-api.html).\n","h2":"Components"},{"title":"Component specs","elms":"\n| Method | What |\n| ---- | ---- |\n| [`render()`](http://facebook.github.io/react/docs/component-specs.html#render) | |\n| ---- | ---- |\n| [`getInitialState()`](http://facebook.github.io/react/docs/component-specs.html#getinitialstate) | |\n| [`getDefaultProps()`](http://facebook.github.io/react/docs/component-specs.html#getdefaultprops) |  |\n| ---- | ---- |\n| [`mixins: [ ... ]`](http://facebook.github.io/react/docs/component-specs.html#mixins) | Mixins ... [more](#mixins) |\n| [`propTypes: { ... }`](http://facebook.github.io/react/docs/component-specs.html#proptypes) | Validation ... [more](#property-validation) |\n| [`statics: { ... }`](http://facebook.github.io/react/docs/component-specs.html#statics) | Static methods |\n| [`displayName: \"...\"`](http://facebook.github.io/react/docs/component-specs.html#displayname) | Automatically filled by JSX |\n{:.greycode.no-head}\n\nMethods and properties you can override. See [component specs](http://facebook.github.io/react/docs/component-specs.html).\n","h2":"Components"},{"title":"Mounting","elms":"\n| `componentWillMount()` | Before rendering (no DOM yet) |\n| `componentDidMount()` | After rendering |\n{:.greycode.no-head.lc}\n\nBefore initial rendering occurs. Add your DOM stuff on didMount (events, timers, etc). See [reference](http://facebook.github.io/react/docs/component-specs.html#mounting-componentwillmount).\n","h2":"Lifecycle"},{"title":"Updating","elms":"\n| `componentWillReceiveProps`*(newProps={})* | Use `setState()` here |\n| `shouldComponentUpdate`*(newProps={}, newState={})* | Skips `render()` if returns false |\n| `componentWillUpdate`*(newProps={}, newState={})* | Can't use `setState()` here |\n| `componentDidUpdate`*(prevProps={}, prevState={})* | Operate on the DOM here |\n{:.greycode.no-head.lc}\n\nCalled when parents change properties and `.setState()`. These are not called for initial renders. See [reference](http://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops).\n","h2":"Lifecycle"},{"title":"Unmounting","elms":"\n| `componentWillUnmount()` | Invoked before DOM removal |\n{:.greycode.no-head.lc}\n\nClear your DOM stuff here (probably done on didMount). See [reference](http://facebook.github.io/react/docs/component-specs.html#unmounting-componentwillunmount).\n","h2":"Lifecycle"},{"title":"Example: loading data","elms":"\n```js\nReact.createClass({\n  componentDidMount: function () {\n    $.get(this.props.url, function (data) {\n      this.setState(data);\n    }.bind(this));\n  },\n\n  render: function () {\n    return <CommentList data={this.state.data} />\n  }\n});\n```\n\nSee [initial AJAX data](http://facebook.github.io/react/tips/initial-ajax.html).\n","h2":"Examples"},{"title":"References","elms":"\n```html\n<input ref=\"myInput\">\n```\n{:.light}\n\n```js\nthis.refs.myInput\nReactDOM.findDOMNode(this.refs.myInput).focus()\nReactDOM.findDOMNode(this.refs.myInput).value\n```\n","h2":"DOM nodes"},{"title":"DOM Events","elms":"Add attributes like `onChange`. See [events](https://facebook.github.io/react/docs/events.html).\n\n```html\n<input type=\"text\"\n    value={this.state.value}\n    onChange={this.handleChange} />\n```\n{:.light}\n\n```js\nhandleChange: function(event) {\n  this.setState({ value: event.target.value });\n}\n```\n\nAllows access to DOM nodes. See [References](http://facebook.github.io/react/docs/more-about-refs.html).\n","h2":"DOM nodes"},{"title":"Two-way binding","elms":"\n```html\nEmail: <input type=\"text\" valueLink={this.linkState('email')} />\n```\n{:.light}\n\n```js\nReact.createClass({\n  mixins: [React.addons.LinkedStateMixin]\n});\n```\n\n```js\nthis.state.email\n```\n\nUse [LinkedStateMixin](http://facebook.github.io/react/docs/two-way-binding-helpers.html) for easier two-way binding.\n","h2":"DOM nodes"},{"title":"Basic types","elms":"\n```js\nReact.createClass({\n  propTypes: {\n    email:      React.PropTypes.string,\n    seats:      React.PropTypes.number,\n    settings:   React.PropTypes.object,\n    callback:   React.PropTypes.func,\n    isClosed:   React.PropTypes.bool,\n    any:        React.PropTypes.any,\n  }\n});\n```\nPrimitive types: `.string`, `.number`, `.func`, and `.bool`. See [propTypes](http://facebook.github.io/react/docs/reusable-components.html#prop-validation).\n","h2":"Property validation"},{"title":"Required types","elms":"\n```js\npropTypes: {\n  requiredFunc:  React.PropTypes.func.isRequired,\n  requiredAny:   React.PropTypes.any.isRequired,\n```\n\nAdd `.isRequired`.\n","h2":"Property validation"},{"title":"React elements","elms":"\n```js\npropTypes: {\n  element:  React.PropTypes.element,  // react element\n  node:     React.PropTypes.node,     // num, string, element\n                                      // ...or array of those\n```\n\nUse `.element`, `.node`.\n","h2":"Property validation"},{"title":"Enumerables","elms":"\n```\npropTypes: {\n  enum:     React.PropTypes.oneOf(['M','F']),  // enum\n  union:    React.PropTypes.oneOfType([        // any\n              React.PropTypes.string,\n              React.PropTypes.number ]),\n```\n\nUse `.oneOf`, `.oneOfType`.\n","h2":"Property validation"},{"title":"Arrays and objects","elms":"\n```js\npropTypes: {\n  array:    React.PropTypes.array,\n  arrayOf:  React.PropTypes.arrayOf(React.PropTypes.number),\n  object:   React.PropTypes.object,\n  objectOf: React.PropTypes.objectOf(React.PropTypes.number),\n\n  message:  React.PropTypes.instanceOf(Message),\n\n  object2:  React.PropTypes.shape({\n    color:  React.PropTypes.string,\n    size:   React.PropTypes.number\n  }),\n```\n\nUse `.array[Of]`, `.object[Of]`, `.instanceOf`, `.shape`.\n","h2":"Property validation"},{"title":"Custom validation","elms":"\n```js\npropTypes: {\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error('Validation failed!');\n    }\n  }\n}\n```\n\nSupply your own function.\n","h2":"Property validation"},{"title":"Class set","elms":"\n```js\nvar cx = require('classnames');\n\nrender: function() {\n  var classes = cx({\n    'message': true,\n    'message-important': this.props.isImportant,\n    'message-read': this.props.isRead\n  });\n\n  return <div className={classes}>Great Scott!</div>;\n}\n```\n\nManipulate DOM classes with [classnames](https://www.npmjs.org/package/classnames), previously known as `React.addons.classSet`. See [Class set](http://facebook.github.io/react/docs/class-name-manipulation.html).\n","h2":"Other features"},{"title":"Propagating properties","elms":"\n```html\n<VideoPlayer src=\"video.mp4\" />\n```\n{:.light}\n\n```js\nvar VideoPlayer = React.createClass({\n  render: function() {\n    /* propagates src=\"...\" down to this sub component */\n    return <VideoEmbed {...this.props} controls='false' />;\n  }\n});\n```\n\nSee [Transferring props](http://facebook.github.io/react/docs/transferring-props.html).\n","h2":"Other features"},{"title":"Mixins","elms":"\n```js\nvar SetIntervalMixin = {\n  componentWillMount: function() { .. }\n}\n```\n{:.light}\n\n```js\nvar TickTock = React.createClass({\n  mixins: [SetIntervalMixin]\n}\n```\n\nSee [addons](https://facebook.github.io/react/docs/addons.html) for some built-in mixins.\n","h2":"Other features"},{"title":null,"elms":"\n```js\nReact.createClass({ ... })\n\nReact.isValidElement(c)\n\nReactDOM.findDOMNode(c) // 0.14+\nReactDOM.render(<Component />, domnode, [callback]) // 0.14+\nReactDOM.unmountComponentAtNode(domnode) // 0.14+\n\nReactDOMServer.renderToString(<Component />) // 0.14+\nReactDOMServer.renderToStaticMarkup(<Component />) // 0.14+\n```\n","h2":"[Top level API](https://facebook.github.io/react/docs/top-level-api.html)"},{"title":"Style shorthand","elms":"\n```js\nvar style = { backgroundImage: 'url(x.jpg)', height: 10 };\nreturn <div style={style}></div>;\n```\n\nSee [inline styles](https://facebook.github.io/react/tips/inline-styles.html).\n","h2":"JSX patterns"},{"title":"InnerHTML","elms":"\n```js\nfunction markdownify() { return \"<p>...</p>\"; }\n<div dangerouslySetInnerHTML={{__html: markdownify()}} />\n```\n\nSee [dangerously set innerHTML](https://facebook.github.io/react/tips/dangerously-set-inner-html.html).\n","h2":"JSX patterns"},{"title":"Lists","elms":"\n```js\nvar TodoList = React.createClass({\n  render: function() {\n    function item(itemText) {\n      return <li>{itemText}</li>;\n    };\n    return <ul>{this.props.items.map(item)}</ul>;\n  }\n});\n```\n","h2":"JSX patterns"},{"title":null,"elms":"\n* [Animations](http://facebook.github.io/react/docs/animation.html)\n{%endraw%}","h2":"See also"}]}