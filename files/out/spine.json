{"head":{"title":"Spine","category":"JavaScript libraries","vim":"ft=python"},"body":[{"title":null,"elms":"\n    class User extends Spine.Model\n      @configure \"User\", \"name\", \"address\"\n\n      fullName: ->\n        [@first, @last].join ' '\n","h2":"Models"},{"title":"JavaScript","elms":"\n    // Subclassing\n    User = Spine.Model.sub()\n","h2":"Models"},{"title":"Class methods","elms":"\n    .configure 'modelname', attributes...\n\n    # Inheritance\n    .include(Module)\n    .extend(Module)\n\n    .create(name: \"John\")\n\n    .count()\n\n    # Events\n    .on 'refresh change', (user) -> ...\n    .trigger 'event'\n\n    .change (user) -> ...  # same as on('change')\n    .fetch (user) -> ...   # same as on('fetch')\n\n    # JSON\n    .toJSON()         # all records\n    .fromJSON(json)   # from json string\n    .fromForm(el)\n\n    # Data\n    .records     # Hash of instances\n    .attributes  # array of attributes (from .configure)\n\n    # Convenience\n    .toString()  #=> \"User\"\n\n    # Find by ID\n    .exists(1)\n    .find(1)     # throws error\n\n    # Find by something\n    .select (u) u.name == 'bob'\n    .findByAttribute 'name', 'bob'\n    .findAllByAttribute 'name', 'bob'\n\n    .all()\n    .slice(6, 13)  # cloned copies of instances\n\n    # Iterating\n    .each (user) ->\n\n    # Ends\n    .first()\n    .last()\n\n    # Deleting\n    .deleteAll()\n    .destroyAll()\n    .destroyAll({ ..options.. })\n    .destroy(2)\n","h2":"Models"},{"title":"Instance methods","elms":"\n    user = new User();\n\n    user\n    .isNew()\n    .exists()\n\n    # Validation\n    .isValid()\n    .validate()    # validate = (-> \"Name required\" unless @name)\n\n    .attributes()  # hash of attr values\n    .eql(other)    # equality check\n\n    # Update\n    .load(attrs)\n    .reload()\n    .fromForm(form)\n    .updateAttribute(\"name\", \"john\")\n    .updateAttributes(name: \"John\")\n\n    # Event\n    .on 'event', -> ...\n    .trigger 'event'\n\n    # Retrieve\n    .toJSON()\n\n    # Persistence\n    .save()\n\n    .destroy()\n    .dup()         # clone as unsaved\n","h2":"Models"},{"title":"Mixins","elms":"\n    class User extends Spine.Model\n      @include MyModule\n      @extend MyModule\n","h2":"Models"},{"title":"Events","elms":"\n    .on 'create'\n    .on 'update'\n    .on 'destroy'\n\n    .on 'save'    # create / update\n    .on 'change'  # create / update / destroy\n\n    .on 'refresh'\n    .on 'error'    # validation error\n","h2":"Models"},{"title":null,"elms":"\n    class User extends Spine.Model\n      @extend Spine.Model.Ajax\n\n      @url: '/users'\n      @url: -> '/users'\n      scope: '2013'\n","h2":"Ajax"},{"title":"Using","elms":"\n    User.fetch()\n    user = new User()\n\n    user.url()            #=> \"/users\"\n    user.url('bands')     #=> \"/users/bands\"\n\n    user.scope = 'admin'\n    user.url()            #=> \"/admin/users\"\n","h2":"Ajax"},{"title":"Host","elms":"\n    Spine.Model.host = 'http://endpoint'\n","h2":"Ajax"},{"title":"Ajax mapping","elms":"\n    read    → GET    /collection\n    create  → POST   /collection (201 created)\n    update  → PUT    /collection/id\n    destroy → DELETE /collection/id\n","h2":"Ajax"},{"title":"Associations","elms":"\n    class Photo extends Spine.Model\n      @belongsTo 'album', 'Album'          # window['Album']\n      @belongsTo 'album', 'models/album'   # via require.js\n\n    class Album\n      @hasMany 'photos', 'models/photo'\n\n    album.photos().all()\n    album.photos().create(name: \"Vacation\")\n    album.photos().find(id)\n\n    photo = Photo.create(album: album)\n    photo.album()\n    photo.album_id\n\n","h2":"Ajax"},{"title":"See","elms":"\n * http://spinejs.com/api/index\n * http://spinejs.com/api/models\n * http://spinejs.com/docs/ajax\n* http://spinejs.com/docs/relations","h2":"Ajax"}]}