{"head":{"title":"Stencil","category":"JavaScript libraries","layout":"2017/sheet","updated":"2019-05-08T00:00:00.000Z","keywords":["@Component","@Prop()","@State()","render()","componentWillLoad()","componentWillUpdate()","Templating","Lifecycle"],"intro":"[Stencil](https://github.com/ionic-team/stencil) is a compiler for web components made by the Ionic team. This guide targets Stencil v0.0.5.\n"},"body":[{"title":null,"elms":"{: .-three-column}\n","h2":"Quick-start guide"},{"title":"Getting started","elms":"{: .-prime}\n\n#### JavaScript\n\n```js\nimport { Component, Prop, State } from '@stencil/core'\n\n@Component({\n  tag: 'my-component',\n  styleUrl: 'my-component.scss'\n})\nexport class MyComponent {\n  @Prop() name: string\n  @State() isVisible: boolean = true\n\n  render () {\n    return <p>I am {this.name}!</p>\n    )\n  }\n}\n```\n\n#### HTML\n\n```html\n<my-component name='Groot' />\n```\n\nThat's the same example in the [Readme](https://github.com/ionic-team/stencil), that's as simple as you can get! Just use `<my-component>` like you would use any other HTML tag.\n","h2":"Quick-start guide"},{"title":"DOM events","elms":"\n```js\nexport class MyComponent {\n  render () {\n    return (\n      <input\n        onChange={(event: UIEvent) => this.inputChanged(event)}\n      />\n    )\n  }\n\n  inputChanged (event) {\n    console.log('input changed:', event.target.value)\n  }\n}\n```\n{: data-line=\"5,10,11\"}\n\nStencil uses DOM events.\n\nSee: [Handling user input](https://stenciljs.com/docs/templating/#handling-user-input)\n","h2":"Quick-start guide"},{"title":"Multiple children","elms":"\n```js\nrender () {\n  return [\n    <h1>Hello there</h1>,\n    <p>This component returns multiple nodes</p>\n  ]\n}\n```\n{: data-line=\"3,4\"}\n\n`render()` can return an array of elements.\n\nSee: [Complex template content](https://stenciljs.com/docs/templating#complex-template-content)\n","h2":"Quick-start guide"},{"title":"Managing state","elms":"\n```js\nexport class MyComponent {\n  @State() isVisible: boolean\n\n  show () {\n    this.isVisible = true\n  }\n}\n```\n{: data-line=\"4,5\"}\n\nJust do assignments. You can't do mutations though, see next section.\n\nSee: [Managing component state](https://stenciljs.com/docs/decorators#managing-component-state)\n","h2":"State"},{"title":"Updating arrays and objects","elms":"\n#### ✗ Bad\n```js\nthis.names.push('Larry')  // ⚠️\nthis.options.show = true  // ⚠️\n```\n\n#### ✓ OK\n\n```js\nthis.names = [ ...this.names, 'Larry' ]\nthis.options = { ...this.options, show: true }\n```\n\nMutable operations such as `push()` won't work. You'll need to assign a new copy.\n\nSee: [Updating arrays](https://stenciljs.com/docs/reactive-data/#updating-arrays)\n","h2":"State"},{"title":"Using slot","elms":"\n```html\n<my-component>\n  <span>Hello, friends</span>\n</my-component>\n```\n{: data-line=\"2\"}\n\n#### Component\n\n```js\nrender() {\n  return <h1><slot /></h1>\n}\n```\n{: data-line=\"2\"}\n\nYou can pass JSX/HTML as child elements. Use the `slot` tag to use them inside your component.\n\nSee: [Slots](https://stenciljs.com/docs/templating#slots)\n","h2":"Slots"},{"title":"Multiple slots","elms":"\n```html\n<my-component>\n  <p slot='my-header'>Hello</p>\n  <p slot='my-footer'>Thanks</p>\n</my-component>\n```\n{: data-line=\"2,3\"}\n\n#### Component\n\n```js\nrender () {\n  return <div>\n    <header><slot name='my-header' /></header>\n    <footer><slot name='my-footer' /></footer>\n  </div>\n}\n```\n{: data-line=\"3,4\"}\n\nSee: [Slots](https://stenciljs.com/docs/templating#slots)\n","h2":"Slots"},{"title":"Lifecycle hooks","elms":"\n| Event                   | Description      |\n| ---                     | ---              |\n| `componentWillLoad()`   | Before rendering |\n| `componentDidLoad()`    | After rendering  |\n| ---                     | ---              |\n| `componentWillUpdate()` | Before updating  |\n| `componentDidUpdate()`  | After updating   |\n| ---                     | ---              |\n| `componentDidUnload()`  | After unmounting |\n\nSee: [Component lifecycle](https://stenciljs.com/docs/component-lifecycle)\n","h2":"Lifecycle"},{"title":"Example","elms":"\n```js\nexport class MyComponent {\n  componentWillUpdate () {\n    console.log('updating')\n  }\n}\n```\n","h2":"Lifecycle"},{"title":null,"elms":"\n- [Stencil docs](https://stenciljs.com/docs/) _(stenciljs.com)_","h2":"References"}]}