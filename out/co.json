{"head":{"title":"co","category":"JavaScript libraries","layout":"2017/sheet","updated":"2017-10-27T00:00:00.000Z","weight":-1,"intro":"[co](https://github.com/tj/co) allows you to use generators to manage async flow.\n"},"body":[{"title":"Running generators","elms":"\n```js\nco(function * () {\n  yield Promise.resolve(true)\n}).then(...)\n```\n\nA generator can `yield` a thunk or promise. Using `co()` will immediately invoke the block inside it.\n","h2":null},{"title":"Generator → Promise","elms":"\n```js\nvar fn = co.wrap(function * (val) {\n  return yield Promise.resolve(val)\n})\n\nfn().then(...)\n```\n\nUse `co.wrap()`. Most of the time, you'll be using co.wrap.\n","h2":null},{"title":"Generator → Node callback","elms":"\n```js\nvar get = unyield(function * () {\n})\n\nget(function (err, res) { ... })\n```\n\nUse [unyield]. (You can [thunkify] this later)\n\n","h2":null},{"title":"Node callback → Thunk","elms":"\n```js\nvar readFile = thunkify(fs.readFile)\n\nco(function * () {\n  var data = yield readFile('index.txt', 'utf-8')\n})\n```\n\nUse [thunkify]. You can yield this. You can also use [thenify] too.\n","h2":null},{"title":"Using Node.js API","elms":"\n```js\nvar readFile = require('mz/fs').readFile\n\nvar getLines = co.wrap(function * (filename) {\n  var data = yield readFile(filename, 'utf-8')\n  return data.split('\\n')\n})\n\ngetLines('file.txt').then((lines) => { ... })\n```\n\nUse [mz] for async Node.js API. You can also either [thunkify] or [thenify] them instead.","h2":null}]}