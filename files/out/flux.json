{"head":{"title":"Flux architecture","category":"React"},"body":[{"title":null,"elms":"\n* __Dispatchers__ receive *actions* that get dispatched to its listeners.\n\n* __Stores__ are objects that store data, usually changed from a dispatcher listener.\n\n* __Views__ are React components that listen to Store changes, or emit *actions* to the dispatcher.\n\n----\n","h2":"Architecture"},{"title":"Pub-sub","elms":"[A dispatcher][dispatcher] emits events (`.dispatch()`) to its listeners (`.register(fn)`).\n\n```js\nvar Dispatcher = require('cs/flux').Dispatcher;\n\nd = new Dispatcher();\n\n// send\nd.dispatch({ action: 'edit', ... };\n\n// receive\ntoken = d.register(function (payload) {\n  payload.action === 'edit'\n})\n```\n","h2":"Dispatcher"},{"title":"Ensuring proper order","elms":"\nWith multiple listeners, you can ensure one is fired after another using `.waitFor()`.\n\n```js\ntoken1 = d.register(...);\n\ntoken2 = d.register(function (payload) {\n\n  // ensure receiver 1 is fired before this\n  d.waitFor([ token1 ]);\n  \n  // process here\n})\n```\n","h2":"Dispatcher"},{"title":"Subclassing","elms":"\n[Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) is the preferred way to subclass Dispatcher (think `$.extend`).<br>\nYou can also make *action creators*, which are shortcuts for `dispatch()`.\n\n```js\nvar Dispatcher = require('flux').Dispatcher;\nvar assign = require('object-assign');\n\nvar AppDispatcher = assign({}, Dispatcher.prototype, {\n\n  // action creator\n  handleViewAction(action) {\n    this.dispatch({\n      source: 'VIEW_ACTION',\n      action: action\n    })\n  } \n\n})\n```\n\n----\n","h2":"Dispatcher"},{"title":"Plain objects","elms":"Stores are just like objects.\n\n```js\nvar TodoStore = { list: [] };\n```\n","h2":"Stores"},{"title":"Events","elms":"Sometimes they're eventemitters, too. Usually it's used to emit `change` events for views to pick up.\n\n```js\nvar TodoStore = assign({}, EventEmitter.prototype, {\n  ...\n});\n\nTodoStore.emit('change');\nTodoStore.on('change', function () { ... });\n```\n","h2":"Stores"},{"title":"Model logic","elms":"Logic can sometimes belong in stores.\n\n```js\n{\n  isAllActive() {\n    return this.list.every(item => item.active);\n  }\n}\n```\n\n\n----\n","h2":"Stores"},{"title":"Instantiate","elms":"Make a Dispatcher and Stores.\n\n```js\nd = new Dispatcher();\nTabStore = { tab: 'home' };\n```\n","h2":"Stores and dispatchers"},{"title":"Updating data","elms":"Dispatch events to alter the store.\n\n```js\nd.dispatch({ action: 'tab.change', tab: 'timeline' });\n\nd.register(function (data) {\n  if (data.action === 'tab.change') {\n    TabStore.tab = data.tab;\n  }\n});\n```\n\n----\n","h2":"Stores and dispatchers"},{"title":"Listen to dispatchers","elms":"Views (React Components) can listen to Dispatchers.\n\n```js\nvar TodoApp = React.createClass({\n\n  componentDidMount() {\n    this.token = AppDispatcher.register((payload) => {\n      switch (payload.action) {\n        case 'tab.change':\n          this.render();\n          // ...\n      }\n    });\n  },\n  \n  componentDidUnmount() {\n    AppDispatcher.unregister(this.token);\n  }\n  \n});\n```\n","h2":"With Views"},{"title":"Listen to Stores","elms":"Or to Stores's `change` events.\n\n```js\n{\n  componentDidMount() {\n    TodoStore.on('change', this.onChange);\n  },\n  \n  componentDidUnmount() {\n    TodoState.removeListener('change', this.onChange);\n  },\n  \n  onChange(data) {\n    // ...\n  }\n}\n```\n\n----\n","h2":"With Views"},{"title":"Also see","elms":"\n* [Dispatcher API][dispatcher]\n* [React cheatsheet](react.html)\n* [Dispatcher.js source](https://github.com/facebook/flux/blob/master/src/Dispatcher.js)\n* [Flux-todomvc explanation](https://github.com/facebook/flux/tree/master/examples/flux-todomvc)\n\n[dispatcher]: http://facebook.github.io/flux/docs/dispatcher.html","h2":"With Views"}]}