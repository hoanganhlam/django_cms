{"head":{"title":"Awesome Redux","category":"React","layout":"2017/sheet","updated":"2017-11-19T00:00:00.000Z"},"body":[{"title":"redux-actions","elms":"\nCreate action creators in flux standard action format.\n{: .-setup}\n\n```js\nincrement = createAction('INCREMENT', amount => amount)\nincrement = createAction('INCREMENT')  // same\n```\n\n```js\nincrement(42) === { type: 'INCREMENT', payload: 42 }\n```\n\n```js\n// Errors are handled for you:\nerr = new Error()\nincrement(err) === { type: 'INCREMENT', payload: err, error: true }\n```\n\n[redux-actions](https://www.npmjs.com/package/redux-actions)\n{: .-crosslink}\n","h2":null},{"title":"flux-standard-action","elms":"\nA standard for flux action objects. An action may have an `error`, `payload` and `meta` and nothing else.\n{: .-setup}\n\n```js\n{ type: 'ADD_TODO', payload: { text: 'Work it' } }\n{ type: 'ADD_TODO', payload: new Error(), error: true }\n```\n\n[flux-standard-action](https://github.com/acdlite/flux-standard-action)\n{: .-crosslink}\n","h2":null},{"title":"redux-multi","elms":"\nDispatch multiple actions in one action creator.\n{: .-setup}\n\n```js\nstore.dispatch([\n  { type: 'INCREMENT', payload: 2 },\n  { type: 'INCREMENT', payload: 3 }\n])\n```\n\n[redux-multi](https://github.com/ashaffer/redux-multi)\n{: .-crosslink}\n","h2":null},{"title":"reduce-reducers","elms":"Combines reducers (like *combineReducers()*), but without namespacing magic.\n{: .-setup}\n\n```js\nre = reduceReducers(\n  (state, action) => state + action.number,\n  (state, action) => state + action.number\n)\n\nre(10, { number: 2 })  //=> 14\n```\n\n[reduce-reducers](https://www.npmjs.com/package/reduce-reducers)\n{: .-crosslink}\n","h2":null},{"title":"redux-logger","elms":"\nLogs actions to your console.\n{: .-setup}\n\n```js\n// Nothing to see here\n```\n\n[redux-logger](https://github.com/evgenyrodionov/redux-logger)\n{: .-crosslink}\n\nAsync\n-----\n","h2":null},{"title":"redux-promise","elms":"\nPass promises to actions. Dispatches a flux-standard-action.\n{: .-setup}\n\n```js\nincrement = createAction('INCREMENT')  // redux-actions\nincrement(Promise.resolve(42))\n```\n\n[redux-promise](https://github.com/acdlite/redux-promise)\n{: .-crosslink}\n","h2":null},{"title":"redux-promises","elms":"\nSorta like that, too. Works by letting you pass *thunks* (functions) to `dispatch()`. Also has 'idle checking'.\n{: .-setup}\n\n```js\nfetchData = (url) => (dispatch) => {\n  dispatch({ type: 'FETCH_REQUEST' })\n  fetch(url)\n    .then((data) => dispatch({ type: 'FETCH_DONE', data })\n    .catch((error) => dispatch({ type: 'FETCH_ERROR', error })\n})\n\nstore.dispatch(fetchData('/posts'))\n```\n\n```js\n// That's actually shorthand for:\nfetchData('/posts')(store.dispatch)\n```\n\n[redux-promises](https://www.npmjs.com/package/redux-promises)\n{: .-crosslink}\n","h2":null},{"title":"redux-effects","elms":"\nPass side effects declaratively to keep your actions pure.\n{: .-setup}\n\n```js\n{\n  type: 'EFFECT_COMPOSE',\n  payload: {\n    type: 'FETCH'\n    payload: {url: '/some/thing', method: 'GET'}\n  },\n  meta: {\n    steps: [ [success, failure] ]\n  }\n}\n```\n\n[redux-effects](https://www.npmjs.com/package/redux-effects)\n{: .-crosslink}\n","h2":null},{"title":"redux-thunk","elms":"\nPass \"thunks\" to as actions. Extremely similar to redux-promises, but has support for getState.\n{: .-setup}\n\n```js\nfetchData = (url) => (dispatch, getState) => {\n  dispatch({ type: 'FETCH_REQUEST' })\n  fetch(url)\n    .then((data) => dispatch({ type: 'FETCH_DONE', data })\n    .catch((error) => dispatch({ type: 'FETCH_ERROR', error })\n})\n\nstore.dispatch(fetchData('/posts'))\n```\n\n```js\n// That's actually shorthand for:\nfetchData('/posts')(store.dispatch, store.getState)\n```\n\n```js\n// Optional: since fetchData returns a promise, it can be chained\n// for server-side rendering\nstore.dispatch(fetchPosts()).then(() => {\n  ReactDOMServer.renderToString(<MyApp store={store} />)\n})\n```\n\n[redux-thunk](https://www.npmjs.com/package/redux-thunk)\n{: .-crosslink}","h2":null}]}