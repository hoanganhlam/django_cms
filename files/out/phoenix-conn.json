{"head":{"title":"Phoenix: Plug.Conn","category":"Elixir","layout":"2017/sheet","updated":"2018-01-19T00:00:00.000Z","weight":-5},"body":[{"title":"Request","elms":"{: .-prime}\n\n```elixir\nconn.host          # → \"example.com\"\nconn.method        # → \"GET\"\nconn.path_info     # → [\"posts\", \"1\"]\nconn.request_path  # → \"/posts/1\"\nconn.query_string  # → \"utm_source=twitter\"\nconn.port          # → 80\nconn.scheme        # → :http\nconn.peer          # → { {127, 0, 0, 1}, 12345 }\nconn.remote_ip     # → { 151, 236, 219, 228 }\nconn.req_headers   # → [{\"content-type\", \"text/plain\"}]\n```\n\n```elixir\nconn |> get_req_header(\"content-type\")\n# → [\"text/plain\"]\n```\n","h2":null},{"title":"Updating conn","elms":"\n```elixir\nconn\n|> put_req_header(\"accept\", \"application/json\")\n```\n\nUsually only useful for tests.\n\nResponse\n--------\n","h2":null},{"title":"Response","elms":"{: .-prime}\n\n```elixir\nconn.resp_body     # → \"...\"\nconn.resp_charset  # → \"utf-8\"\nconn.resp_cookies  # → ...\nconn.resp_headers  # → ...\nconn.status        # → ...\n```\n","h2":null},{"title":"Sending responses","elms":"\n```elixir\n# Plug.Conn\nconn\n|> html(\"<html><head>...\")\n|> json(%{ message: \"Hello\" })\n|> text(\"Hello\")\n```\n\n```elixir\n|> redirect(to: \"/foo\")\n|> redirect(external: \"http://www.google.com/\")\n|> halt()\n```\n\n```elixir\n|> put_resp_content_type(\"text/plain\")\n|> put_resp_cookie(\"abc\", \"def\")\n|> put_resp_header(\"X-Delivered-By\", \"myapp\")\n|> put_status(202)\n|> put_status(:not_found)\n```\n\n```elixir\n|> put_private(:plug_foo, \"...\")  # reserved for libraries\n```\n\n```elixir\n|> send_resp(201, \"\")\n```\n","h2":null},{"title":"Phoenix views","elms":"\n```elixir\n# Phoenix.Controller\nconn\n|> render(\"index.html\")\n|> render(\"index.html\", hello: \"world\")\n|> render(MyApp.ErrorView, \"404.html\")\n```\n\n```elixir\n|> put_layout(:foo)\n|> put_layout(false)\n|> put_view(ErrorView)\n```\n\n```elixir\n|> put_secure_browser_headers()\n# prevent clickjacking, nosniff, and xss protection\n# x-frame-options, x-content-type-options, x-xss-protection\n```\n\n```elixir\n|> put_new_view(ErrorView)  # if not set yet\n|> put_new_layout(:foo)\n```\n\n```elixir\nlayout(conn)\n```\n\nOther features\n--------------\n","h2":null},{"title":"Other fields","elms":"{: .-prime}\n\n```elixir\nconn.assigns          # storage of crap\nconn.owner            # process\nconn.halted           # if pipeline was halted\nconn.secret_key_base  # ...\nconn.state            # :unset, :set, :file, :sent, :chunked\n```\n","h2":null},{"title":"Accepts","elms":"\n```js\nplug :accepts, [\"html\", \"json\"]\nconn |> accepts([\"html\", \"json\"])\nget_format(conn)  # → \"html\"\nconn.accepts\n```\n","h2":null},{"title":"Assigns","elms":"\n```elixir\nconn.assigns[:hello]\nconn |> assign(:user_id, 100)\n```\n\n```elixir\nconn = async_assign(conn, :location, fn -> geoip_lookup() end)\nawait_assign(conn, :location)\n```\n","h2":null},{"title":"Session","elms":"\n```elixir\nconn = fetch_session(conn)   # or plug :fetch_session\n\nconn = put_session(conn, :message, \"new stuff we just set in the session\")\nget_session(conn, :message)\nconn = clear_session(conn)\n```\n\n```elixir\nconn\n|> put_flash(:info, \"Success\")\n|> put_flash(:error, \"Oh no\")\n```\n\nAlso available: `flash` `cookie` `params`\n","h2":null}]}