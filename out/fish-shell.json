{"head":{"title":"Fish shell","category":"CLI","layout":"2017/sheet","prism_languages":["fish"],"updated":"2018-01-31T00:00:00.000Z","weight":-1},"body":[{"title":"Keys","elms":"\n| Shortcut            | Description                 |\n| ---                 | ---                         |\n| `Alt ←` _/_ `Alt →` | Move word                   |\n| `^U`                | Delete to beginning         |\n| `^W`                | Delete to previous `/`      |\n| `^D`                | Delete next character       |\n| `Alt D`             | Delete next word            |\n| `^C`                | Cancel line                 |\n| `Alt P`             | Page output                 |\n| ---                 | ---                         |\n| `Alt ↑` _/_ `Alt ↓` | Previous _/_ next arguments |\n| `Alt E` _/_ `Alt V` | Open in external editor     |\n| `^L`                | Repaint screen              |\n{: .-shortcuts}\n","h2":null},{"title":"Help","elms":"\n| `Alt H` | Help on word (man)                     |\n| `Alt W` | Help on word (short descriptions)      |\n| `Alt L` | List directory on cursor               |\n{: .-shortcuts}\n","h2":null},{"title":"Writing functions","elms":"\n```fish\nfunction my_function --description \"My description\"\n  ···\nend\n```\n","h2":"Function"},{"title":"Conditional","elms":"\n```fish\nif test -f foo.txt\n  ···\nelse if test -f bar.txt\n  ···\nelse\n  ···\nend\n```\n","h2":"Function"},{"title":"Combining tests","elms":"\n```fish\nif test -f foo.txt && test -f bar.txt\n```\n\n```fish\nif test -f foo.txt -a -f bar.txt\n```\n\n```fish\nif test \\( -f foo.txt \\) -a -f \\( bar.txt \\)\n```\n","h2":"Function"},{"title":"Events","elms":"\n#### Emitting\n\n```fish\nemit my_event\n```\n\n#### Listening\n\n```fish\nfunction myhook --on-event my_event\n  ···\nend\n```\n\nThis lets you hook onto events, such as `fish_prompt`.\n","h2":"Function"},{"title":"Creating completions","elms":"\n#### ~/.fish/completions/mycommand.fish\n\n```fish\ncomplete -c mycommand ...\ncomplete -c mycommand ...\ncomplete -c mycommand ...\n```\n","h2":"Completions"},{"title":"Options","elms":"\n```fish\ncomplete \\\n  -c                         # command\n  -s                         # short option\n  -l                         # long option\n  -r, --require-parameter\n  -f, --no-files\n  -x                         # exclusive (-r -f)\n  -n '__fish_use_subcommand' # condition\n  --description \"..\"\n```\n\n#### Example\n\n```fish\n  complete -c $cmd \\\n-n '__fish_use_subcommand' \\\n-x -a hello \\\n--description 'lol'\n```\n","h2":"Completions"},{"title":"Conditions","elms":"\n| Condition | Description\n| --- | ---\n| `-n __fish_complete_directories STRING DESCRIPTION` | performs path completion on STRING, allowing only directories, and giving them the description DESCRIPTION.\n| `-n __fish_complete_path STRING DESCRIPTION` | performs path completion on STRING, giving them the description DESCRIPTION.\n| `-n __fish_complete_groups` | prints a list of all user groups with the groups members as description.\n| `-n __fish_complete_pids` | prints a list of all processes IDs with the command name as description.\n| `-n __fish_complete_suffix SUFFIX` | performs file completion allowing only files ending in SUFFIX. The mimetype database is used to find a suitable description.\n| `-n __fish_complete_users` | prints a list of all users with their full name as description.\n| `-n __fish_print_filesystems` | prints a list of all known file systems. Currently, this is a static list, and not dependent on what file systems the host operating system actually understands.\n| `-n __fish_print_hostnames` | prints a list of all known hostnames. This functions searches the fstab for nfs servers, ssh for known hosts and checks the /etc/hosts file.\n| `-n __fish_print_interfaces` | prints a list of all known network interfaces.\n| `-n __fish_print_packages` | prints a list of all installed packages. This function currently handles Debian, rpm and Gentoo packages.\n| `-n __fish_use_subcommand` |\n| `-n __fish_seen_subcommand_from init` |\n\n#### Example\n\n```fish\ncomplete -c ruby -s X -x -a '(__fish_complete_directories (commandline -ct))' --description 'Directory'\n```\n","h2":"Completions"},{"title":"Examples","elms":"\nStart each example with `complete -c cmdname`\n\n```fish\n-x\n  # no filename completion\n```\n\n```fish\n-s d -x -a \"read skip\"\n  # -d {read|skip}\n```\n\n```fish\n-s d -x\n  # -d <something>\n```\n\n```fish\n-s f -r\n  # -f FILE\n```\n\n```fish\n-s f -l force\n  # -f, --force\n```\n\n```fish\n-a \"(cat /etc/passwd | cut -d : -f 1)\"\n  # first argument as filename\n```","h2":"Completions"}]}