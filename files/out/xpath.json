{"head":{"title":"Xpath","category":"HTML","layout":"2017/sheet","tags":["Featured"],"weight":-5,"description":"$x('//div//p//*') == $('div p *'), $x('//[@id=\"item\"]') == $('#item'), and many other Xpath examples.\n"},"body":[{"title":"Xpath test bed","elms":"{: .-intro}\n\nTest queries in the Xpath test bed:\n\n- [Xpath test bed](http://www.whitebeam.org/library/guide/TechNotes/xpathtestbed.rhtm) _(whitebeam.org)_\n","h2":"Testing"},{"title":"Browser console","elms":"\n```js\n$x(\"//div\")\n```\n\nWorks in Firefox and Chrome.\n","h2":"Testing"},{"title":"Descendant selectors","elms":"\n| CSS                          | Xpath                                                    | ?                       |\n| ----                         | ----                                                     | --                      |\n| `h1`                         | `//h1`                                                   | [?](#prefixes)          |\n| `div p`                      | `//div//p`                                               | [?](#axes)              |\n| `ul > li`                    | `//ul/li`                                                | [?](#axes)              |\n| `ul > li > a`                | `//ul/li/a`                                              |                         |\n| `div > *`                    | `//div/*`                                                |                         |\n| ----                         | ----                                                     | --                      |\n| `:root`                      | `/`                                                      | [?](#prefixes)          |\n| `:root > body`               | `/body`                                                  |                         |\n{: .xp}\n","h2":"Selectors"},{"title":"Attribute selectors","elms":"\n| CSS                          | Xpath                                                    | ?                       |\n| ----                         | ----                                                     | --                      |\n| `#id`                        | `//*[@id=\"id\"]`                                           | [?](#predicates)        |\n| `.class`                     | `//*[@class=\"class\"]` *...[kinda](#class-check)*          |                         |\n| `input[type=\"submit\"]`       | `//input[@type=\"submit\"]`                                |                         |\n| `a#abc[for=\"xyz\"]`           | `//a[@id=\"abc\"][@for=\"xyz\"]`                             | [?](#chaining-order)    |\n| `a[rel]`                     | `//a[@rel]`                                              |                         |\n| ----                         | ----                                                     | --                      |\n| `a[href^='/']`               | `//a[starts-with(@href, '/')]`                           | [?](#string-functions)  |\n| `a[href$='pdf']`             | `//a[ends-with(@href, '.pdf')]`                          |                         |\n| `a[href*='://']`             | `//a[contains(@href, '://')]`                            |                         |\n| `a[rel~='help']`             | `//a[contains(@rel, 'help')]` *...[kinda](#class-check)* |                         |\n{: .xp}\n","h2":"Selectors"},{"title":"Order selectors","elms":"\n| CSS                          | Xpath                                                    | ?                       |\n| ----                         | ----                                                     | --                      |\n| `ul > li:first-of-type`      | `//ul/li[1]`                                             | [?](#indexing)          |\n| `ul > li:nth-of-type(2)`     | `//ul/li[2]`                                             |                         |\n| `ul > li:last-of-type`       | `//ul/li[last()]`                                        |                         |\n| `li#id:first-of-type`        | `//li[1][@id=\"id\"]`                                      | [?](#chaining-order)    |\n| `a:first-child`              | `//*[1][name()=\"a\"]`                                     |                         |\n| `a:last-child`               | `//*[last()][name()=\"a\"]`                                |                         |\n{: .xp}\n","h2":"Selectors"},{"title":"Siblings","elms":"\n| CSS                          | Xpath                                                    | ?                       |\n| ----                         | ----                                                     | --                      |\n| `h1 ~ ul`                    | `//h1/following-sibling::ul`                             | [?](#using-axes)        |\n| `h1 + ul`                    | `//h1/following-sibling::ul[1]`                          |                         |\n| `h1 ~ #id`                   | `//h1/following-sibling::[@id=\"id\"]`                     |                         |\n{: .xp}\n","h2":"Selectors"},{"title":"jQuery","elms":"\n| CSS                          | Xpath                                                    | ?                       |\n| ----                         | ----                                                     | --                      |\n| `$('ul > li').parent()`      | `//ul/li/..`                                             | [?](#other-axes)        |\n| `$('li').closest('section')` | `//li/ancestor-or-self::section`                         |                         |\n| `$('a').attr('href')`        | `//a/@href`                                              | [?](#steps)             |\n| `$('span').text()`           | `//span/text()`                                          |                         |\n{: .xp}\n","h2":"Selectors"},{"title":"Other things","elms":"\n| CSS                          | Xpath                                                    | ?                       |\n| ----                         | ----                                                     | --                      |\n| `h1:not([id])`               | `//h1[not(@id)]`                                         | [?](#boolean-functions) |\n| Text match                   | `//button[text()=\"Submit\"]`                              | [?](#operators)         |\n| Text match (substring)       | `//button[contains(text(),\"Go\")]`                        |                         |\n| Arithmetic                   | `//product[@price > 2.50]`                               |                         |\n| Has children                 | `//ul[*]`                                                |                         |\n| Has children (specific)      | `//ul[li]`                                               |                         |\n| Or logic                     | `//a[@name or @href]`                                    | [?](#operators)         |\n| Union (joins results)        | `//a | //div`                                            | [?](#unions)            |\n{: .xp}\n\n<style>\n/* ensure tables align */\ntable.xp {table-layout: fixed;}\ntable.xp tr>:nth-child(1) {width: 35%;}\ntable.xp tr>:nth-child(2) {width: auto;}\ntable.xp tr>:nth-child(3) {width: 10%; text-align:right;}\n</style>\n","h2":"Selectors"},{"title":"Class check","elms":"\n```bash\n//div[contains(concat(' ',normalize-space(@class),' '),' foobar ')]\n```\n\nXpath doesn't have the \"check if part of space-separated list\" operator, so this is the workaround ([source](http://pivotallabs.com/xpath-css-class-matching/)).\n\nExpressions\n-----------\n","h2":"Selectors"},{"title":"Steps and axes","elms":"\n| `//` | `ul` | `/`  | `a[@id='link']` |\n| Axis | Step | Axis | Step            |\n{: .-css-breakdown}\n","h2":"Selectors"},{"title":"Prefixes","elms":"\n| Prefix | Example               | What     |\n| ---    | ---                   | ---      |\n| `//`   | `//hr[@class='edge']` | Anywhere |\n| `./`   | `./a`                 | Relative |\n| `/`    | `/html/body/div`      | Root     |\n{: .-headers}\n\nBegin your expression with any of these.\n","h2":"Selectors"},{"title":"Axes","elms":"\n| Axis | Example             | What       |\n| ---  | ---                 | ---        |\n| `/`  | `//ul/li/a`         | Child      |\n| `//` | `//[@id=\"list\"]//a` | Descendant |\n{: .-headers}\n\nSeparate your steps with `/`. Use two (`//`) if you don't want to select direct children.\n","h2":"Selectors"},{"title":"Steps","elms":"\n```bash\n//div\n//div[@name='box']\n//[@id='link']\n```\n\nA step may have an element name (`div`) and [predicates](#predicate) (`[...]`). Both are optional.\nThey can also be these other things:\n\n```bash\n//a/text()     #=> \"Go home\"\n//a/@href      #=> \"index.html\"\n//a/*          #=> All a's child elements\n```\n\nPredicates\n----------\n","h2":"Selectors"},{"title":"Predicates","elms":"\n```bash\n//div[true()]\n//div[@class=\"head\"]\n//div[@class=\"head\"][@id=\"top\"]\n```\n\nRestricts a nodeset only if some condition is true. They can be chained.\n","h2":"Selectors"},{"title":"Operators","elms":"\n```bash\n# Comparison\n//a[@id = \"xyz\"]\n//a[@id != \"xyz\"]\n//a[@price > 25]\n```\n\n```bash\n# Logic (and/or)\n//div[@id=\"head\" and position()=2]\n//div[(x and y) or not(z)]\n```\n\nUse comparison and logic operators to make conditionals.\n","h2":"Selectors"},{"title":"Using nodes","elms":"\n```bash\n# Use them inside functions\n//ul[count(li) > 2]\n//ul[count(li[@class='hide']) > 0]\n```\n\n```bash\n# This returns `<ul>` that has a `<li>` child\n//ul[li]\n```\n\nYou can use nodes inside predicates.\n","h2":"Selectors"},{"title":"Indexing","elms":"\n```bash\n//a[1]                  # first <a>\n//a[last()]             # last <a>\n//ol/li[2]              # second <li>\n//ol/li[position()=2]   # same as above\n//ol/li[position()>1]   # :not(:first-of-type)\n```\n\nUse `[]` with a number, or `last()` or `position()`.\n","h2":"Selectors"},{"title":"Chaining order","elms":"\n```bash\na[1][@href='/']\na[@href='/'][1]\n```\n\nOrder is significant, these two are different.\n","h2":"Selectors"},{"title":"Nesting predicates","elms":"\n```\n//section[.//h1[@id='hi']]\n```\n\nThis returns `<section>` if it has an `<h1>` descendant with `id='hi'`.\n\nFunctions\n---------\n","h2":"Selectors"},{"title":"Node functions","elms":"\n```bash\nname()                     # //[starts-with(name(), 'h')]\ntext()                     # //button[text()=\"Submit\"]\n                           # //button/text()\nlang(str)\nnamespace-uri()\n```\n\n```bash\ncount()                    # //table[count(tr)=1]\nposition()                 # //ol/li[position()=2]\n```\n","h2":"Selectors"},{"title":"Boolean functions","elms":"\n```bash\nnot(expr)                  # button[not(starts-with(text(),\"Submit\"))]\n```\n","h2":"Selectors"},{"title":"String functions","elms":"\n```bash\ncontains()                 # font[contains(@class,\"head\")]\nstarts-with()              # font[starts-with(@class,\"head\")]\nends-with()                # font[ends-with(@class,\"head\")]\n```\n\n```bash\nconcat(x,y)\nsubstring(str, start, len)\nsubstring-before(\"01/02\", \"/\")  #=> 01\nsubstring-after(\"01/02\", \"/\")   #=> 02\ntranslate()\nnormalize-space()\nstring-length()\n```\n","h2":"Selectors"},{"title":"Type conversion","elms":"\n```bash\nstring()\nnumber()\nboolean()\n```\n\nAxes\n----\n","h2":"Selectors"},{"title":"Using axes","elms":"\n```bash\n//ul/li                       # ul > li\n//ul/child::li                # ul > li (same)\n//ul/following-sibling::li    # ul ~ li\n//ul/descendant-or-self::li   # ul li\n//ul/ancestor-or-self::li     # $('ul').closest('li')\n```\n\nSteps of an expression are separated by `/`, usually used to pick child nodes. That's not always true: you can specify a different \"axis\" with `::`.\n\n| `//` | `ul` | `/child::` | `li` |\n| Axis | Step | Axis       | Step |\n{: .-css-breakdown}\n","h2":"Selectors"},{"title":"Child axis","elms":"\n```bash\n# both the same\n//ul/li/a\n//child::ul/child::li/child::a\n```\n\n`child::` is the default axis. This makes `//a/b/c` work.\n\n```bash\n# both the same\n# this works because `child::li` is truthy, so the predicate succeeds\n//ul[li]\n//ul[child::li]\n```\n\n```bash\n# both the same\n//ul[count(li) > 2]\n//ul[count(child::li) > 2]\n```\n","h2":"Selectors"},{"title":"Descendant-or-self axis","elms":"\n```bash\n# both the same\n//div//h4\n//div/descendant-or-self::h4\n```\n\n`//` is short for the `descendant-or-self::` axis.\n\n```bash\n# both the same\n//ul//[last()]\n//ul/descendant-or-self::[last()]\n```\n","h2":"Selectors"},{"title":"Other axes","elms":"\n| Axis                 | Abbrev | Notes                                            |\n| ---                  | ---    | ---                                              |\n| `ancestor`           |        |                                                  |\n| `ancestor-or-self`   |        |                                                  |\n| ---                  | ---    | ---                                              |\n| `attribute`          | `@`    | `@href` is short for `attribute::href`           |\n| `child`              |        | `div` is short for `child::div`                  |\n| `descendant`         |        |                                                  |\n| `descendant-or-self` | `//`   | `//` is short for `/descendant-or-self::node()/` |\n| `namespace`          |        |                                                  |\n| ---                  | ---    | ---                                              |\n| `self`               | `.`    | `.` is short for `self::node()`                  |\n| `parent`             | `..`   | `..` is short for `parent::node()`               |\n| ---                  | ---    | ---                                              |\n| `following`          |        |                                                  |\n| `following-sibling`  |        |                                                  |\n| `preceding`          |        |                                                  |\n| `preceding-sibling`  |        |                                                  |\n{: .-headers}\n\nThere are other axes you can use.\n","h2":"Selectors"},{"title":"Unions","elms":"\n```bash\n//a | //span\n```\n\nUse `|` to join two expressions.\n\nMore examples\n-------------\n","h2":"Selectors"},{"title":"Examples","elms":"\n```bash\n//*                 # all elements\ncount(//*)          # count all elements\n(//h1)[1]/text()    # text of the first h1 heading\n//li[span]          # find a <li> with an <span> inside it\n                    # ...expands to //li[child::span]\n//ul/li/..          # use .. to select a parent\n```\n","h2":"Selectors"},{"title":"Find a parent","elms":"\n```bash\n//section[h1[@id='section-name']]\n```\nFinds a `<section>` that directly contains `h1#section-name`\n\n```bash\n//section[//h1[@id='section-name']]\n```\n\nFinds a `<section>` that contains `h1#section-name`.\n(Same as above, but uses descendant-or-self instead of child)\n","h2":"Selectors"},{"title":"Closest","elms":"\n```bash\n./ancestor-or-self::[@class=\"box\"]\n```\n\nWorks like jQuery's `$().closest('.box')`.\n","h2":"Selectors"},{"title":"Attributes","elms":"\n```bash\n//item[@price > 2*@discount]\n```\n\nFinds `<item>` and check its attributes\n\nReferences\n----------\n{: .-one-column}\n\n* [Xpath test bed](http://www.whitebeam.org/library/guide/TechNotes/xpathtestbed.rhtm) _(whitebeam.org)_","h2":"Selectors"}]}