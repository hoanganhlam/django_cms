{"head":{"title":"Parsley.js","updated":"2018-12-06T00:00:00.000Z","weight":-1,"layout":"2017/sheet","category":"JavaScript libraries","keywords":["data-parsley-validate","$('#form').parsley()","errorClass","successClass","classHandler","errorsContainer","errorsWrapper","errorTemplate"],"intro":"[Parsley](http://parsleyjs.org/doc/) provides frontend form validation.\n"},"body":[{"title":null,"elms":"{: .-three-column}\n","h2":"Parsley"},{"title":"Installing via NPM","elms":"\n```\nnpm install --save parsleyjs\n```\n\n[parsleyjs](https://www.npmjs.com/package/parsleyjs) is the Parsley form validator. ('parsley' is a different package)\n","h2":"Parsley"},{"title":"Enabling","elms":"\n#### via HTML\n\n```html\n<form data-parsley-validate>\n<!-- ✗ not preferred -->\n```\n\n#### via JavaScript\n\n```js\n$('#form').parsley(/* options */)\n```\n\nIt's preferable to explicitly call `$.fn.parsley()`.\n","h2":"Parsley"},{"title":"API","elms":"\n#### Form\n\n```js\n$('#myform').parsley()\n  .isValid()  // → true | null\n  .validate()\n  .reset()\n  .destroy()\n```\n\n#### Input\n\n```js\n$('#myform input').parsley()\n  .isValid()\n  .validate() // returns errors\n```\n","h2":"Parsley"},{"title":"Validators","elms":"\n```html\n<input ...>\n```\n\n#### Required\n\n```html\n  required\n```\n\n#### Types\n\n```html\n  type='email'\n```\n\n```html\n  type='url'\n  data-parsley-type='url'\n```\n\n#### Length\n\n```html\n  maxlength='6'\n  data-parsley-maxlength='6'\n  minlength='10'\n  data-parsley-minlength='10'\n```\n\n#### Numeric\n\n```html\n  pattern='\\d+'\n  data-parsley-pattern='\\d+'\n```\n\n```html\n  type='number'\n  data-parsley-type='number'\n  data-parsley-type='integer'\n  data-parsley-type='digits'\n  data-parsley-type='alphanum'\n```\n\n#### Range\n\n```html\n  type='range'\n  data-parsley=range='[6, 10]'\n```\n\n```html\n  max='10'\n  data-parsley-max='10'\n  min='6'\n  data-parsley-min='6'\n```\n\n#### Checkboxes\n\n```html\n  data-parsley-mincheck='1'\n  data-parsley-maxcheck='3'\n  data-parsley-check='[1, 3]'\n```\n\n#### Confirmation\n\n```html\n  data-parsley-equalto='#confirm'\n```\n","h2":"Parsley"},{"title":"Form options","elms":"\n```js\n// Supported & excluded inputs by default\n  inputs: 'input, textarea, select'\n  excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]'\n```\n\n```js\n// Stop validating field on highest priority failing constraint\n  priorityEnabled: true\n```\n\nSee: [Options](http://parsleyjs.org/doc/annotated-source/defaults.html)\n","h2":"Options"},{"title":"Field options","elms":"\n```js\n// identifier used to group together inputs\n// (e.g. radio buttons…)\n  multiple: null\n```\n\n```js\n// identifier (or array of identifiers) used to\n// validate only a select group of inputs\n  group: null\n```\n\nThese options are only available for fields.\n","h2":"Options"},{"title":"UI Options","elms":"\n```js\n// Enable/disable error messages\n  uiEnabled: true\n```\n\n```js\n// Key events threshold before validation\n  validationThreshold: 3\n```\n\n```js\n// Focused field on form validation error. ‘first’|’last’|’none’\n  focus: 'first'\n```\n\n```js\n// $.Event() that will trigger validation. eg: keyup, change…\n  trigger: false\n```\n\n```js\n// Class that would be added on every failing validation\n// Parsley field\n  errorClass: 'parsley-error'\n  successClass: 'parsley-success'\n```\n\n```js\n// Return the $element that will receive these above\n// success or error classes. Could also be (and given\n// directly from DOM) a valid selector like '#div'\n  classHandler: function (ParsleyField) {}\n```\n\n```js\n// Return the $element where errors will be appended.\n// Could also be (and given directly from DOM) a valid\n// selector like '#div'\n  errorsContainer: function (ParsleyField) {}\n```\n\n```js\n// ul elem that would receive errors’ list\n  errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>'\n```\n\n```js\n// li elem that would receive error message\n  errorTemplate: '<li></li>'\n```\n","h2":"Options"},{"title":"Custom container","elms":"\n```js\n$('[data-parsley]').parsley({\n  errorsContainer (field) {\n    return field.$element.closest('.block, .control')\n  }\n})\n```\n\nAppends the error to the closest `.block` or `.control`.\n","h2":"Examples"},{"title":"Custom markup","elms":"\n```js\n$('[data-parsley]').parsley({\n  errorClass: '-error',\n  successClass: '-success',\n\n  errorsWrapper: '<ul class=\"parsley-error-list\"></ul>',\n  errorTemplate: '<li class=\"parsley-error\"></li>'\n})\n```\n\nUses custom markup.\n","h2":"Examples"},{"title":"Custom fields","elms":"\n```js\n$('[data-parsley]').parsley({\n  classHandler (field) {\n    const $parent = field.$element.closest('.input-group')\n    if ($parent.length) return $parent\n\n    return field.$element\n  }\n})\n```\n\nApplies the `errorClass` and `successClass` to the closest `.input-group`, if available.\n","h2":"Examples"},{"title":"Custom validator","elms":"\n#### HTML\n\n```html\n<input type='text' data-parsley-multiple-of='3' />\n```\n\n#### JavaScript\n\n```js\nwindow.Parsley\n  .addValidator('multipleOf', {\n    // string | number | integer | date | regexp | boolean\n    requirementType: 'integer',\n\n    // validateString | validateDate | validateMultiple\n    validateNumber (value, requirement) {\n      return 0 === value % requirement\n    },\n\n    messages: {\n      en: 'This value should be a multiple of %s'\n    }\n  })\n```\n\nSee: [Custom validators](http://parsleyjs.org/doc/index.html#custom)\n","h2":"Examples"},{"title":null,"elms":"\n- [Parsley documentation](http://parsleyjs.org/doc/) _(parsleyjs.org)_","h2":"Also see"}]}