{"head":{"title":"Underscore-string","category":"JavaScript libraries"},"body":[{"title":"Usage","elms":"\n    // Use it like so:\n    _.str.trim(\"hey\");\n    _s.trim(\"hey\");\n\n    // Unless you do:\n    _.mixin(_.string.exports());\n\n    // So you can:\n    _.trim(\"hey\");\n    _(\"hey\").trim();\n","h2":null},{"title":"Trimming","elms":"\n    _.truncate(\"Hello world\", 4) // => \"Hell...\"\n    _.prune(\"Hello world\", 5)    // => \"Hello...\"\n\n    _.trim(\" foo \")              // => \"foo\"\n    _.trim(\"-foo-\", '-')         // => \"foo\"\n    _.ltrim\n    _.rtrim\n","h2":null},{"title":"Numbers","elms":"\n    _.numberFormat(1000, 2)  // => \"1,000.00\"\n","h2":null},{"title":"Caps","elms":"\n    _.capitalize(\"foo bar\")       // => \"Foo Bar\"\n    _.humanize(\"hey-there foo\")   // => \"Hey there foo\"\n    _.titleize('My name is hi')   // => \"My Name Is Hi\"\n\n    _.dasherize('MozTransform')   // => \"-moz-transform\"\n    _.underscored('MozTransform') // => \"moz_transform\"\n    _.classify('-moz-transform')  // => \"MozTransform\"\n    _.camelize('moz_transform')   // => \"MozTransform\"\n\n    _.slugify(\"hey there\")        // => \"hey-there\"\n\n    _.swapCase(\"hELLO\")           // => \"Hello\"\n","h2":null},{"title":"Checks","elms":"\n    _.startsWith('image.gif', 'image') // => true\n    _.endsWith('image.gif', '.gif')    // => true\n    _.isBlank(\" \")                     // => true (also for \"\\n\", \"\")\n","h2":null},{"title":"HTML","elms":"\n    _.escapeHTML(\"<div>\")\n    _.unescapeHTML(\"&lt;div&gt;\")\n    _.stripTags(\"<div>hi</div>\")\n","h2":null},{"title":"Quote","elms":"\n    _.quote(\"hi\", '\"') // => '\"hi\"'\n    _.unquote('\"hi\"')  // => \"hi\"\n","h2":null},{"title":"Splits","elms":"\n    _.lines(\"hi\\nthere\")     // => [\"hi\",\"there\"]\n    _.words(\"hi  there you\") // => [\"hi\",\"there\",\"you\"]\n","h2":null},{"title":"Sprintf","elms":"\n    _.sprintf(\"%.1f\", 1.17)\n","h2":null},{"title":"Pad","elms":"\n    _.pad(\"1\", 8)               // => \"       1\"\n    _.pad(\"1\", 8, \"0\")          // => \"00000001\"\n    _.pad(\"1\", 8, \" \", \"right\") // => \"1       \"\n    _.pad(\"1\", 8, \" \", \"both\")  // => \"    1   \"\n\n    _.lpad(..)  // same as _.pad(.., 'left')\n    _.rpad(..)  // same as _.pad(.., 'right')\n    _.lrpad(..) // same as _.pad(.., 'both')\n","h2":null},{"title":"References","elms":"\n* https://github.com/epeli/underscore.string","h2":null}]}