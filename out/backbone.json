{"head":{"title":"Backbone.js","layout":"2017/sheet","updated":"2018-12-06T00:00:00.000Z","category":"JavaScript libraries"},"body":[{"title":"Binding events","elms":"\n```js\n.on('event', callback)\n.on('event', callback, context)\n```\n\n```js\n.on({\n  'event1': callback,\n  'event2': callback\n})\n```\n\n```js\n.on('all', callback)\n```\n\n```js\n.once('event', callback)   // Only happens once\n```\n","h2":null},{"title":"Unbinding events","elms":"\n```js\nobject.off('change', onChange)    // just the `onChange` callback\nobject.off('change')              // all 'change' callbacks\nobject.off(null, onChange)        // `onChange` callback for all events\nobject.off(null, null, context)   // all callbacks for `context` all events\nobject.off()                      // all\n```\n","h2":null},{"title":"Events","elms":"\n```js\nobject.trigger('event')\n```\n\n```js\nview.listenTo(object, event, callback)\nview.stopListening()\n```\n","h2":null},{"title":"List of events","elms":"\n  * Collection:\n    * `add` (model, collection, options)\n    * `remove` (model, collection, options)\n    * `reset` (collection, options)\n    * `sort` (collection, options)\n\n  * Model:\n    * `change` (model, options)\n    * `change:[attr]` (model, value, options)\n    * `destroy` (model, collection, options)\n    * `error` (model, xhr, options)\n\n  * Model and collection:\n    * `request` (model, xhr, options)\n    * `sync` (model, resp, options)\n\n  * Router:\n    * `route:[name]` (params)\n    * `route` (router, route, params)\n","h2":null},{"title":"Defining","elms":"\n```js\n// All attributes are optional\nvar View = Backbone.View.extend({\n  model: doc,\n```\n\n```js\n  tagName: 'div',\n  className: 'document-item',\n  id: \"document-\" + doc.id,\n  attributes: { href: '#' },\n```\n\n```js\n  el: 'body',\n```\n\n```js\n  events: {\n    'click button.save': 'save',\n    'click .cancel': function() { ··· },\n    'click': 'onclick'\n  },\n```\n\n```js\n  constructor: function() { ··· },\n  render: function() { ··· }\n})\n```","h2":"Views"},{"title":"Instantiating","elms":"\n```js\nview = new View()\nview = new View({ el: ··· })\n```\n","h2":"Views"},{"title":"Methods","elms":"\n```js\nview.$el.show()\nview.$('input')\n```\n\n```js\nview.remove()\n```\n\n```js\nview.delegateEvents()\nview.undelegateEvents()\n```\n","h2":"Views"},{"title":"Defining","elms":"\n```js\n// All attributes are optional\nvar Model = Backbone.Model.extend({\n  defaults: {\n    'author': 'unknown'\n  },\n  idAttribute: '_id',\n  parse: function() { ··· }\n})\n```\n","h2":"Models"},{"title":"Instantiating","elms":"\n```js\nvar obj = new Model({ title: 'Lolita', author: 'Nabokov' })\n```\n\n```js\nvar obj = new Model({ collection: ··· })\n```\n","h2":"Models"},{"title":"Methods","elms":"\n```js\nobj.id\nobj.cid   // → 'c38' (client-side ID)\n```\n\n```js\nobj.clone()\n```\n\n```js\nobj.hasChanged('title')\nobj.changedAttributes()  // false, or hash\nobj.previousAttributes() // false, or hash\nobj.previous('title')\n```\n\n```js\nobj.isNew()\n```\n\n```js\nobj.set({ title: 'A Study in Pink' })\nobj.set({ title: 'A Study in Pink' }, { validate: true, silent: true })\nobj.unset('title')\n```\n\n```js\nobj.get('title')\nobj.has('title')\nobj.escape('title')     /* Like .get() but HTML-escaped */\n```\n\n```js\nobj.clear()\nobj.clear({ silent: true })\n```\n\n```js\nobj.save()\nobj.save({ attributes })\nobj.save(null, {\n  silent: true, patch: true, wait: true,\n  success: callback, error: callback\n})\n```\n\n```js\nobj.destroy()\nobj.destroy({\n  wait: true,\n  success: callback, error: callback\n})\n```\n\n```js\nobj.toJSON()\n```\n\n```js\nobj.fetch()\nobj.fetch({ success: callback, error: callback })\n```\n","h2":"Models"},{"title":"Validation","elms":"\n```js\nvar Model = Backbone.Model.extend({\n  validate: function(attrs, options) {\n    if (attrs.end < attrs.start) {\n      return \"Can't end before it starts\"\n    }\n  }\n})\n```\n{: data-line=\"2\"}\n\n```js\nobj.validationError  //=> \"Can't end before it starts\"\nobj.isValid()\nobj.on('invalid', function (model, error) { ··· })\n```\n\n```js\n// Triggered on:\nobj.save()\nobj.set({ ··· }, { validate: true })\n```\n","h2":"Models"},{"title":"Custom URLs","elms":"\n```js\nvar Model = Backbone.Model.extend({\n  // Single URL (string or function)\n  url: '/account',\n  url: function() { return '/account' },\n```\n\n```js\n  // Both of these two work the same way\n  url: function() { return '/books/' + this.id }),\n  urlRoot: '/books'\n})\n```\n\n```js\nvar obj = new Model({ url: ··· })\nvar obj = new Model({ urlRoot: ··· })\n```\n","h2":"Models"},{"title":null,"elms":"{: .-one-column}\n\n- [Backbone website](http://backbonejs.org/) _(backbonejs.org)_\n- [Backbone patterns](http://ricostacruz.com/backbone-patterns/) _(ricostacruz.com)_","h2":"References"}]}