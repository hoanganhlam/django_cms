{"head":{"title":"Arel","category":"Rails"},"body":[{"title":"Tables","elms":"\n```rb\nusers = Arel::Table.new(:users)\nusers = User.arel_table  # ActiveRecord model\n```\n","h2":null},{"title":"Fields","elms":"\n```rb\nusers[:name]\nusers[:id]\n```\n","h2":null},{"title":"`where` (restriction)","elms":"\n```rb\nusers.where(users[:name].eq('amy'))\n# SELECT * FROM users WHERE users.name = 'amy'\n```\n","h2":null},{"title":"`select` (projection)","elms":"\n```rb\nusers.project(users[:id])\n# SELECT users.id FROM users\n```\n","h2":null},{"title":"`join`","elms":"#### basic join\nIn ActiveRecord (without Arel), if `:photos` is the name of the association, use `joins`\n```rb\nusers.joins(:photos)\n```\n\nIn Arel, if `photos` is defined as the Arel table,\n```rb\nphotos = Photo.arel_table\nusers.join(photos) \nusers.join(photos, Arel::Nodes::OuterJoin).on(users[:id].eq(photos[:user_id]))\n```\n\n#### join with conditions\n```rb\nusers.joins(:photos).merge(Photo.where(published: true))\n```\n\nIf the simpler version doesn't help and you want to add more SQL statements to it:\n```rb\nusers.join(\n   users.join(photos, Arel::Nodes::OuterJoin)\n   .on(photos[:user_id].eq(users[:id]).and(photos[:published].eq(true)))\n)\n```\n\n#### advanced join\nmultiple `joins` with the same table but different meanings and/or conditions\n```rb\ncreators = User.arel_table.alias('creators')\nupdaters = User.arel_table.alias('updaters')\nphotos = Photo.arel_table\n\nphotos_with_credits = photos\n.join(photos.join(creators, Arel::Nodes::OuterJoin).on(photos[:created_by_id].eq(creators[:id])))\n.join(photos.join(updaters, Arel::Nodes::OuterJoin).on(photos[:assigned_id].eq(updaters[:id])))\n.project(photos[:name], photos[:created_at], creators[:name].as('creator'), updaters[:name].as('editor'))\n\nphotos_with_credits.to_sql\n# => \"SELECT `photos`.`name`, `photos`.`created_at`, `creators`.`name` AS creator, `updaters`.`name` AS editor FROM `photos` INNER JOIN (SELECT FROM `photos` LEFT OUTER JOIN `users` `creators` ON `photos`.`created_by_id` = `creators`.`id`) INNER JOIN (SELECT FROM `photos` LEFT OUTER JOIN `users` `updaters` ON `photos`.`updated_by_id` = `updaters`.`id`)\"\n\n# after the request is done, you can use the attributes you named\n# it's as if every Photo record you got has \"creator\" and \"editor\" fields, containing creator name and editor name\nphotos_with_credits.map{|x|\n  \"#{photo.name} - copyright #{photo.created_at.year} #{photo.creator}, edited by #{photo.editor}\"\n}.join('; ')\n```\n","h2":null},{"title":"`limit` / `offset`","elms":"\n```rb\nusers.take(5) # => SELECT * FROM users LIMIT 5\nusers.skip(4) # => SELECT * FROM users OFFSET 4\n```\n","h2":null},{"title":"Aggregates","elms":"\n```rb\nusers.project(users[:age].sum) # .average .minimum .maximum\nusers.project(users[:id].count)\nusers.project(users[:id].count.as('user_count'))\n```\n","h2":null},{"title":"`order`","elms":"\n```rb\nusers.order(users[:name])\nusers.order(users[:name], users[:age].desc)\nusers.reorder(users[:age])\n```\n","h2":null},{"title":"With ActiveRecord","elms":"\n```rb\nUser.arel_table\nUser.where(id: 1).arel\n```\n","h2":null},{"title":"Clean code with arel","elms":"\nMost of the clever stuff should be in scopes, e.g. the code above could become:\n```rb\nphotos_with_credits = Photo.with_creator.with_editor\n```\n\nYou can store requests in variables then add SQL segments:\n```rb\nall_time      = photos_with_credits.count\nthis_month    = photos_with_credits.where(photos[:created_at].gteq(Date.today.beginning_of_month))\nrecent_photos = photos_with_credits.where(photos[:created_at].gteq(Date.today.beginning_of_month)).limit(5)\n```\n","h2":null},{"title":null,"elms":"\n* <http://github.com/rails/arel>","h2":"Reference"}]}