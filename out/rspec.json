{"head":{"title":"RSpec","category":"Ruby"},"body":[{"title":"Invoking tests","elms":"\n```sh\nrake -T spec      # List spec tasks\n\nrake spec         # Run all\n\nrake spec/models/mymodel_spec.rb\nrake spec/models/mymodel_spec.rb:27\n```\n","h2":null},{"title":null,"elms":"\n```rb\ndescribe \"A User (in general)\" do\n  include UserSpecHelper\n\n  subject { Person.new }\n\n  let(:admin) { Person.new(role: :admin) }\n\n  context \"setter methods\" do\n    it \"should do this\" do\n      pending \"some other thing\"\n\n      expect(subject.name).to eq 'x'\n    end\n  end\nend\n```\n","h2":"Writing tests"},{"title":"Before/after","elms":"\n```rb\nbefore :each do\n  # before all tests\nend\n\nbefore do\n  # before this suite\nend\n\nafter do\n  # after this suite\nend\n```\n","h2":"Writing tests"},{"title":"Subjects","elms":"\n```rb\nsubject { CheckingAccount.new }\nit { is_expected.to be_empty }\n\n# also names: subject(:account) { ... }\n```\n","h2":"Writing tests"},{"title":null,"elms":"\n```rb\ntarget.should eq 1\ntarget.should_not eq 1\n\nexpect(target).to eq 1\nexpect(target).not_to eq 1\n```\n","h2":"Expectations"},{"title":"Numeric","elms":"\n```rb\nexpect(5).to be < 6\nexpect(5).to == 5\nexpect(5).to equal value\nexpect(5).to be_between(1, 10)\nexpect(5).to be_within(0.05).of value\n```\n","h2":"Expectations"},{"title":"Comparison","elms":"\n```rb\nexpect(x).to be value\nexpect(x).to satisfy { |arg| ... }\nexpect(x).to match /regexp/\n```\n","h2":"Expectations"},{"title":"Predicate","elms":"\n```rb\nexpect(x).to be_zero    # FixNum#zero?\nexpect(x).to be_empty   # Array#empty?\nexpect(x).to have_key   # Hash#has_key?\n```\n","h2":"Expectations"},{"title":"Objects","elms":"\n```rb\nexpect(obj).to be_an_instance_of MyClass\nexpect(obj).to be_a_kind_of MyClass\nexpect(obj).to respond_to :save!\n```\n","h2":"Expectations"},{"title":"Control flow","elms":"\n```rb\nexpect { user.save! }.to raise_error\nexpect { user.save! }.to raise_error(ExceptionName, /msg/)\nexpect { user.save! }.to throw :symbol\n```\n","h2":"Expectations"},{"title":"Enumerables/arrays","elms":"\n```rb\nexpect(list).to include(<object>)\n\nexpect(list).to have(1).things\nexpect(list).to have_at_least(2).things\nexpect(list).to have_at_most(3).things\n\nexpect(list).to have(2).errors_on(:field)\n```\n","h2":"Expectations"},{"title":"Change","elms":"\n```rb\nexpect { thing.approve! }.to \\\n  change(thing, :status)\n  .from(Status::AWAITING_APPROVAL)\n  .to(Status::APPROVED)\n\nexpect { thing.destroy }.to \\\n  change(Thing, :count)\n  .by(-1)\n```\n","h2":"Expectations"},{"title":null,"elms":"\n```rb\nbook = double('book')\nbook = instance_double('Book', pages: 250)\n```\n","h2":"Doubles"},{"title":"Method stubs","elms":"\n```rb\nallow(die).to receive(:roll)\nallow(die).to receive(:roll) { 3 }\nallow_any_instance_of(Die).to receive(:roll)\n\nexpect(die).to receive(:roll)\n  .with(1)\n  .with(1, true)\n  .with(boolean)\n  .with(anything)\n  .with(any_args)\n  .with(1, any_args)\n  .with(no_args)\n  .with(hash_including(a: 1))\n  .with(hash_excluding(a: 1))\n  .with(array_including(:a, :b))\n  .with(array_excluding(:a, :b))\n  .with(instance_of(Fixnum))\n  .with(kind_of(Numeric))\n  .with(<matcher>)\n\n  .once\n  .twice\n  .exactly(n).times\n  .at_least(:once)\n  .at_least(:twice)\n  .at_least(n).times\n  .at_most(:once)\n  .at_most(:twice)\n  .at_most(n).times\n```\n\nhttps://relishapp.com/rspec/rspec-mocks/docs\n","h2":"Doubles"},{"title":null,"elms":"\n```rb\nmodule UserSpecHelper\n  def valid_user_attributes\n    { :email => \"joe@bloggs.com\",\n      :username => \"joebloggs\",\n      :password => \"abcdefg\"}\n  end\nend\n```\n\n```rb\ndescribe User do\n  include UserSpecHelper\n\n  ...\nend\n```","h2":"Spec helpers"}]}