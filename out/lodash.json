{"head":{"title":"Lodash","category":"JavaScript libraries","layout":"2017/sheet","weight":-3,"updated":"2020-06-24T00:00:00.000Z","description":"This is not a complete list.\n"},"body":[{"title":"Finding","elms":"\n```js\n_.filter(list, (n) => n % 2)    // → Array\n_.find(list, (n) => n % 2)      // → item\n_.findLast(list, ...)           // → item\n```\n\nWorks for both arrays and objects.\n","h2":"Collections"},{"title":"Accessing","elms":"\n```js\n_.at([ abcd ], 0)               // → [ a ] - same as list[0]\n_.at([ abcd ], [ 0, 1 ])        // → [ ab ]\n```\n","h2":"Collections"},{"title":"Set/get","elms":"\n```js\n_.set(object, 'users[0].name', value)\n_.get(object, 'users[0].name')\n_.get(object, ['users', 0, 'name'])\n```\n","h2":"Collections"},{"title":"Iteration","elms":"\n```js\n_.forEach(list, (item, i) => ...)\n_.forEachRight(list, ...)\n\n_.map(list, ...)\n```\n\n```js\n_.every(users, (u) => u.active)  // → true|false (aka _.all)\n_.any(users, ...)                // → true|false (aka _.some)\n```\n","h2":"Collections"},{"title":"Arrays","elms":"\n```js\n_.chunk([ abcd ], 2)           // → [ [ab], [cd] ]\n_.compact(list)\n\n_.fill(Array(4), 'x')          // → [ 'x', 'x', 'x', 'x' ]\n_.flatten\n_.flattenDeep\n```\n","h2":"Array"},{"title":"Filtering","elms":"\n```js\n_.drop([ abcdef ], 2)          // → [   cdef ]\n_.dropRight([ abcdef ], 2)     // → [ abcd   ]\n_.take([ abcdef ], 2)          // → [ ab     ]\n_.takeRight([ abcdef ], 2)     // → [     de ]\n_.slice([ abcdef ], 2, 4)      // → [   cd   ]\n```\n\n```js\n_.initial([ abcdef ])          // → [ abcde  ] - dropRight(list, 1)\n_.rest([ abcdef ])             // → [  bcdef ] - takeRight(list, 1)\n```\n\n```js\n_.dropWhile(list, 'active')            // works like filter\n_.dropWhile(list, 'active', true)\n_.dropWhile(list, { active: true })\n_.dropWhile(list, (n) => ...)\n_.dropRightWhile(list, ...)\n```\n\n```js\n_.without([ abcde ], b)        // → [ acde ]\n```\n\n```js\n_.remove(list, (n) => n % 2)\n```\n","h2":"Array"},{"title":"Accessing","elms":"\n```js\n_.first([ abcdef ])            // → a\n_.last([ abcdef ])             // → f\n```\n","h2":"Array"},{"title":"Sets","elms":"\n```js\n_.uniq()\n_.difference([ abc ], [ bc ])       // → [ a    ]\n_.intersection([ abc ], [ bcd ])    // → [  bc  ]\n_.union([ abc ], [ bcd ])           // → [ abcd ] (unique)\n```\n\n```js\nArray#concat()\n```\n","h2":"Array"},{"title":"Indexes","elms":"\n```js\n_.findIndex(list, fn)\n_.findLastIndex(list, fn)\n```\n\n```js\n_.sortedIndex(list, val)\n_.sortedLastIndex(list, val)\n```\n\n```js\n_.indexOf(list, val)\n```\n","h2":"Array"},{"title":"Currying","elms":"\n```js\ngreet = (greeting, name) => `${greeting}, ${name}!`\n```\n{: .-setup}\n\n```js\nfn = _.partial(fn, 'hi')\nfn('joe')    // → 'hi, joe!'\n\nfn = _.partial(fn, 'joe')\nfn('yo')     // → 'yo, joe!'\n```\n\n```js\n_.curry(greet)('hi')         // → function(name)\n_.curryRight(greet)('joe')   // → function(greet)\n```\n","h2":"Functions"},{"title":"Throttling","elms":"\n```js\n_.throttle(fn)\n_.debounce(fn)\n```\n","h2":"Decorating functions"},{"title":"Limiting","elms":"\n```js\n_.before(5, fn)         // only works 5 times\n_.after(5, fn)          // works only after 5 times\n_.once(fn)              // like _.before(fn, 1)\n```\n","h2":"Decorating functions"},{"title":"Etc","elms":"\n```js\n_.wrap(_.escape, (name) => `hi ${name}`)\n// same as doing `name = _.escape(name)`\n\n_.delay(fn, 2000)\n\n_.negate(fn)\n\n_.memoize(fn)\n_.memoize(fn, ...)\n```\n","h2":"Decorating functions"},{"title":"Capitalization","elms":"\n```js\n_.capitalize('hello world')   // → 'Hello world'\n_.startCase('hello_world')    // → 'Hello World'\n_.snakeCase('hello world')    // → 'hello_world'\n_.kebabCase('hello world')    // → 'hello-world'\n_.camelCase('hello world')    // → 'helloWorld'\n```\n","h2":"Strings"},{"title":"Padding","elms":"\n```js\n_.pad('abc', 3)           // → 'abc'\n_.pad('abc', 8)           // → '   abc  '\n_.pad('abc', 8, '_-')     // → '_-abc_-_'\n_.padStart('abc', 3)      // → 'abc'\n_.padStart('abc', 6)      // → '   abc'\n_.padStart('abc', 6, '_-')// → '_-_abc'\n_.padEnd('abc', 3)        // → 'abc'\n_.padEnd('abc', 6)        // → 'abc   '\n_.padEnd('abc', 6, '_-')  // → 'abc_-_'\n```\n","h2":"Strings"},{"title":"Trim","elms":"\n```js\n_.trim('  str  ')         // → 'str' \n_.trimLeft('  str  ')     // → 'str  '\n_.trimRight('  str  ')    // → '  str'\n```\n","h2":"Strings"},{"title":"Etc","elms":"\n```js\n_.repeat('-', 2)              // → '--'\n_.deburr('déjà vu')           // → 'deja vu'\n_.trunc('hello world', 5)     // → 'hello...'\n```\n\n```js\n_.startsWith('abc', 'a')   // → true\n_.endsWith('abc', 'c')     // → true\n```\n","h2":"Strings"},{"title":"Keys and values","elms":"\n```js\n_.keys(obj)\n_.values(obj)\n```\n","h2":"Objects"},{"title":"Chain and value","elms":"\n```js\n_([1, 2, 3])\n  .reduce((total, n) => total + n)\n  .map((n) => n * n)\n  .tap(console.log)\n  .thru((n) => n.reverse())\n  .value()\n```","h2":"Chaining"}]}