{"head":{"title":"Kotlin","layout":"2017/sheet","updated":"2018-12-06T00:00:00.000Z","category":"Java & JVM","prism_languages":["kotlin"],"intro":"[Kotlin](http://kotlinlang.org/) is a statically typed programming language for modern multiplatform applications.\n"},"body":[{"title":"Mutability","elms":"\n```kotlin\nvar mutableString: String = \"Adam\"\nval immutableString: String = \"Adam\"\nval inferredString = \"Adam\"\n```\n","h2":null},{"title":"Strings","elms":"\n```kotlin\nval name = \"Adam\"\nval greeting = \"Hello, \" + name\nval greetingTemplate = \"Hello, $name\"\nval interpolated = \"Hello, ${name.toUpperCase()}\"\n```\n","h2":null},{"title":"Numbers","elms":"\n```kotlin\nval intNum = 10\nval doubleNum = 10.0\nval longNum = 10L\nval floatNum = 10.0F\n```\n","h2":null},{"title":"Booleans","elms":"\n```kotlin\nval trueBoolean = true\nval falseBoolean = false\nval andCondition = trueBoolean && falseBoolean\nval orCondition = trueBoolean || falseBoolean\n```\n","h2":null},{"title":"Static Fields","elms":"\n```kotlin\nclass Person {\n    companion object {\n        val NAME_KEY = \"name_key\"\n    }\n}\n\nval key = Person.NAME_KEY\n```\n\nNull Safety\n-----------\n{: .-two-column}\n","h2":null},{"title":"Nullable properties","elms":"\n```kotlin\nval cannotBeNull: String = null // Invalid\nval canBeNull: String? = null // Valid\n\nval cannotBeNull: Int = null // Invalid\nval canBeNull: Int? = null // Valid\n```\n","h2":null},{"title":"Checking for null","elms":"\n```kotlin\nval name: String? = \"Adam\"\n\nif (name != null && name.length > 0) {\n    print(\"String length is ${name.length}\")\n} else {\n    print(\"String is empty.\")\n}\n```\n","h2":null},{"title":"Safe Operator","elms":"\n```kotlin\nval nullableStringLength: Int? = nullableString?.length\nval nullableDepartmentHead: String? = person?.department?.head?.name\n```\n","h2":null},{"title":"Elvis Operator","elms":"\n```kotlin\nval nonNullStringLength: Int = nullableString?.length ?: 0\nval nonNullDepartmentHead: String = person?.department?.head?.name ?: \"\"\nval nonNullDepartmentHead: String = person?.department?.head?.name.orEmpty()\n```\n","h2":null},{"title":"Safe Casts","elms":"```kotlin\n// Will not throw ClassCastException\nval nullableCar: Car? = (input as? Car)\n```\n\nCollections\n-----------\n{: .-two-column}\n","h2":null},{"title":"Creation","elms":"\n```kotlin\nval numArray = arrayOf(1, 2, 3)\nval numList = listOf(1, 2, 3)\nval mutableNumList = mutableListOf(1, 2, 3)\n```\n","h2":null},{"title":"Accessing","elms":"\n```kotlin\nval firstItem = numList[0]\nval firstItem = numList.first()\nval firstItem = numList.firstOrNull()\n```\n","h2":null},{"title":"Maps","elms":"\n```kotlin\nval faceCards = mutableMapOf(\"Jack\" to 11, \"Queen\" to 12, \"King\" to 13)\nval jackValue = faceCards[\"Jack\"] // 11\nfaceCards[\"Ace\"] = 1\n```\n","h2":null},{"title":"Mutability","elms":"\n```kotlin\nval immutableList = listOf(1, 2, 3)\nval mutableList = immutableList.toMutableList()\n\nval immutableMap = mapOf(\"Jack\" to 11, \"Queen\" to 12, \"King\" to 13)\nval mutableMap = immutableMap.toMutableMap()\n```\n","h2":null},{"title":"Iterating","elms":"\n```kotlin\nfor (item in myList) {\n    print(item)\n}\n\nmyList.forEach {\n    print(it)\n}\n\nmyList.forEachIndexed { index, item -> \n    print(\"Item at $index is: $item\")\n}\n```\n","h2":null},{"title":"Filtering & Searching","elms":"\n```kotlin\nval evenNumbers = numList.filter { it % 2 == 0 }\nval containsEven = numList.any { it % 2 == 0 }\nval containsNoEvens = numList.none { it % 2 == 0 }\nval containsNoEvens = numList.all { it % 2 == 1 }\nval firstEvenNumber: Int = numList.first { it % 2 == 0 }\nval firstEvenOrNull: Int? = numList.firstOrNull { it % 2 == 0 }\n```\n\nNote: `it` is the [implicit name for a single parameter](https://kotlinlang.org/docs/reference/lambdas.html#it-implicit-name-of-a-single-parameter).\n\nFunctions\n---------\n{: .-two-column}\n","h2":null},{"title":"Parameters & Return Types","elms":"\n```kotlin\nfun printName() {\n    print(\"Adam\")\n}\n\nfun printName(person: Person) {\n    print(person.name)\n}\n\nfun getGreeting(person: Person): String {\n    return \"Hello, ${person.name}\"\n}\n\nfun getGreeting(person: Person): String = \"Hello, ${person.name}\"\nfun getGreeting(person: Person) = \"Hello, ${person.name}\"\n```\n","h2":null},{"title":"Higher Order Functions","elms":"\n```kotlin\nfun callbackIfTrue(condition: Boolean, callback: () -> Unit) {\n    if (condition) {\n        callback()\n    }\n}\n\ncallbackIfTrue(someBoolean) {\n    print(\"Condition was true\")\n}\n```\n","h2":null},{"title":"Extension Functions","elms":"\n```kotlin\nfun Int.timesTwo(): Int {\n    return this * 2\n}\n\nval four = 2.timesTwo()\n```\n","h2":null},{"title":"Default Parameters","elms":"\n```kotlin\nfun getGreeting(person: Person, intro: String = \"Hello,\") {\n    return \"$intro ${person.name}\"\n}\n\n// Returns \"Hello, Adam\"\nval hello = getGreeting(Person(\"Adam\"))\n\n// Returns \"Welcome, Adam\"\nval welcome = getGreeting(Person(\"Adam\"), \"Welcome,\")\n```\n","h2":null},{"title":"Named Parameters","elms":"\n```kotlin\nclass Person(val name: String = \"\", age: Int = 0)\n\n// All valid\nval person = Person()\nval person = Person(\"Adam\", 100)\nval person = Person(name = \"Adam\", age = 100)\nval person = Person(age = 100)\nval person = Person(age = 100, name = \"Adam\")\n```\n","h2":null},{"title":"Static Functions","elms":"\n```kotlin\nclass Fragment(val args: Bundle) {\n    companion object {\n        fun newInstance(args: Bundle): Fragment {\n            return Fragment(args)\n        }\n    }\n}\n\nval fragment = Fragment.newInstance(args)\n```\n\n* [Companion Objects](https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects)\n\nClasses\n-------\n{: .-two-column}\n","h2":null},{"title":"Primary Constructor","elms":"\n```kotlin\nclass Person(val name: String, val age: Int)\nval adam = Person(\"Adam\", 100)\n```\n","h2":null},{"title":"Secondary Constructors","elms":"\n```kotlin\nclass Person(val name: String) {\n    private var age: Int? = null\n\n    constructor(name: String, age: Int) : this(name) {\n        this.age = age\n    }\n}\n\n// Above can be replaced with default params\nclass Person(val name: String, val age: Int? = null)\n```\n","h2":null},{"title":"Inheritance & Implementation","elms":"\n```kotlin\nopen class Vehicle\nclass Car : Vehicle()\n\ninterface Runner {\n    fun run()\n}\n\nclass Machine : Runner {\n    override fun run() {\n        // ...\n    }\n}\n```\n\nControl Flow\n------------\n{: .-two-column}\n","h2":null},{"title":"If Statements","elms":"\n```kotlin\nif (someBoolean) {\n    doThing()\n} else {\n    doOtherThing()\n}\n```\n","h2":null},{"title":"For Loops","elms":"\n```kotlin\nfor (i in 0..10) { } // 1 - 10\nfor (i in 0 until 10) // 1 - 9\n(0..10).forEach { }\nfor (i in 0 until 10 step 2) // 0, 2, 4, 6, 8\n```\n","h2":null},{"title":"When Statements","elms":"\n```kotlin\nwhen (direction) {\n    NORTH -> {\n        print(\"North\")\n    }\n    SOUTH -> print(\"South\")\n    EAST, WEST -> print(\"East or West\")\n    \"N/A\" -> print(\"Unavailable\")\n    else -> print(\"Invalid Direction\")\n}\n```\n","h2":null},{"title":"While Loops","elms":"\n```kotlin\nwhile (x > 0) {\n    x--\n}\n\ndo {\n    x--\n} while (x > 0)\n```\n\nDestructuring Declarations\n--------------------------\n{: .-two-column}\n","h2":null},{"title":"Objects & Lists","elms":"\n```kotlin\nval person = Person(\"Adam\", 100)\nval (name, age) = person\n\nval pair = Pair(1, 2)\nval (first, second) = pair\n\nval coordinates = arrayOf(1, 2, 3)\nval (x, y, z) = coordinates\n```\n","h2":null},{"title":"ComponentN Functions","elms":"\n```kotlin\nclass Person(val name: String, val age: Int) {\n\toperator fun component1(): String {\n\t\treturn name\n\t}\n\n\toperator fun component2(): Int {\n\t\treturn age\n\t}\n}\n```\n\nReferences\n----------\n{: .-one-column}\n\n* [Defining Variables](https://kotlinlang.org/docs/reference/basic-syntax.html#defining-variables) _(kotlinlang.org)_\n* [Strings Documentation](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html) _(kotlinlang.org)_\n* [String Templates](https://kotlinlang.org/docs/reference/basic-types.html#string-templates) _(kotlinlang.org)_\n* [Basic Types](https://kotlinlang.org/docs/reference/basic-types.html) _(kotlinlang.org)_\n* [Companion Objects](https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects) _(kotlinlang.org)_\n* [Null Safety](https://kotlinlang.org/docs/reference/null-safety.html) _(kotlinlang.org)_\n* [Collections Overview](https://kotlinlang.org/docs/reference/collections.html) _(kotlinlang.org)_\n* [Collections Documentation](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html) _(kotlinlang.org)_\n* [Functions Documentation](https://kotlinlang.org/docs/reference/functions.html) _(kotlinlang.org)_\n* [Classes Documentation](https://kotlinlang.org/docs/reference/classes.html) _(kotlinlang.org)_\n* [Destructuring Declarations](https://kotlinlang.org/docs/reference/multi-declarations.html) _(kotlinlang.org)_","h2":null}]}