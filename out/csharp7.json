{"head":{"title":"C# 7","category":"C-like","updated":"2018-12-06T00:00:00.000Z","layout":"2017/sheet","prism_languages":["csharp"],"description":"A quick overview of C# 7\n"},"body":[{"title":"Out Variables","elms":"\n```csharp\npublic void PrintCoordinates(Point p)\n{\n    p.GetCoordinates(out int x, out int y);\n    WriteLine($\"({x}, {y})\");\n}\n```\n\n`out` is used to declare a variable at the point where it is passed as an argument.\n","h2":null},{"title":"Pattern Matching","elms":"\n#### Is-expressions with patterns\n\n```csharp\npublic void PrintStars(object o)\n{\n    if (o is null) return;     // constant pattern \"null\"\n    if (!(o is int i)) return; // type pattern \"int i\"\n    WriteLine(new string('*', i));\n}\n```\n\n#### Switch statements with patterns\n\n```csharp\nswitch(shape)\n{\n    case Circle c:\n        WriteLine($\"circle with radius {c.Radius}\");\n        break;\n    case Rectangle s when (s.Length == s.Height):\n        WriteLine($\"{s.Length} x {s.Height} square\");\n        break;\n    case Rectangle r:\n        WriteLine($\"{r.Length} x {r.Height} rectangle\");\n        break;\n    default:\n        WriteLine(\"<unknown shape>\");\n        break;\n    case null:\n        throw new ArgumentNullException(nameof(shape));\n}\n```\n","h2":null},{"title":"Tuples","elms":"\n#### Tuple type\n\n```csharp\n(string, string, string) LookupName(long id) // tuple return type\n{\n    ... // retrieve first, middle and last from data storage\n    return (first, middle, last); // tuple literal\n}\n```\n\n```csharp\nvar names = LookupName(id);\nWriteLine($\"found {names.Item1} {names.Item3}.\");\n```\n\n#### Tuple elements with name\n\n```csharp\n(string first, string middle, string last) LookupName(long id) // tuple elements have names\n```\n\n```csharp\nvar names = LookupName(id);\nWriteLine($\"found {names.first} {names.last}.\");\n```\n\n#### Tuple Literals\n\n```csharp\n   return (first: first, middle: middle, last: last); // named tuple elements in a literal\n```\n\n#### Tuple Deconstruction\n\n```csharp\n(var first, var middle, var last) = LookupName(id1);\nWriteLine($\"found {first} {last}.\");\n```\nor\n```csharp\nvar (first, middle, last) = LookupName(id1); // var outside\n```\nor\n```csharp\n(first, middle, last) = LookupName(id2); // assign onto existing variables\n```\n\n","h2":null},{"title":"Local Functions","elms":"\n```csharp\npublic int Fibonacci(int x)\n{\n    if (x < 0) throw new ArgumentException(\"Less negativity please!\", nameof(x));\n    return Fib(x).current;\n\n    (int current, int previous) Fib(int i)\n    {\n        if (i == 0) return (1, 0);\n        var (p, pp) = Fib(i - 1);\n        return (p + pp, p);\n    }\n}\n```\n","h2":null},{"title":"Literal Improvements","elms":"\n#### Digit Separator inside numbers literals\n\n```csharp\nvar d = 123_456;\nvar x = 0xAB_CD_EF;\n```\n\n#### Binary Literals\n\n```csharp\nvar b = 0b1010_1011_1100_1101_1110_1111;\n```\n","h2":null},{"title":"Ref Returns and Locals","elms":"\n```csharp\npublic ref int Find(int number, int[] numbers)\n{\n    for (int i = 0; i < numbers.Length; i++)\n    {\n        if (numbers[i] == number) \n        {\n            return ref numbers[i]; // return the storage location, not the value\n        }\n    }\n    throw new IndexOutOfRangeException($\"{nameof(number)} not found\");\n}\n\nint[] array = { 1, 15, -39, 0, 7, 14, -12 };\nref int place = ref Find(7, array); // aliases 7's place in the array\nplace = 9; // replaces 7 with 9 in the array\nWriteLine(array[4]); // prints 9\n```\n","h2":null},{"title":"More Expression Bodied Members","elms":"\nC# 7.0 adds accessors, constructors and finalizers to the list of things that can have expression bodies:\n\n```csharp\nclass Person\n{\n    private static ConcurrentDictionary<int, string> names = new ConcurrentDictionary<int, string>();\n    private int id = GetId();\n\n    public Person(string name) => names.TryAdd(id, name); // constructors\n    ~Person() => names.TryRemove(id, out *);              // destructors\n    public string Name\n    {\n        get => names[id];                                 // getters\n        set => names[id] = value;                         // setters\n    }\n}\n```\n","h2":null},{"title":"Throw Expressions ","elms":"\n```csharp\nclass Person\n{\n    public string Name { get; }\n    public Person(string name) => Name = name ?? throw new ArgumentNullException(name);\n    public string GetFirstName()\n    {\n        var parts = Name.Split(\" \");\n        return (parts.Length > 0) ? parts[0] : throw new InvalidOperationException(\"No name!\");\n    }\n    public string GetLastName() => throw new NotImplementedException();\n}\n```","h2":null}]}