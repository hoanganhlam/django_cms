{"head":{"title":"Chai.js","category":"JavaScript libraries","layout":"2017/sheet","weight":-3,"updated":"2018-06-25T00:00:00.000Z","version":"chai v4.x","description":"expect(x).to.be.equal(y) 〉 assert.equal(x, y) 〉 .to.be.true 〉 jQuery, assertions, TDD and BDD, and other Chai examples.\n"},"body":[{"title":"Assert","elms":"\n```js\nconst { assert } = require('cs/chai')\n```\n{: .-setup}\n\n```js\nassert(val)\nassert.fail(actual, expected)\nassert.ok(val)                        // is truthy\nassert.equal(actual, expected)        // compare with ==\nassert.strictEqual(actual, expected)  // compare with ===\nassert.deepEqual(actual, expected)    // deep equal check\n```\n\n```js\nassert.isTrue(val)\nassert.isFalse(val)\n```\n\n```js\nassert.isNull(val)\nassert.isNotNull(val)\nassert.isUndefined(val)\nassert.isDefined(val)\nassert.isFunction(val)\nassert.isObject(val)\nassert.isArray(val)\nassert.isString(val)\nassert.isNumber(val)\nassert.isBoolean(val)\n```\n\n```js\nassert.typeOf(/tea/, 'regexp') // Object.prototype.toString()\nassert.instanceOf(chai, Tea)\nassert.include([ a,b,c ], a)\nassert.match(val, /regexp/)\nassert.property(obj, 'tea') // 'tea' in object\nassert.deepProperty(obj, 'tea.green')\nassert.propertyVal(person, 'name', 'John')\nassert.deepPropertyVal(post, 'author.name', 'John')\n```\n\n```js\nassert.lengthOf(object, 3)\nassert.throws(function() { ... })\nassert.throws(function() { ... }, /reference error/)\nassert.doesNotThrow\n```\n\n```js\nassert.operator(1, '<', 2)\nassert.closeTo(actual, expected)\n```\n\nSee: [Assert API](http://chaijs.com/api/assert/) _(chaijs.com)_\n","h2":null},{"title":"BDD syntax","elms":"\n```js\nconst { expect } = require('chai')\n```\n{: .-setup}\n\n```js\nexpect(object)\n  .to.equal(expected)\n  .to.eql(expected)        // deep equality\n  .to.deep.equal(expected) // same as .eql\n  .to.be.a('string')\n  .to.include(val)\n```\n\n```js\n  .be.ok(val)\n  .be.true\n  .be.false\n  .to.exist\n```\n\n```js\n  .to.be.null\n  .to.be.undefined\n  .to.be.empty\n  .to.be.arguments\n  .to.be.function\n  .to.be.instanceOf\n```\n\n```js\n  .to.be.gt(5)  // aka: .above .greaterThan\n  .to.be.gte(5) // aka: .at.least\n  .to.be.lt(5)  // aka: .below\n```\n\n```js\n  .to.respondTo('bar')\n  .to.satisfy((n) => n > 0)\n```\n\n```js\n  .to.have.members([2, 3, 4])\n  .to.have.keys(['foo'])\n  .to.have.key('foo')\n  .to.have.lengthOf(3)\n```\n\n```js\nexpect(() => { ··· })\n  .to.throw(/not a function/)\n```\n\nSee: [BDD](http://chaijs.com/api/bdd/) _(chaijs.com)_\n","h2":null},{"title":"Should: chains","elms":"\n    .to .be .been .is .that .and .have .with .at .of .same\n\nThese don't do anything and can be chained.\n","h2":null},{"title":"Should not","elms":"\n```js\nexpect(object).not.equal('x')\n```\n","h2":null},{"title":"Using chai-jquery","elms":"\n```js\nglobal.jQuery = ···\nchai.use(require('chai-jquery'))\n```\n{: .-setup}\n\n```js\nexpect($body)\n  .have.attr('foo')\n  .have.prop('disabled')\n  .have.css('background')\n  .have.css('background-color', '#ffffff')\n  .have.data('foo')\n```\n\n```js\n  .have.class('active')\n  .have.id('id')\n```\n\n```js\n  .have.html('<em>hi</em>')\n  .have.text('hello')\n  .have.value('2013')\n```\n","h2":"Chai with jQuery"},{"title":"Continued","elms":"\n```js\nexpect($body)\n```\n\n```js\n  .be.visible\n  .be.hidden\n```\n\n```js\n  .be.checked\n  .be.selected\n```\n\n```js\n  .be.enabled\n  .be.disabled\n```\n\n```js\n  .be.empty\n  .to.exist\n  .to.contain('text')\n  .to.have('.selector')\n```","h2":"Chai with jQuery"}]}