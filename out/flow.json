{"head":{"title":"Flow","layout":"2017/sheet","category":"JavaScript libraries","updated":"2020-07-05T00:00:00.000Z","weight":-3,"tags":["Featurable"]},"body":[{"title":null,"elms":"{: .-three-column}\n","h2":"Getting started"},{"title":"Simple example","elms":"{: .-prime}\n\n```js\n/* @flow */\nfunction square (n: number) {\n  return n * n\n}\n\nconst four = square(2)\n```\n{: data-line=\"1,2\"}\n\nMost of what you need to do is to simply add annotations to function arguments!\n\nSee: [flow.org docs](https://flow.org/en/docs/)\n","h2":"Getting started"},{"title":"Type inference","elms":"\n```js\nfunction square (n: number) {\n  const result = n * n\n}\n```\n{: data-line=\"2\"}\n\n`result` is inferred to be a number because `number * number` will result in a number. There's no need to give it annotations.\n","h2":"Getting started"},{"title":"Type aliases","elms":"\n```js\ntype Person = {\n  name: string,\n  age: number,\n  isAdmin: boolean,\n  likes: Array<string>\n}\n```\n{: data-line=\"1,2,3,4,5,6\"}\n\n```js\nfunction greet(user: Person) {\n  console.log('hello', user.name)\n}\n```\n{: data-line=\"1\"}\n\n```js\ngreet({ name: 'Miles Davis', ··· })\n```\n\nThis is the typical way to define the shape of complex objects.\n","h2":"Getting started"},{"title":"Variables","elms":"\n```js\nconst count: number = 200\n```\n\nYou typically don't need to do this, function args are often enough.\n\nSee: [Variable types](https://flow.org/en/docs/types/variables/)\n","h2":"Getting started"},{"title":"Importing and exporting","elms":"\n```js\nimport type { Person } from './types'\n```\n\n```js\nexport type Person = {\n  ···\n}\n```\n\nSee: [Module types](https://flow.org/en/docs/types/modules)\n","h2":"Getting started"},{"title":"Union types","elms":"\n```js\ntype Action = number | string\n```\n\n```js\ntype Direction = 'left' | 'right'\n```\n\nSee: [Unions](https://flow.org/en/docs/types/unions/)\n","h2":"Getting started"},{"title":"Maybe types","elms":"\n```js\ntype Album = {\n  name: ?string\n}\n```\n{: data-line=\"2\"}\n\n```js\nconst a: Album = { }                 // ✗ Error\nconst a: Album = { name: 'Blue' }    // ✓ OK\nconst a: Album = { name: null }      // ✓ OK\nconst a: Album = { name: undefined } // ✓ OK\n```\n\nThis makes `name` either a string or null.\n\nSee: [Maybe types](https://flow.org/en/docs/types/primitives/#toc-maybe-types)\n","h2":"Optionals"},{"title":"Optional properties","elms":"\n```js\ntype Album = {\n  name?: string\n}\n```\n{: data-line=\"2\"}\n\n```js\nconst a: Album = { } // ✓ OK\na.name = 'Blue'      // ✓ OK\na.name = null        // ✗ Error\na.name = undefined   // ✓ OK\n```\n\nThis makes an `Album` valid even if `name` is not part of the keys. This is different from \"maybe\" types.\n\nSee: [Optional properties](https://flow.org/en/docs/types/primitives/#toc-optional-object-properties)\n","h2":"Optionals"},{"title":null,"elms":"{: .-three-column}\n","h2":"Objects"},{"title":"Width subtyping","elms":"\n```js\ntype Artist = {\n  name: string,\n  label: string\n}\n```\n\n```js\nconst a: Artist = {\n  name: 'Miguel Migs',\n  label: 'Naked Music',\n  genre: 'House' // ✓ OK\n}\n```\n{: data-line=\"6\"}\n\nA type with more properties is \"wider\" and is a subtype of a \"narrower\" type.\n\nSee: [Width subtyping](https://flow.org/en/docs/lang/width-subtyping/)\n","h2":"Objects"},{"title":"Exact object types","elms":"\n```js\ntype Artist = {|\n  name: string,\n  label: string\n|}\n```\n{: data-line=\"1,4\"}\n\n```js\nconst a: Artist = {\n  name: 'Miguel Migs',\n  label: 'Naked Music',\n  genre: 'House' // ✗ Error\n}\n```\n{: data-line=\"4\"}\n\nExact object types prevent extra properties from being added to an object.\n\nSee: [Exact object types](https://flow.org/en/docs/types/objects/#toc-exact-object-types)\n","h2":"Objects"},{"title":"Dynamic keys","elms":"\n```js\ntype Items = {\n  [key: string]: Item\n}\n```\n{: data-line=\"2\"}\n\nSee: [Dynamic object keys](https://flow.org/en/docs/types/objects/#toc-objects-as-maps)\n","h2":"Objects"},{"title":"Primitives","elms":"\n| Type            | Description                  |\n| ---             | ---                          |\n| `any`           |                              |\n| `boolean`       |                              |\n| `mixed`         |                              |\n| `number`        |                              |\n| `string`        |                              |\n| `void`          | undefined                    |\n| `null`          | null (but not undefined)     |\n| ---             | ---                          |\n| `{a: Number}`   | Object with a shape          |\n| `[any, number]` | Tuples (fixed-length arrays) |\n| ---             | ---                          |\n| `Array<T>`      |                              |\n| `Class<T>`      |                              |\n| `Function`      |                              |\n| `Object`        |                              |\n| ---             | ---                          |\n| `?number`       | Maybe (number, void, null)   |\n| `a | b`         | Union types                  |\n","h2":"Advanced features"},{"title":"Enums","elms":"\n```js\ntype Suit = \"Diamonds\" | \"Clubs\" | \"Hearts\" | \"Spades\"\n\nconst countries = {\n  US: \"United States\",\n  IT: \"Italy\",\n  FR: \"France\"\n}\n\ntype Country = $Keys<typeof countries>\n```\n\nSee: [Enums](https://flow.org/en/docs/types/utilities/#toc-keys)\n","h2":"Advanced features"},{"title":"Type aliases","elms":"\n```js\ntype Tree = {\n  foo: string,\n  bar: number,\n  qux: (foo: string, bar: number) => boolean\n}\n\ntype Generic<T> = {\n  foo: T\n}\n```\n\nSee: [Type aliases](https://flow.org/en/docs/types/aliases/)\n","h2":"Advanced features"},{"title":"Generic classes","elms":"\n```js\nclass GenericClass<T> {\n  x: T\n  constructor (x: T) { ... }\n}\n\nvar n: GenericClass<number> = new GenericClass(0)\n```\n\nSee: [Generic classes](https://flow.org/en/docs/types/generics/#toc-classes-with-generics)\n","h2":"Advanced features"},{"title":"Interfaces","elms":"\n```js\ninterface Jsonable {\n  toJSON(): string\n}\n\nclass Foo {\n  toJSON() { return '{}' }\n}\n\n(new Foo: Jsonable)\n```\n\nSee: [Interfaces](https://flow.org/en/docs/types/interfaces/)\n","h2":"Advanced features"},{"title":"Functions","elms":"\n```js\nconst callback: () => void = function () {}\n```\n\n```js\nfunction filter<T> (\n  list: Array<T>,\n  callback: (item: T) => boolean\n): Array<T> {\n  ···\n}\n```\n\nSee: [Functions](https://flow.org/en/docs/types/functions/)\n","h2":"Advanced features"},{"title":"Imports","elms":"\n```js\nimport type { Person } from '../person'\nimport typeof Config from '../config'\n```\n\n```js\nexport type Person = { id: string }\n```\n","h2":"Advanced features"},{"title":"Comment syntax","elms":"\n```js\n/*::\n  export type Foo = { ... }\n*/\n\nfunction add(n /*: number */) { ... }\n```\n","h2":"Advanced features"},{"title":"React","elms":"\n```js\ntype Props = {\n  bar: number,\n}\n\ntype State = {\n  open: boolean,\n}\n\nclass Foo extends React.Component<Props, State> {\n  // Component code\n}\n```\n","h2":"Advanced features"},{"title":"Examples","elms":"\n```js\nvar myNumbers: Array<number> = [42]\nfunction foo(): any { return 42 }\nvar b: boolean = false\nvar b: ?boolean = false  /* maybe */\nvar b: string | boolean = false\n\nvar a: Class<MyClass> = MyClass\nvar b: MyClass = new a()\n```\n","h2":"Examples"},{"title":"Function signature","elms":"\n```js\ntype Callback = (?Error, string) => any\n\nfunction fetch (callback: Callback) {\n  ···\n}\n```\n","h2":"Examples"},{"title":null,"elms":"\n- [Flow website](https://www.saltycrane.com/flow-type-cheat-sheet/latest/) _(flow.org)_\n- [Getting started with Flow](https://flow.org/en/docs/getting-started/) _(flow.org)_\n- [Flow type cheatsheet](https://www.saltycrane.com/flow-type-cheat-sheet/latest/) _(saltycrane.com)_","h2":"References"}]}