{"head":{"title":"Vim scripting","category":"Vim","prism_languages":["vim"],"layout":"2017/sheet","updated":"2020-07-05T00:00:00.000Z","weight":-10,"tags":["Featurable"]},"body":[{"title":"Start hacking","elms":"\n```vim\nlet name = \"John\"\necho \"Hello, \" . name\n```\n\nYou can either put this in a script (`script.vim`) and run it (`:source script.vim`), or you can type the commands individually in normal mode as `:let` and `:echo`.\n","h2":null},{"title":"Learn by example","elms":"\n```vim\nfunction! SuperTab()\n  let l:part = strpart(getline('.'),col('.')-2,1)\n  if (l:part =~ '^\\W\\?$')\n      return \"\\<Tab>\"\n  else\n      return \"\\<C-n>\"\n  endif\nendfunction\n\nimap <Tab> <C-R>=SuperTab()<CR>\n```\n\n[Here](http://www.vimbits.com/bits/46)'s another example with [functions](#functions), [variables](#variables) and [mapping](#mapping).\n\nVariables\n---------\n","h2":null},{"title":"Defining","elms":"{: .-prime}\n\n```vim\nlet var = \"hello\"\n```\n","h2":null},{"title":"Variable prefixes","elms":"\n```vim\nlet g:ack_options = '-s -H'    \" g: global\nlet s:ack_program = 'ack'      \" s: local (to script)\nlet l:foo = 'bar'              \" l: local (to function)\n```\n\nThe `s:` prefix is also available in function names. See `:help local-variables`\n","h2":null},{"title":"Other prefixes","elms":"\n```vim\nlet w:foo = 'bar'    \" w: window\nlet b:state = 'on'   \" b: buffer\nlet t:state = 'off'  \" t: tab\necho v:var           \" v: vim special\n```\n\n```vim\nlet @/ = ''          \" @  register (this clears last search pattern)\necho $PATH           \" $  env\n```\n","h2":null},{"title":"Vim options","elms":"\n```vim\necho 'tabstop is ' . &tabstop\nif &insertmode\necho &g:option\necho &l:option\n```\n\nPrefix Vim options with `&`\n","h2":null},{"title":"Operators","elms":"\n```vim\na + b             \" numbers only!\n'hello ' . name   \" concat\n```\n\n```vim\nlet var -= 2\nlet var += 5\nlet var .= 'string'   \" concat\n```\n","h2":null},{"title":"Strings","elms":"\n```vim\nlet str = \"String\"\nlet str = \"String with \\n newline\"\n\nlet literal = 'literal, no \\ escaping'\nlet literal = 'that''s enough'  \" double '' => '\n\necho \"result = \" . re   \" concatenation\n```\n\nAlso see `:help literal-string` and `:help expr-quote`.\nSee: [Strings](http://learnvimscriptthehardway.stevelosh.com/chapters/26.html)\n","h2":"Strings"},{"title":"String functions","elms":"\n```vim\nstrlen(str)    \" length\nlen(str)       \" same\nstrchars(str)  \" character length\n\nsplit(\"one two three\")       \"=> ['one', 'two', 'three']\nsplit(\"one.two.three\", '.')  \"=> ['one', 'two', 'three']\n\njoin(['a', 'b'], ',')  \"=> 'a,b'\n\ntolower('Hello')\ntoupper('Hello')\n```\n\nAlso see `:help functions`\nSee: [String functions](http://learnvimscriptthehardway.stevelosh.com/chapters/27.html)\n\nFunctions\n---------\n","h2":"Strings"},{"title":"Functions","elms":"{: .-prime}\n\n```vim\n\" prefix with s: for local script-only functions\nfunction! s:Initialize(cmd, args)\n  \" a: prefix for arguments\n  echo \"Command: \" . a:cmd\n\n  return true\nendfunction\n```\n\nSee: [Functions](http://learnvimscriptthehardway.stevelosh.com/chapters/23.html)\n","h2":"Strings"},{"title":"Namespacing","elms":"\n```vim\nfunction! myplugin#hello()\n```\n","h2":"Strings"},{"title":"Calling functions","elms":"\n```vim\ncall s:Initialize()\ncall s:Initialize(\"hello\")\n```\n","h2":"Strings"},{"title":"Consuming return values","elms":"\n```vim\necho \"Result: \" . s:Initialize()\n```\n","h2":"Strings"},{"title":"Abortable","elms":"\n```vim\nfunction! myfunction() abort\nendfunction\n```\n\nAborts when an error occurs.\n","h2":"Strings"},{"title":"Var arguments","elms":"\n```vim\nfunction! infect(...)\n  echo a:0    \"=> 2\n  echo a:1    \"=> jake\n  echo a:2    \"=> bella\n\n  for s in a:000  \" a list\n    echon ' ' . s\n  endfor\nendfunction\n\ninfect('jake', 'bella')\n```\n\nSee `:help function-argument`.  See: [Var arguments](http://learnvimscriptthehardway.stevelosh.com/chapters/24.html)\n\nLoops\n-----\n\n```vim\nfor s in list\n  echo s\n  continue  \" jump to start of loop\n  break     \" breaks out of a loop\nendfor\n```\n\n```vim\nwhile x < 5\nendwhile\n```\n\nCustom commands\n---------------\n","h2":"Strings"},{"title":"Custom commands","elms":"{: .-prime}\n\n```vim\ncommand! Save :set fo=want tw=80 nowrap\n```\n\nCustom commands start with uppercase letters. The `!` redefines a command if it already exists.\n","h2":"Strings"},{"title":"Commands calling functions","elms":"\n```vim\ncommand! Save call <SID>foo()\n```\n{: .-setup}\n\n```vim\nfunction! s:foo()\n  ...\nendfunction\n```\n","h2":"Strings"},{"title":"Commands with arguments","elms":"\n```vim\ncommand! -nargs=? Save call script#foo(<args>)\n```\n{: .-setup}\n\n| What | What |\n| ---- | ---- |\n| `-nargs=0` | 0 arguments, default |\n| `-nargs=1` | 1 argument, includes spaces |\n| `-nargs=?` | 0 or 1 argument |\n| `-nargs=*` | 0+ arguments, space separated |\n| `-nargs=+` | 1+ arguments, space reparated |\n\nFlow\n----\n","h2":"Strings"},{"title":"Conditionals","elms":"\n```vim\nlet char = getchar()\nif char == \"\\<LeftMouse>\"\n  \" ...\nelseif char == \"\\<RightMouse>\"\n  \" ...\nelse\n  \" ...\nendif\n```\n","h2":"Strings"},{"title":"Truthiness","elms":"\n```vim\nif 1 | echo \"true\"  | endif\nif 0 | echo \"false\" | endif\n```\n\n```vim\nif 1       \"=> 1 (true)\nif 0       \"=> 0 (false)\nif \"1\"     \"=> 1 (true)\nif \"456\"   \"=> 1 (true)\nif \"xfz\"   \"=> 0 (false)\n```\n\nNo booleans. `0` is false, `1` is true.\nSee: [Truthiness](http://learnvimscriptthehardway.stevelosh.com/chapters/21.html)\n","h2":"Strings"},{"title":"Operators","elms":"\n```vim\nif 3 > 2\nif a && b\nif (a && b) || (c && d)\nif !c\n```\n\nSee `:help expression-syntax`.\nSee: [Operators](http://learnvimscriptthehardway.stevelosh.com/chapters/22.html)\n","h2":"Strings"},{"title":"Strings","elms":"\n```vim\nif name ==# 'John'     \" case-sensitive\nif name ==? 'John'     \" case-insensitive\nif name == 'John'      \" depends on :set ignorecase\n\n\" also: is#, is?, >=#, >=?, and so on\n```\n","h2":"Strings"},{"title":"Identity operators","elms":"\n```vim\na is b\na isnot b\n```\n\nChecks if it's the same instance object.\n","h2":"Strings"},{"title":"Regexp matches","elms":"\n```vim\n\"hello\" =~ 'xx*'\n\"hello\" !~ 'xx*'\n\"hello\" =~ '\\v<\\d+>'\n```\n\n`\\v` enables \"extended\" regex mode which allows word boundary (`<>`), `+`, and more.\n","h2":"Strings"},{"title":"Single line","elms":"\n```vim\nif empty(a:path) | return [] | endif\na ? b : c\n```\n\nUse `|` to join lines together.\n","h2":"Strings"},{"title":"Boolean logic","elms":"\n```vim\nif g:use_dispatch && s:has_dispatch\n  ···\nendif\n```\n\nLists\n-----\n","h2":"Strings"},{"title":"Lists","elms":"\n```vim\nlet mylist = [1, two, 3, \"four\"]\n\nlet first = mylist[0]\nlet last  = mylist[-1]\n\n\" Suppresses errors\nlet second = get(mylist, 1)\nlet second = get(mylist, 1, \"NONE\")\n```\n","h2":"Strings"},{"title":"Functions","elms":"\n```vim\nlen(mylist)\nempty(mylist)\n\nsort(list)\nlet sortedlist = sort(copy(list))\n\nsplit('hello there world', ' ')\n```\n","h2":"Strings"},{"title":"Concatenation","elms":"\n```vim\nlet longlist = mylist + [5, 6]\nlet mylist += [7, 8]\n```\n","h2":"Strings"},{"title":"Sublists","elms":"\n```vim\nlet shortlist = mylist[2:-1]\nlet shortlist = mylist[2:]     \" same\n\nlet shortlist = mylist[2:2]    \" one item\n```\n","h2":"Strings"},{"title":"Push","elms":"\n```vim\nlet alist = [1, 2, 3]\nlet alist = add(alist, 4)\n```\n","h2":"Strings"},{"title":"Map","elms":"\n```vim\ncall map(files, \"bufname(v:val)\")  \" use v:val for value\ncall filter(files, 'v:val != \"\"')\n```\n\nDictionaries\n------------\n","h2":"Strings"},{"title":"Dictionaries","elms":"\n```vim\nlet colors = {\n  \\ \"apple\": \"red\",\n  \\ \"banana\": \"yellow\"\n}\n\necho colors[\"a\"]\necho get(colors, \"apple\")   \" suppress error\n```\n\nSee `:help dict`\n","h2":"Strings"},{"title":"Using dictionaries","elms":"\n```vim\nremove(colors, \"apple\")\n```\n\n```vim\n\" :help E715\nif has_key(dict, 'foo')\nif empty(dict)\nkeys(dict)\nlen(dict)\n```\n\n```vim\nmax(dict)\nmin(dict)\n```\n\n```vim\ncount(dict, 'x')\nstring(dict)\n```\n\n```vim\nmap(dict, '<>> \" . v:val')\n```\n","h2":"Strings"},{"title":"Iteration","elms":"\n```vim\nfor key in keys(mydict)\n  echo key . ': ' . mydict(key)\nendfor\n```\n","h2":"Strings"},{"title":"Prefixes","elms":"\n```vim\nkeys(s:)\n```\n\nPrefixes (`s:`, `g:`, `l:`, etc) are actually dictionaries.\n","h2":"Strings"},{"title":"Extending","elms":"\n```vim\n\" Extending with more\nlet extend(s:fruits, { ... })\n```\n\nCasting\n-------\n\n```vim\nstr2float(\"2.3\")\nstr2nr(\"3\")\nfloat2nr(\"3.14\")\n```\n\nNumbers\n-------\n","h2":"Strings"},{"title":"Numbers","elms":"{: .-prime}\n\n```vim\nlet int = 1000\nlet int = 0xff\nlet int = 0755   \" octal\n```\n\nSee `:help Number`.\nSee: [Numbers](http://learnvimscriptthehardway.stevelosh.com/chapters/25.html)\n","h2":"Strings"},{"title":"Floats","elms":"\n```vim\nlet fl = 100.1\nlet fl = 5.4e4\n```\n\nSee `:help Float`\n","h2":"Strings"},{"title":"Arithmetic","elms":"\n```vim\n3 / 2     \"=> 1, integer division\n3 / 2.0   \"=> 1.5\n3 * 2.0   \"=> 6.0\n```\n","h2":"Strings"},{"title":"Math functions","elms":"\n```vim\nsqrt(100)\nfloor(3.5)\nceil(3.3)\nabs(-3.4)\n\nsin() cos() tan()\nsinh() cosh() tanh()\nasin() acos() atan()\n```\n\nVim-isms\n--------\n","h2":"Strings"},{"title":"Execute a command","elms":"\n```vim\nexecute \"vsplit\"\nexecute \"e \" . fnameescape(filename)\n```\n\nRuns an ex command you typically run with `:`. Also see `:help execute`.\nSee: [Execute a command](http://learnvimscriptthehardway.stevelosh.com/chapters/28.html)\n","h2":"Strings"},{"title":"Running keystrokes","elms":"\n```vim\nnormal G\nnormal! G   \" skips key mappings\n\nexecute \"normal! gg/foo\\<cr>dd\"\n```\n\nUse `:normal` to execute keystrokes as if you're typing them in normal mode. Combine with `:execute` for special keystrokes.\nSee: [Running keystrokes](http://learnvimscriptthehardway.stevelosh.com/chapters/29.html)\n","h2":"Strings"},{"title":"Getting filenames","elms":"\n```vim\necho expand(\"%\")      \" path/file.txt\necho expand(\"%:t\")    \" file.txt\necho expand(\"%:p:h\")  \" /home/you/path/file.txt\necho expand(\"%:r\")    \" path/file\necho expand(\"%:e\")    \" txt\n```\n\nSee `:help expand`\n","h2":"Strings"},{"title":"Silencing","elms":"\n```vim\nsilent g/Aap/p\n```\n\nSuppresses output. See `:help silent`\n","h2":"Strings"},{"title":"Echo","elms":"\n```vim\nechoerr 'oh it failed'\nechomsg 'hello there'\necho 'hello'\n\nechohl WarningMsg | echomsg \"=> \" . a:msg | echohl None\n```\n\n","h2":"Strings"},{"title":"Settings","elms":"\n```vim\nset number\nset nonumber\nset number!     \" toggle\nset numberwidth=5\nset guioptions+=e\n```\n","h2":"Strings"},{"title":"Prompts","elms":"\n```vim\nlet result = confirm(\"Sure?\")\nexecute \"confirm q\"\n```\n","h2":"Strings"},{"title":"Built-ins","elms":"\n```vim\nhas(\"feature\")  \" :h feature-list\nexecutable(\"python\")\nglobpath(&rtp, \"syntax/c.vim\")\n\nexists(\"$ENV\")\nexists(\":command\")\nexists(\"variable\")\nexists(\"+option\")\nexists(\"g:...\")\n```\n\nMapping\n-------\n{: .-three-column}\n","h2":"Strings"},{"title":"Mapping commands","elms":"\n```vim\nnmap\nvmap\nimap\nxmap\nnnoremap\nvnoremap\ninoremap\nxnoremap\n...\n```\n","h2":"Strings"},{"title":"Explanation","elms":"\n```vim\n[nvixso](nore)map\n```\n\n```\n │       └ don't recurse\n │\n └ normal, visual, insert,\n   eX mode, select, operator-pending\n```\n{: .-setup}\n","h2":"Strings"},{"title":"Arguments","elms":"\n| `<buffer>` | only in current buffer |\n| `<silent>` | no echo |\n| `<nowait>` | |\n\nSyntax\n------\n","h2":"Strings"},{"title":"Highlights","elms":"\n```vim\nhi Comment\n  term=bold,underline\n  gui=bold\n  ctermfg=4\n  guifg=#80a0ff\n```\n","h2":"Strings"},{"title":"Filetype detection","elms":"\n```vim\naugroup filetypedetect\n  au! BufNewFile,BufRead *.json setf javascript\naugroup END\n\nau Filetype markdown setlocal spell\n```\n","h2":"Strings"},{"title":"Conceal","elms":"\n```vim\nset conceallevel=2\nsyn match newLine \"<br>\" conceal cchar=}\nhi newLine guifg=green\n```\n","h2":"Strings"},{"title":"Region conceal","elms":"\n```vim\nsyn region inBold concealends matchgroup=bTag start=\"<b>\" end=\"</b>\"\nhi inBold gui=bold\nhi bTag guifg=blue\n```\n","h2":"Strings"},{"title":"Syntax","elms":"\n```vim\nsyn match :name \":regex\" :flags\n\nsyn region Comment  start=\"/\\*\"  end=\"\\*/\"\nsyn region String   start=+\"+    end=+\"+\t skip=+\\\\\"+\n\nsyn cluster :name contains=:n1,:n2,:n3...\n\nflags:\n  keepend\n  oneline\n  nextgroup=\n  contains=\n  contained\n\nhi def link markdownH1 htmlH1\n```\n","h2":"Strings"},{"title":"Include guards","elms":"\n```vim\nif exists('g:loaded_myplugin')\n  finish\nendif\n\n\" ...\n\nlet g:loaded_myplugin = 1\n```","h2":"Strings"}]}