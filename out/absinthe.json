{
    "head": {
        "title": "Absinthe",
        "category": "Hidden",
        "layout": "2017/sheet",
        "tags": [
            "WIP"
        ],
        "updated": "2017-10-10T00:00:00.000Z",
        "intro": "[Absinthe](http://absinthe-graphql.org/) allows you to write GraphQL servers in Elixir.\n"
    },
    "body": [
        {
            "title": "Concepts",
            "elms": "\n- `Schema` - The root. Defines what queries you can do, and what types they return.\n- `Resolver` - Functions that return data.\n- `Type` - A type definition describing the shape of the data you'll return.\n",
            "h2": "Introduction"
        },
        {
            "title": "Plug",
            "elms": "\n#### web/router.ex\n\n```elixir\ndefmodule Blog.Web.Router do\n  use Phoenix.Router\n\n  forward \"/\", Absinthe.Plug,\n    schema: Blog.Schema\nend\n```\n{: data-line=\"4,5\"}\n\nAbsinthe is a Plug, and you pass it one **Schema**.\n\nSee: [Our first query](http://absinthe-graphql.org/tutorial/our-first-query/)\n",
            "h2": "Introduction"
        },
        {
            "title": null,
            "elms": "{: .-three-column}\n",
            "h2": "Main concepts"
        },
        {
            "title": "Schema",
            "elms": "\n#### web/schema.ex\n\n```elixir\ndefmodule Blog.Schema do\n  use Absinthe.Schema\n  import_types Blog.Schema.Types\n\n  query do\n    @desc \"Get a list of blog posts\"\n    field :posts, list_of(:post) do\n      resolve &Blog.PostResolver.all/2\n    end\n  end\nend\n```\n{: data-line=\"5,6,7,8,9,10\"}\n\nThis schema will account for `{ posts { ··· } }`. It returns a **Type** of `:post`, and delegates to a **Resolver**.\n",
            "h2": "Main concepts"
        },
        {
            "title": "Resolver",
            "elms": "\n#### web/resolvers/post_resolver.ex\n\n```elixir\ndefmodule Blog.PostResolver do\n  def all(_args, _info) do\n    {:ok, Blog.Repo.all(Blog.Post)}\n  end\nend\n```\n{: data-line=\"3\"}\n\nThis is the function that the schema delegated the `posts` query to.\n",
            "h2": "Main concepts"
        },
        {
            "title": "Type",
            "elms": "\n#### web/schema/types.ex\n\n```elixir\ndefmodule Blog.Schema.Types do\n  use Absinthe.Schema.Notation\n\n  @desc \"A blog post\"\n  object :post do\n    field :id, :id\n    field :title, :string\n    field :body, :string\n  end\nend\n```\n{: data-line=\"4,5,6,7,8,9\"}\n\nThis defines a type `:post`, which is used by the resolver.\n",
            "h2": "Main concepts"
        },
        {
            "title": "Query arguments",
            "elms": "\n#### GraphQL query\n\n```\n{ user(id: \"1\") { ··· } }\n```\n\n#### web/schema.ex\n\n```elixir\nquery do\n  field :user, type: :user do\n    arg :id, non_null(:id)\n    resolve &Blog.UserResolver.find/2\n  end\nend\n```\n{: data-line=\"3\"}\n\n#### Resolver\n\n```elixir\ndef find(%{id: id} = args, _info) do\n  ···\nend\n```\n{: data-line=\"1\"}\n\nSee: [Query arguments](http://absinthe-graphql.org/tutorial/query-arguments/)\n",
            "h2": "Schema"
        },
        {
            "title": "Mutations",
            "elms": "\n#### GraphQL query\n\n```\n{\n  mutation CreatePost {\n    post(title: \"Hello\") { id }\n  }\n}\n```\n\n#### web/schema.ex\n\n```elixir\nmutation do\n  @desc \"Create a post\"\n  field :post, type: :post do\n    arg :title, non_null(:string)\n    resolve &Blog.PostResolver.create/2\n  end\nend\n```\n{: data-line=\"1\"}\n\nSee: [Mutations](http://absinthe-graphql.org/tutorial/mutations/)\n",
            "h2": "Schema"
        },
        {
            "title": null,
            "elms": "\n  - [Absinthe website](http://absinthe-graphql.org/) _(absinthe-graphql.org)_\n  - [GraphQL cheatsheet](./graphql) _(devhints.io)_",
            "h2": "References"
        }
    ]
}