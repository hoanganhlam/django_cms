{"head":{"title":"Promises","category":"JavaScript","layout":"2017/sheet"},"body":[{"title":null,"elms":"{:.-three-column}\n","h2":"Reference"},{"title":"Introduction","elms":"{: .-intro}\n\nintro: A quick reference to the JavaScript [Promise API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n- [Using Promises guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises) _(developer.mozilla.org)_\n- [Promise documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) _(developer.mozilla.org)_\n","h2":"Reference"},{"title":"Creating promises","elms":"\n```js\nnew Promise((resolve, reject) => {\n  doStuff(() => {\n    if (success) {\n      resolve('good')\n    } else {\n      reject(new Error('oops'))\n    }\n  })\n})\n```\n\nUse [new Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#Contstructor) to create new promises.\n","h2":"Reference"},{"title":"Consuming promises","elms":"\n```js\npromise\n  .then((result) => {\n    /* success */\n  })\n  .catch((error) => {\n    /* failure */\n  })\n```\n\n[then()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) runs a function when a promise resolves. [catch()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) runs when a promise fails.\n","h2":"Reference"},{"title":"Multiple promises","elms":"\n```js\nconst promises = [promise1(), promise2() /* ... */]\n```\n\n```js\n// Succeeds when all succeed\nPromise.all(promises).then((results) => {\n  /* ... */\n})\n```\n\n```js\n// Succeeds when one finishes first\nPromise.race(promises).then((result) => {\n  /* ... */\n})\n```\n","h2":"Reference"},{"title":"Converting other promises","elms":"\n```js\nreturn Promise.resolve('result')\nreturn Promise.resolve(promise)\nreturn Promise.resolve(thenable)\n\nreturn Promise.reject('reason')\n\nPromise.resolve(result).then(() => {\n  /* ... */\n})\n```\n\n`Promise.resolve(val)` will return a promise that resolves to the value given to it.","h2":"Reference"}]}