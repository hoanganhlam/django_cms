{"head":{"title":"Bash scripting","category":"CLI","layout":"2017/sheet","tags":["Featured"],"updated":"2020-07-05T00:00:00.000Z","keywords":["Variables","Functions","Interpolation","Brace expansions","Loops","Conditional execution","Command substitution"]},"body":[{"title":"Introduction","elms":"{: .-intro}\n\nThis is a quick reference to getting started with Bash scripting.\n\n- [Learn bash in y minutes](https://learnxinyminutes.com/docs/bash/) _(learnxinyminutes.com)_\n- [Bash Guide](http://mywiki.wooledge.org/BashGuide) _(mywiki.wooledge.org)_\n","h2":null},{"title":"Example","elms":"\n```bash\n#!/usr/bin/env bash\n\nNAME=\"John\"\necho \"Hello $NAME!\"\n```\n","h2":null},{"title":"Variables","elms":"\n```bash\nNAME=\"John\"\necho $NAME\necho \"$NAME\"\necho \"${NAME}!\"\n```\n","h2":null},{"title":"String quotes","elms":"\n```bash\nNAME=\"John\"\necho \"Hi $NAME\"  #=> Hi John\necho 'Hi $NAME'  #=> Hi $NAME\n```\n","h2":null},{"title":"Shell execution","elms":"\n```bash\necho \"I'm in $(pwd)\"\necho \"I'm in `pwd`\"\n# Same\n```\n\nSee [Command substitution](http://wiki.bash-hackers.org/syntax/expansion/cmdsubst)\n","h2":null},{"title":"Conditional execution","elms":"\n```bash\ngit commit && git push\ngit commit || echo \"Commit failed\"\n```\n","h2":null},{"title":"Functions","elms":"{: id='functions-example'}\n\n```bash\nget_name() {\n  echo \"John\"\n}\n\necho \"You are $(get_name)\"\n```\n\nSee: [Functions](#functions)\n","h2":null},{"title":"Conditionals","elms":"{: id='conditionals-example'}\n\n```bash\nif [[ -z \"$string\" ]]; then\n  echo \"String is empty\"\nelif [[ -n \"$string\" ]]; then\n  echo \"String is not empty\"\nfi\n```\n\nSee: [Conditionals](#conditionals)\n","h2":null},{"title":"Strict mode","elms":"\n```bash\nset -euo pipefail\nIFS=$'\\n\\t'\n```\n\nSee: [Unofficial bash strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/)\n","h2":null},{"title":"Brace expansion","elms":"\n```bash\necho {A,B}.js\n```\n\n| Expression | Description         |\n| ---------- | ------------------- |\n| `{A,B}`    | Same as `A B`       |\n| `{A,B}.js` | Same as `A.js B.js` |\n| `{1..5}`   | Same as `1 2 3 4 5` |\n\nSee: [Brace expansion](http://wiki.bash-hackers.org/syntax/expansion/brace)\n\n\nParameter expansions\n--------------------\n{: .-three-column}\n","h2":null},{"title":"Basics","elms":"\n```bash\nname=\"John\"\necho ${name}\necho ${name/J/j}    #=> \"john\" (substitution)\necho ${name:0:2}    #=> \"Jo\" (slicing)\necho ${name::2}     #=> \"Jo\" (slicing)\necho ${name::-1}    #=> \"Joh\" (slicing)\necho ${name:(-1)}   #=> \"n\" (slicing from right)\necho ${name:(-2):1} #=> \"h\" (slicing from right)\necho ${food:-Cake}  #=> $food or \"Cake\"\n```\n\n```bash\nlength=2\necho ${name:0:length}  #=> \"Jo\"\n```\n\nSee: [Parameter expansion](http://wiki.bash-hackers.org/syntax/pe)\n\n```bash\nSTR=\"/path/to/foo.cpp\"\necho ${STR%.cpp}    # /path/to/foo\necho ${STR%.cpp}.o  # /path/to/foo.o\necho ${STR%/*}      # /path/to\n\necho ${STR##*.}     # cpp (extension)\necho ${STR##*/}     # foo.cpp (basepath)\n\necho ${STR#*/}      # path/to/foo.cpp\necho ${STR##*/}     # foo.cpp\n\necho ${STR/foo/bar} # /path/to/bar.cpp\n```\n\n```bash\nSTR=\"Hello world\"\necho ${STR:6:5}   # \"world\"\necho ${STR: -5:5}  # \"world\"\n```\n\n```bash\nSRC=\"/path/to/foo.cpp\"\nBASE=${SRC##*/}   #=> \"foo.cpp\" (basepath)\nDIR=${SRC%$BASE}  #=> \"/path/to/\" (dirpath)\n```\n","h2":null},{"title":"Substitution","elms":"\n| Code              | Description         |\n| ----------------- | ------------------- |\n| `${FOO%suffix}`   | Remove suffix       |\n| `${FOO#prefix}`   | Remove prefix       |\n| ---               | ---                 |\n| `${FOO%%suffix}`  | Remove long suffix  |\n| `${FOO##prefix}`  | Remove long prefix  |\n| ---               | ---                 |\n| `${FOO/from/to}`  | Replace first match |\n| `${FOO//from/to}` | Replace all         |\n| ---               | ---                 |\n| `${FOO/%from/to}` | Replace suffix      |\n| `${FOO/#from/to}` | Replace prefix      |\n","h2":null},{"title":"Comments","elms":"\n```bash\n# Single line comment\n```\n\n```bash\n: '\nThis is a\nmulti line\ncomment\n'\n```\n","h2":null},{"title":"Substrings","elms":"\n| Expression      | Description                    |\n| --------------- | ------------------------------ |\n| `${FOO:0:3}`    | Substring _(position, length)_ |\n| `${FOO:(-3):3}` | Substring from the right       |\n","h2":null},{"title":"Length","elms":"\n| Expression | Description      |\n| ---------- | ---------------- |\n| `${#FOO}`  | Length of `$FOO` |\n","h2":null},{"title":"Manipulation","elms":"\n```bash\nSTR=\"HELLO WORLD!\"\necho ${STR,}   #=> \"hELLO WORLD!\" (lowercase 1st letter)\necho ${STR,,}  #=> \"hello world!\" (all lowercase)\n\nSTR=\"hello world!\"\necho ${STR^}   #=> \"Hello world!\" (uppercase 1st letter)\necho ${STR^^}  #=> \"HELLO WORLD!\" (all uppercase)\n```\n","h2":null},{"title":"Default values","elms":"\n| Expression        | Description                                              |\n| ----------------- | -------------------------------------------------------- |\n| `${FOO:-val}`     | `$FOO`, or `val` if unset (or null)                      |\n| `${FOO:=val}`     | Set `$FOO` to `val` if unset (or null)                   |\n| `${FOO:+val}`     | `val` if `$FOO` is set (and not null)                    |\n| `${FOO:?message}` | Show error message and exit if `$FOO` is unset (or null) |\n\nOmitting the `:` removes the (non)nullity checks, e.g. `${FOO-val}` expands to `val` if unset otherwise `$FOO`.\n\nLoops\n-----\n{: .-three-column}\n","h2":null},{"title":"Basic for loop","elms":"\n```bash\nfor i in /etc/rc.*; do\n  echo $i\ndone\n```\n","h2":null},{"title":"C-like for loop","elms":"\n```bash\nfor ((i = 0 ; i < 100 ; i++)); do\n  echo $i\ndone\n```\n","h2":null},{"title":"Ranges","elms":"\n```bash\nfor i in {1..5}; do\n    echo \"Welcome $i\"\ndone\n```\n\n#### With step size\n\n```bash\nfor i in {5..50..5}; do\n    echo \"Welcome $i\"\ndone\n```\n","h2":null},{"title":"Reading lines","elms":"\n```bash\ncat file.txt | while read line; do\n  echo $line\ndone\n```\n","h2":null},{"title":"Forever","elms":"\n```bash\nwhile true; do\n  ···\ndone\n```\n\nFunctions\n---------\n{: .-three-column}\n","h2":null},{"title":"Defining functions","elms":"\n```bash\nmyfunc() {\n    echo \"hello $1\"\n}\n```\n\n```bash\n# Same as above (alternate syntax)\nfunction myfunc() {\n    echo \"hello $1\"\n}\n```\n\n```bash\nmyfunc \"John\"\n```\n","h2":null},{"title":"Returning values","elms":"\n```bash\nmyfunc() {\n    local myresult='some value'\n    echo $myresult\n}\n```\n\n```bash\nresult=\"$(myfunc)\"\n```\n","h2":null},{"title":"Raising errors","elms":"\n```bash\nmyfunc() {\n  return 1\n}\n```\n\n```bash\nif myfunc; then\n  echo \"success\"\nelse\n  echo \"failure\"\nfi\n```\n","h2":null},{"title":"Arguments","elms":"\n| Expression | Description                                      |\n| ---        | ---                                              |\n| `$#`       | Number of arguments                              |\n| `$*`       | All postional arguments  (as a single word)     |\n| `$@`       | All postitional arguments (as separate strings)  |\n| `$1`       | First argument                                   |\n| `$_`       | Last argument of the previous command            |\n\n**Note**: `$@` and `$*` must be quoted in order to perform as described.\nOtherwise, they do exactly the same thing (arguments as separate strings).\n\nSee [Special parameters](http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables).\n\nConditionals\n------------\n{: .-three-column}\n","h2":null},{"title":"Conditions","elms":"\nNote that `[[` is actually a command/program that returns either `0` (true) or `1` (false). Any program that obeys the same logic (like all base utils, such as `grep(1)` or `ping(1)`) can be used as condition, see examples.\n\n| Condition                | Description           |\n| ---                      | ---                   |\n| `[[ -z STRING ]]`        | Empty string          |\n| `[[ -n STRING ]]`        | Not empty string      |\n| `[[ STRING == STRING ]]` | Equal                 |\n| `[[ STRING != STRING ]]` | Not Equal             |\n| ---                      | ---                   |\n| `[[ NUM -eq NUM ]]`      | Equal                 |\n| `[[ NUM -ne NUM ]]`      | Not equal             |\n| `[[ NUM -lt NUM ]]`      | Less than             |\n| `[[ NUM -le NUM ]]`      | Less than or equal    |\n| `[[ NUM -gt NUM ]]`      | Greater than          |\n| `[[ NUM -ge NUM ]]`      | Greater than or equal |\n| ---                      | ---                   |\n| `[[ STRING =~ STRING ]]` | Regexp                |\n| ---                      | ---                   |\n| `(( NUM < NUM ))`        | Numeric conditions    |\n\n#### More conditions\n\n| Condition            | Description              |\n| -------------------- | ------------------------ |\n| `[[ -o noclobber ]]` | If OPTIONNAME is enabled |\n| ---                  | ---                      |\n| `[[ ! EXPR ]]`       | Not                      |\n| `[[ X && Y ]]`       | And                      |\n| `[[ X || Y ]]`       | Or                       |\n","h2":null},{"title":"File conditions","elms":"\n| Condition               | Description             |\n| ---                     | ---                     |\n| `[[ -e FILE ]]`         | Exists                  |\n| `[[ -r FILE ]]`         | Readable                |\n| `[[ -h FILE ]]`         | Symlink                 |\n| `[[ -d FILE ]]`         | Directory               |\n| `[[ -w FILE ]]`         | Writable                |\n| `[[ -s FILE ]]`         | Size is > 0 bytes       |\n| `[[ -f FILE ]]`         | File                    |\n| `[[ -x FILE ]]`         | Executable              |\n| ---                     | ---                     |\n| `[[ FILE1 -nt FILE2 ]]` | 1 is more recent than 2 |\n| `[[ FILE1 -ot FILE2 ]]` | 2 is more recent than 1 |\n| `[[ FILE1 -ef FILE2 ]]` | Same files              |\n","h2":null},{"title":"Example","elms":"\n```bash\n# String\nif [[ -z \"$string\" ]]; then\n  echo \"String is empty\"\nelif [[ -n \"$string\" ]]; then\n  echo \"String is not empty\"\nelse\n  echo \"This never happens\"\nfi\n```\n\n```bash\n# Combinations\nif [[ X && Y ]]; then\n  ...\nfi\n```\n\n```bash\n# Equal\nif [[ \"$A\" == \"$B\" ]]\n```\n\n```bash\n# Regex\nif [[ \"A\" =~ . ]]\n```\n\n```bash\nif (( $a < $b )); then\n   echo \"$a is smaller than $b\"\nfi\n```\n\n```bash\nif [[ -e \"file.txt\" ]]; then\n  echo \"file exists\"\nfi\n```\n\nArrays\n------\n","h2":null},{"title":"Defining arrays","elms":"\n```bash\nFruits=('Apple' 'Banana' 'Orange')\n```\n\n```bash\nFruits[0]=\"Apple\"\nFruits[1]=\"Banana\"\nFruits[2]=\"Orange\"\n```\n","h2":null},{"title":"Working with arrays","elms":"\n```bash\necho ${Fruits[0]}           # Element #0\necho ${Fruits[-1]}          # Last element\necho ${Fruits[@]}           # All elements, space-separated\necho ${#Fruits[@]}          # Number of elements\necho ${#Fruits}             # String length of the 1st element\necho ${#Fruits[3]}          # String length of the Nth element\necho ${Fruits[@]:3:2}       # Range (from position 3, length 2)\necho ${!Fruits[@]}          # Keys of all elements, space-separated\n```\n","h2":null},{"title":"Operations","elms":"\n```bash\nFruits=(\"${Fruits[@]}\" \"Watermelon\")    # Push\nFruits+=('Watermelon')                  # Also Push\nFruits=( ${Fruits[@]/Ap*/} )            # Remove by regex match\nunset Fruits[2]                         # Remove one item\nFruits=(\"${Fruits[@]}\")                 # Duplicate\nFruits=(\"${Fruits[@]}\" \"${Veggies[@]}\") # Concatenate\nlines=(`cat \"logfile\"`)                 # Read from file\n```\n","h2":null},{"title":"Iteration","elms":"\n```bash\nfor i in \"${arrayName[@]}\"; do\n  echo $i\ndone\n```\n\nDictionaries\n------------\n{: .-three-column}\n","h2":null},{"title":"Defining","elms":"\n```bash\ndeclare -A sounds\n```\n\n```bash\nsounds[dog]=\"bark\"\nsounds[cow]=\"moo\"\nsounds[bird]=\"tweet\"\nsounds[wolf]=\"howl\"\n```\n\nDeclares `sound` as a Dictionary object (aka associative array).\n","h2":null},{"title":"Working with dictionaries","elms":"\n```bash\necho ${sounds[dog]} # Dog's sound\necho ${sounds[@]}   # All values\necho ${!sounds[@]}  # All keys\necho ${#sounds[@]}  # Number of elements\nunset sounds[dog]   # Delete dog\n```\n","h2":null},{"title":"Iteration","elms":"\n#### Iterate over values\n\n```bash\nfor val in \"${sounds[@]}\"; do\n  echo $val\ndone\n```\n\n#### Iterate over keys\n\n```bash\nfor key in \"${!sounds[@]}\"; do\n  echo $key\ndone\n```\n\nOptions\n-------\n","h2":null},{"title":"Options","elms":"\n```bash\nset -o noclobber  # Avoid overlay files (echo \"hi\" > foo)\nset -o errexit    # Used to exit upon error, avoiding cascading errors\nset -o pipefail   # Unveils hidden failures\nset -o nounset    # Exposes unset variables\n```\n","h2":null},{"title":"Glob options","elms":"\n```bash\nshopt -s nullglob    # Non-matching globs are removed  ('*.foo' => '')\nshopt -s failglob    # Non-matching globs throw errors\nshopt -s nocaseglob  # Case insensitive globs\nshopt -s dotglob     # Wildcards match dotfiles (\"*.sh\" => \".foo.sh\")\nshopt -s globstar    # Allow ** for recursive matches ('lib/**/*.rb' => 'lib/a/b/c.rb')\n```\n\nSet `GLOBIGNORE` as a colon-separated list of patterns to be removed from glob\nmatches.\n\nHistory\n-------\n","h2":null},{"title":"Commands","elms":"\n| Command               | Description                               |\n| --------------------- | ----------------------------------------- |\n| `history`             | Show history                              |\n| `shopt -s histverify` | Don't execute expanded result immediately |\n","h2":null},{"title":"Expansions","elms":"\n| Expression   | Description                                          |\n| ------------ | ---------------------------------------------------- |\n| `!$`         | Expand last parameter of most recent command         |\n| `!*`         | Expand all parameters of most recent command         |\n| `!-n`        | Expand `n`th most recent command                     |\n| `!n`         | Expand `n`th command in history                      |\n| `!<command>` | Expand most recent invocation of command `<command>` |\n","h2":null},{"title":"Operations","elms":"\n| Code                 | Description                                                           |\n| -------------------- | --------------------------------------------------------------------- |\n| `!!`                 | Execute last command again                                            |\n| `!!:s/<FROM>/<TO>/`  | Replace first occurrence of `<FROM>` to `<TO>` in most recent command |\n| `!!:gs/<FROM>/<TO>/` | Replace all occurrences of `<FROM>` to `<TO>` in most recent command  |\n| `!$:t`               | Expand only basename from last parameter of most recent command       |\n| `!$:h`               | Expand only directory from last parameter of most recent command      |\n\n`!!` and `!$` can be replaced with any valid expansion.\n","h2":null},{"title":"Slices","elms":"\n| Code     | Description                                                                              |\n| -------- | ---------------------------------------------------------------------------------------- |\n| `!!:n`   | Expand only `n`th token from most recent command (command is `0`; first argument is `1`) |\n| `!^`     | Expand first argument from most recent command                                           |\n| `!$`     | Expand last token from most recent command                                               |\n| `!!:n-m` | Expand range of tokens from most recent command                                          |\n| `!!:n-$` | Expand `n`th token to last from most recent command                                      |\n\n`!!` can be replaced with any valid expansion i.e. `!cat`, `!-2`, `!42`, etc.\n\n\nMiscellaneous\n-------------\n","h2":null},{"title":"Numeric calculations","elms":"\n```bash\n$((a + 200))      # Add 200 to $a\n```\n\n```bash\n$(($RANDOM%200))  # Random number 0..199\n```\n","h2":null},{"title":"Subshells","elms":"\n```bash\n(cd somedir; echo \"I'm now in $PWD\")\npwd # still in first directory\n```\n","h2":null},{"title":"Redirection","elms":"\n```bash\npython hello.py > output.txt   # stdout to (file)\npython hello.py >> output.txt  # stdout to (file), append\npython hello.py 2> error.log   # stderr to (file)\npython hello.py 2>&1           # stderr to stdout\npython hello.py 2>/dev/null    # stderr to (null)\npython hello.py &>/dev/null    # stdout and stderr to (null)\n```\n\n```bash\npython hello.py < foo.txt      # feed foo.txt to stdin for python\n```\n","h2":null},{"title":"Inspecting commands","elms":"\n```bash\ncommand -V cd\n#=> \"cd is a function/alias/whatever\"\n```\n","h2":null},{"title":"Trap errors","elms":"\n```bash\ntrap 'echo Error at about $LINENO' ERR\n```\n\nor\n\n```bash\ntraperr() {\n  echo \"ERROR: ${BASH_SOURCE[1]} at about ${BASH_LINENO[0]}\"\n}\n\nset -o errtrace\ntrap traperr ERR\n```\n","h2":null},{"title":"Case/switch","elms":"\n```bash\ncase \"$1\" in\n  start | up)\n    vagrant up\n    ;;\n\n  *)\n    echo \"Usage: $0 {start|stop|ssh}\"\n    ;;\nesac\n```\n","h2":null},{"title":"Source relative","elms":"\n```bash\nsource \"${0%/*}/../share/foo.sh\"\n```\n","h2":null},{"title":"printf","elms":"\n```bash\nprintf \"Hello %s, I'm %s\" Sven Olga\n#=> \"Hello Sven, I'm Olga\n\nprintf \"1 + 1 = %d\" 2\n#=> \"1 + 1 = 2\"\n\nprintf \"This is how you print a float: %f\" 2\n#=> \"This is how you print a float: 2.000000\"\n```\n","h2":null},{"title":"Directory of script","elms":"\n```bash\nDIR=\"${0%/*}\"\n```\n","h2":null},{"title":"Getting options","elms":"\n```bash\nwhile [[ \"$1\" =~ ^- && ! \"$1\" == \"--\" ]]; do case $1 in\n  -V | --version )\n    echo $version\n    exit\n    ;;\n  -s | --string )\n    shift; string=$1\n    ;;\n  -f | --flag )\n    flag=1\n    ;;\nesac; shift; done\nif [[ \"$1\" == '--' ]]; then shift; fi\n```\n","h2":null},{"title":"Heredoc","elms":"\n```sh\ncat <<END\nhello world\nEND\n```\n","h2":null},{"title":"Reading input","elms":"\n```bash\necho -n \"Proceed? [y/n]: \"\nread ans\necho $ans\n```\n\n```bash\nread -n 1 ans    # Just one character\n```\n","h2":null},{"title":"Special variables","elms":"\n| Expression | Description                  |\n| ---------- | ---------------------------- |\n| `$?`       | Exit status of last task     |\n| `$!`       | PID of last background task  |\n| `$$`       | PID of shell                 |\n| `$0`       | Filename of the shell script |\n\nSee [Special parameters](http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables).\n","h2":null},{"title":"Go to previous directory","elms":"\n```bash\npwd # /home/user/foo\ncd bar/\npwd # /home/user/foo/bar\ncd -\npwd # /home/user/foo\n```\n","h2":null},{"title":"Check for command's result","elms":"\n```bash\nif ping -c 1 google.com; then\n  echo \"It appears you have a working internet connection\"\nfi\n```\n","h2":null},{"title":"Grep check","elms":"\n```bash\nif grep -q 'foo' ~/.bash_history; then\n  echo \"You appear to have typed 'foo' in the past\"\nfi\n```\n","h2":null},{"title":null,"elms":"{: .-one-column}\n\n* [Bash-hackers wiki](http://wiki.bash-hackers.org/) _(bash-hackers.org)_\n* [Shell vars](http://wiki.bash-hackers.org/syntax/shellvars) _(bash-hackers.org)_\n* [Learn bash in y minutes](https://learnxinyminutes.com/docs/bash/) _(learnxinyminutes.com)_\n* [Bash Guide](http://mywiki.wooledge.org/BashGuide) _(mywiki.wooledge.org)_\n* [ShellCheck](https://www.shellcheck.net/) _(shellcheck.net)_","h2":"Also see"}]}