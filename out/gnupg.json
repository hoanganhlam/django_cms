{"head":{"title":"GnuPG","category":"CLI","layout":"2017/sheet","tags":[],"updated":"2017-10-22T00:00:00.000Z","weight":0,"intro":"[GnuPG](https://gnupg.org/) is a complete and free implementation of the OpenPGP standard.\n"},"body":[{"title":"Exporting keys","elms":"\n```bash\ngpg -o key.gpg --export <KEY ID>\n```\n\n__Export key in ASCII:__\n\n```bash\ngpg -o key.asc --armor --export <KEY ID>\n```\n\n__Note:__ Omitting the `-o|--output` option will print the key to `stdout`.\n","h2":null},{"title":"Importing keys","elms":"\n```bash\ngpg --import key.gpg\ngpg --import key.asc\n```\n\nOnly merge updates for keys already in key-ring:\n\n```bash\ngpg --import key.asc --merge-options merge-only\n```\n","h2":null},{"title":"Managing your keyring","elms":"\nGenerate a new key:\n{: .-setup}\n\n```bash\ngpg --gen-key\n# or, generate a new key with dialogs for all options\ngpg --full-gen-key\n```\n\nList public keys:\n\n```bash\ngpg -k\ngpg --list-keys\n```\n\nList secret keys:\n\n```bash\ngpg -K\ngpg --list-secret-keys\n```\n\n","h2":null},{"title":"Using a keyserver","elms":"\nImport keys from keyserver:\n{: .-setup}\n\n```bash\ngpg --receive-keys <KEY IDS>\n```\n\nUpload keys to keyserver:\n\n```bash\ngpg --send-keys <KEY IDS>\n```\n\nRequest updates from keyserver for keys already in your keyring:\n\n```bash\ngpg --refresh-keys\n```\n\nSearch keys from keyserver:\n\n```bash\ngpg --search-keys \"<SEARCH STRING>\"\n```\n\nOverride keyserver from `~/.gnupg/gpg.conf`\n\n```bash\ngpg --keyserver <URL> ...\n```\n","h2":null},{"title":"Trusting a key","elms":"\n```bash\ngpg --edit-key <KEY ID>\n# In the interactive prompt:\ngpg> sign\ngpg> save\n```\n\n__NOTE:__ You can use the owner's email or name (or part thereof) instead of the key ID for `--edit-key`\n\n\nEncrypting\n---------\n{: .-two-column}\n","h2":null},{"title":"Public key encryption","elms":"This will produce an encrypted file, `secret.txt.gpg`, that can only be decrypted by the recipient:\n\n```bash\ngpg -e -o secret.txt.gpg -r <RECIPIENT> secret.txt\n```\n\nFor `<RECIPIENT>` you can use their key ID, their email, or their name (or part thereof).\n\n```bash\ngpg -e -r <KEY ID> ...\ngpg -e -r \"Bez\" ...\ngpg -e -r \"bezalelhermoso@gmail.com\" ...\n```\n\nSpecifying multiple recipients\n\n```bash\ngpg -e -r <RECIPIENT> -r <ANOTHER RECIPIENT> ... secret.txt\n```\n\n__NOTE__: Omitting `-o|--output` will produce an encrypted file named `<ORIGINAL FILENAME>.gpg` by default.\n","h2":null},{"title":"Symmetric encryption","elms":"\nEncrypt file using a shared key. You will be prompted for a passphrase.\n\n```bash\ngpg --symmetric secret.txt\n# or\ngpg -c secret.txt\n```\n\nDecrypting\n---------\n{: .-one-column}\n","h2":null},{"title":"Decrypting a file","elms":"\n```bash\ngpg -d -o secret.txt secret.txt.gpg\n```\n\nIf the file is encrypted via symmetric encryption, you will be prompted for the passphrase.\n\n__NOTE__: Omitting `-o|--output` will print the unencrypted contents to `stdout`\n\nSigning & Verifying\n---------\n{: .-two-column}\n","h2":null},{"title":"Signing","elms":"\n```bash\ngpg -o signed-file.txt.gpg -s file.txt\n```\n\nThis can be used during encryption to also sign encrypted files:\n\n```bash\ngpg -s -o secret.txt.gpg \\\n  -r <RECIPIENT> secret.txt\n```\n","h2":null},{"title":"Verifying a signature","elms":"\n```bash\ngpg --verify file.txt.gpg\n```\n","h2":null},{"title":"Viewing content of signed file","elms":"\n```bash\ngpg -d signed-file.txt.gpg\n```\n\nMiscellaneous\n----------\n{: .-two-column}\n","h2":null},{"title":"Components","elms":"\nList all components:\n{: .-setup}\n\n```bash\ngpgconf --list-components\n```\n\nKill a component:\n\n```bash\ngpgconf --kill <COMPONENT> # i.e. gpgconf --kill dirmngr\n```\n\nKill all components:\n```bash\ngpgconf --kill all\n```\n","h2":null},{"title":"Parsing keyring data","elms":"\nUse `--with-colons` to produce an output that can easily be parsed i.e. with `awk`, `grep`. Fields are colon-separated.\n\n```bash\ngpg -k --with-colons\n```\n\nField Quick Reference:\n\n| Field # | Description |\n| 1       | Record type |\n| 2       | Validity |\n| 3       | Key length in bits |\n| 4       | Public key algorithm |\n| 5       | Key ID |\n| 6       | Creation date |\n| 7       | Expiry date |\n| 8       | Certificate S/N, UID hash, trust signature info |\n| 9       | Ownertrust |\n| 10      | User ID |\n| 11      | Signature class |\n| 12      | Key capabilities |\n| 13      | Issuer fingerprint |\n| 14      | Flag field |\n| 15      | S/N of token |\n| 16      | Hash algorithm |\n| 17      | Curve name |\n| 18      | Compliance flags |\n| 19      | Last update timestamp |\n| 20      | Origin |\n\nSee [GnuPG Details](https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blob_plain;f=doc/DETAILS) for more details.\n\n","h2":null}]}