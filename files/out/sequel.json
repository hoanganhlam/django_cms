{"head":{"title":"Sequel","category":"Ruby libraries"},"body":[{"title":"Open a database","elms":"\n    require 'rubygems'\n    require 'sequel'\n\n    DB = Sequel.sqlite('my_blog.db')\n    DB = Sequel.connect('postgres://user:password@localhost/my_db')\n    DB = Sequel.postgres('my_db', :user => 'user', :password => 'password', :host => 'localhost')\n    DB = Sequel.ado('mydb')\n","h2":null},{"title":"Open an SQLite memory database","elms":"\nWithout a filename argument, the sqlite adapter will setup a new sqlite database in memory.\n\n    DB = Sequel.sqlite\n","h2":null},{"title":"Logging SQL statements","elms":"\n    require 'logger'\n    DB = Sequel.sqlite '', :loggers => [Logger.new($stdout)]\n    # or\n    DB.loggers << Logger.new(...)\n","h2":null},{"title":"Using raw SQL","elms":"\n    DB.run \"CREATE TABLE users (name VARCHAR(255) NOT NULL, age INT(3) NOT NULL)\"\n    dataset = DB[\"SELECT age FROM users WHERE name = ?\", name]\n    dataset.map(:age)\n    DB.fetch(\"SELECT name FROM users\") do |row|\n      p row[:name]\n    end\n","h2":null},{"title":"Create a dataset","elms":"\n    dataset = DB[:items]\n    dataset = DB.from(:items)\n","h2":null},{"title":"Most dataset methods are chainable","elms":"\n    dataset = DB[:managers].where(:salary => 5000..10000).order(:name, :department)\n","h2":null},{"title":"Insert rows","elms":"\n    dataset.insert(:name => 'Sharon', :grade => 50)\n","h2":null},{"title":"Retrieve rows","elms":"\n    dataset.each{|r| p r}\n    dataset.all # => [{...}, {...}, ...]\n    dataset.first # => {...}\n","h2":null},{"title":"Update/Delete rows","elms":"\n    dataset.filter(~:active).delete\n    dataset.filter('price < ?', 100).update(:active => true)\n","h2":null},{"title":"Datasets are Enumerable","elms":"\n    dataset.map{|r| r[:name]}\n    dataset.map(:name) # same as above\n\n    dataset.inject(0){|sum, r| sum + r[:value]}\n    dataset.sum(:value) # same as above\n","h2":null},{"title":"Filtering (see also doc/dataset_filtering.rdoc)","elms":"\n#### Equality\n\n    dataset.filter(:name => 'abc')\n    dataset.filter('name = ?', 'abc')\n\n#### Inequality\n\n    dataset.filter{value > 100}\n    dataset.exclude{value <= 100}\n\n#### Inclusion\n\n    dataset.filter(:value => 50..100)\n    dataset.where{(value >= 50) & (value <= 100)}\n\n    dataset.where('value IN ?', [50,75,100])\n    dataset.where(:value=>[50,75,100])\n\n    dataset.where(:id=>other_dataset.select(:other_id))\n\n#### Subselects as scalar values\n\n    dataset.where('price > (SELECT avg(price) + 100 FROM table)')\n    dataset.filter{price > dataset.select(avg(price) + 100)}\n\n#### LIKE/Regexp\n\n    DB[:items].filter(:name.like('AL%'))\n    DB[:items].filter(:name => /^AL/)\n\n#### AND/OR/NOT\n\n    DB[:items].filter{(x > 5) & (y > 10)}.sql \n    # SELECT * FROM items WHERE ((x > 5) AND (y > 10))\n\n    DB[:items].filter({:x => 1, :y => 2}.sql_or & ~{:z => 3}).sql \n    # SELECT * FROM items WHERE (((x = 1) OR (y = 2)) AND (z != 3))\n\n#### Mathematical operators\n\n    DB[:items].filter((:x + :y) > :z).sql \n    # SELECT * FROM items WHERE ((x + y) > z)\n\n    DB[:items].filter{price - 100 < avg(price)}.sql \n    # SELECT * FROM items WHERE ((price - 100) < avg(price))\n","h2":null},{"title":"Ordering","elms":"\n    dataset.order(:kind)\n    dataset.reverse_order(:kind)\n    dataset.order(:kind.desc, :name)\n","h2":null},{"title":"Limit/Offset","elms":"\n    dataset.limit(30) # LIMIT 30\n    dataset.limit(30, 10) # LIMIT 30 OFFSET 10\n","h2":null},{"title":"Joins","elms":"\n    DB[:items].left_outer_join(:categories, :id => :category_id).sql \n    # SELECT * FROM items LEFT OUTER JOIN categories ON categories.id = items.category_id\n\n    DB[:items].join(:categories, :id => :category_id).join(:groups, :id => :items__group_id) \n    # SELECT * FROM items INNER JOIN categories ON categories.id = items.category_id INNER JOIN groups ON groups.id = items.group_id\n\t","h2":null},{"title":"Aggregate functions methods","elms":"\n    dataset.count #=> record count\n    dataset.max(:price)\n    dataset.min(:price)\n    dataset.avg(:price)\n    dataset.sum(:stock)\n\n    dataset.group_and_count(:category)\n    dataset.group(:category).select(:category, :AVG.sql_function(:price))\n","h2":null},{"title":"SQL Functions / Literals","elms":"\n    dataset.update(:updated_at => :NOW.sql_function)\n    dataset.update(:updated_at => 'NOW()'.lit)\n\n    dataset.update(:updated_at => \"DateValue('1/1/2001')\".lit)\n    dataset.update(:updated_at => :DateValue.sql_function('1/1/2001'))\n","h2":null},{"title":"Schema Manipulation","elms":"\n    DB.create_table :items do\n      primary_key :id\n      String :name, :unique => true, :null => false\n      TrueClass :active, :default => true\n      foreign_key :category_id, :categories\n      DateTime :created_at\n      \n      index :created_at\n    end\n\n    DB.drop_table :items\n\n    DB.create_table :test do\n      String :zipcode\n      enum :system, :elements => ['mac', 'linux', 'windows']\n    end\n","h2":null},{"title":"Aliasing","elms":"\n    DB[:items].select(:name.as(:item_name))\n    DB[:items].select(:name___item_name)\n    DB[:items___items_table].select(:items_table__name___item_name)\n    # SELECT items_table.name AS item_name FROM items AS items_table\n","h2":null},{"title":"Transactions","elms":"\n    DB.transaction do\n      dataset.insert(:first_name => 'Inigo', :last_name => 'Montoya')\n      dataset.insert(:first_name => 'Farm', :last_name => 'Boy')\n    end # Either both are inserted or neither are inserted\n\nDatabase#transaction is re-entrant:\n\n    DB.transaction do # BEGIN issued only here\n      DB.transaction\n        dataset << {:first_name => 'Inigo', :last_name => 'Montoya'}\n      end\n    end # COMMIT issued only here\n\nTransactions are aborted if an error is raised:\n\n    DB.transaction do\n      raise \"some error occurred\"\n    end # ROLLBACK issued and the error is re-raised\n\nTransactions can also be aborted by raising Sequel::Rollback:\n\n    DB.transaction do\n      raise(Sequel::Rollback) if something_bad_happened\n    end # ROLLBACK issued and no error raised\n\nSavepoints can be used if the database supports it:\n\n    DB.transaction do\n      dataset << {:first_name => 'Farm', :last_name => 'Boy'} # Inserted\n      DB.transaction(:savepoint=>true) # This savepoint is rolled back\n        dataset << {:first_name => 'Inigo', :last_name => 'Montoya'} # Not inserted\n        raise(Sequel::Rollback) if something_bad_happened\n      end\n      dataset << {:first_name => 'Prince', :last_name => 'Humperdink'} # Inserted\n    end\n","h2":null},{"title":"Miscellaneous:","elms":"\n    dataset.sql # \"SELECT * FROM items\"\n    dataset.delete_sql # \"DELETE FROM items\"\n    dataset.where(:name => 'sequel').exists # \"EXISTS ( SELECT * FROM items WHERE name = 'sequel' )\"\n    dataset.columns #=> array of columns in the result set, does a SELECT\n    DB.schema(:items) => [[:id, {:type=>:integer, ...}], [:name, {:type=>:string, ...}], ...]\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------\n","h2":null},{"title":"Documents","elms":"\n    http://sequel.rubyforge.org/rdoc/files/doc/association_basics_rdoc.html\n    http://sequel.rubyforge.org/rdoc/classes/Sequel/Schema/Generator.html\n    http://sequel.rubyforge.org/rdoc/files/doc/validations_rdoc.html\n    http://sequel.rubyforge.org/rdoc/classes/Sequel/Model.html\n","h2":null},{"title":"Alter table","elms":"\n    database.alter_table :deals do\n      add_column :name, String\n      drop_column :column_name\n      rename_column :from, :to\n\n      add_constraint :valid_name, :name.like('A%')\n      drop_constraint :constraint\n\n      add_full_text_index :body\n      add_spacial_index [columns]\n\n      add_index :price\n      drop_index :index\n\n      add_foreign_key :artist_id, :table\n      add_primary_key :id\n      add_unique_constraint [columns]\n      set_column_allow_null :foo, false\n      set_column_default :title, ''\n\n      set_column_type :price, 'char(10)'\n    end\n","h2":null},{"title":"Model associations","elms":"\n    class Deal < Sequel::Model\n\n      # Us (left) <=> Them (right)\n      many_to_many  :images,\n        left_id:    :deal_id,\n        right_id:   :image_id,\n        join_table: :image_links\n\n      one_to_many   :files,\n        key:        :deal_id,\n        class:      :DataFile,\n\n      many_to_one   :parent, class: self\n      one_to_many   :children, key: :parent_id, class: self\n\n      one_to_many :gold_albums, class: :Album do |ds|\n        ds.filter { copies_sold > 50000 }\n      end\n\nProvided by many_to_many\n\n    Deal[1].images\n    Deal[1].add_image\n    Deal[1].remove_image\n    Deal[1].remove_all_images\n","h2":null},{"title":"Validations","elms":"\n      def validate\n        super\n        errors.add(:name, 'cannot be empty') if !name || name.empty?\n\n        validates_presence [:title, :site]\n        validates_unique :name\n        validates_format /\\Ahttps?:\\/\\//, :website, :message=>'is not a valid URL'\n        validates_includes %w(a b c), :type\n        validates_integer :rating\n        validates_numeric :number\n        validates_type String, [:title, :description]\n\n        validates_integer :rating  if new?\n\n        # options: :message =>, :allow_nil =>, :allow_blank =>,\n        #          :allow_missing =>,\n\n        validates_exact_length 17, :isbn\n        validates_min_length 3, :name\n        validates_max_length 100, :name\n        validates_length_range 3..100, :name\n        \n        # Setter override\n        def filename=(name)\n          @values[:filename] = name\n        end\n      end\n    end\n\n    deal.errors\n","h2":null},{"title":"Model stuff","elms":"\n    deal = Deal[1]\n    deal.changed_columns\n    deal.destroy  # Calls hooks\n    deal.delete   # No hooks\n    deal.exists?\n    deal.new?\n    deal.hash  # Only uniques\n    deal.keys  #=> [:id, :name]\n    deal.modified!\n    deal.modified?\n\n    deal.lock!\n","h2":null},{"title":"Callbacks","elms":"\n    before_create\n    after_create\n\n    before_validation\n    after_validation\n    before_save\n    before_update\n    UPDATE QUERY\n    after_update\n    after_save\n\n    before_destroy\n    DELETE QUERY\n    after_destroy\n","h2":null},{"title":"Schema","elms":"\n    class Deal < Sequel::Model\n      set_schema do\n        primary_key :id\n        primary_key [:id, :title]\n        String :name, primary_key: true\n        \n        String  :title\n        Numeric :price\n        DateTime :expires\n\n        unique :whatever\n        check(:price) { num > 0 }\n\n        foreign_key :artist_id\n        String :artist_name, key: :id\n\n        index :title\n        index [:artist_id, :name]\n        full_text_index :title\n\n        # String, Integer, Fixnum, Bignum, Float, Numeric, BigDecimal,\n        # Date, DateTime, Time, File, TrueClass, FalseClass\n      end\n    end\n","h2":null},{"title":"Unrestrict primary key","elms":"\n    Category.create id: 'travel'   # error\n    Category.unrestrict_primary_key\n    Category.create id: 'travel'   # ok","h2":null}]}