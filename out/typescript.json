{"head":{"title":"TypeScript","category":"JavaScript libraries"},"body":[{"title":null,"elms":"\n```ts\nany\nvoid\n\nboolean\nnumber\nstring\n\nnull\nundefined\n\nstring[]          /* or Array<string> */\n[string, number]  /* tuple */\n\nstring | null | undefined   /* union */\n\nnever  /* unreachable */\n```\n\n```ts\nenum Color {Red, Green, Blue = 4}\nlet c: Color = Color.Green\n```\n","h2":"Basic types"},{"title":null,"elms":"\n```ts\nlet isDone: boolean\nlet isDone: boolean = false\n```\n\n```ts\nfunction add (a: number, b: number): number {\n  return a + b\n}\n\n// Return type is optional\nfunction add (a: number, b: number) { ... }\n```\n","h2":"Declarations"},{"title":null,"elms":"\n#### Variables\n```ts\nlet len: number = (input as string).length\nlet len: number = (<string> input).length  /* not allowed in JSX */\n```\n\n#### Functions\n```ts\nfunction object(this: {a: number, b: number}, a: number, b: number) {\n  this.a = a;\n  this.b = b;\n  return this;\n}\n\n// this is used only for type declaration\nlet a = object(1,2);\n// a has type {a: number, b: number}\n```\n\n","h2":"Type assertions"},{"title":"Inline","elms":"\n```ts\nfunction printLabel (options: { label: string }) {\n  console.log(options.label)\n}\n\n// Note the semicolon\nfunction getUser (): { name: string; age?: number } {\n}\n```\n","h2":"Interfaces"},{"title":"Explicit","elms":"\n```ts\ninterface LabelOptions {\n  label: string\n}\n\nfunction printLabel(options: LabelOptions) { ... }\n```\n","h2":"Interfaces"},{"title":"Optional properties","elms":"\n```ts\ninterface User {\n  name: string,\n  age?: number\n}\n```\n","h2":"Interfaces"},{"title":"Read only","elms":"\n```ts\ninterface User {\n  readonly name: string\n}\n```\n","h2":"Interfaces"},{"title":"Dynamic keys","elms":"\n```ts\n{\n  [key: string]: Object[]\n}\n```\n","h2":"Interfaces"},{"title":null,"elms":"\n```ts\ntype Name = string | string[]\n```\n","h2":"Type aliases"},{"title":null,"elms":"\n```ts\ninterface User { ... }\n\nfunction getUser(callback: (user: User) => any) { callback({...}) }\n\ngetUser(function (user: User) { ... })\n```\n","h2":"Function types"},{"title":null,"elms":"\n```ts\nclass Point {\n  x: number\n  y: number\n  static instances = 0\n  constructor(x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n}\n```\n\n#### Inheritance\n\n```ts\nclass Point {...}\n\nclass Point3D extends Point {...}\n\ninterface Colored {...}\n\nclass Pixel extends Point implements Colored {...}\n```\n\n#### Short fields initialisation\n\n```ts\nclass Point {\n  static instances = 0;\n  constructor(\n    public x: number,\n    public y: number,\n  ){}\n}\n```\n\n#### Fields which do not require initialisation\n```ts\nclass Point {\n  public someUselessValue!: number;\n  ...\n}\n```\n","h2":"Classes"},{"title":null,"elms":"\n```ts\nclass Greeter<T> {\n  greeting: T\n  constructor(message: T) {\n    this.greeting = message\n  }\n}\n\nlet greeter = new Greeter<string>('Hello, world')\n```\n","h2":"Generics"},{"title":null,"elms":"\n```ts\nexport interface User { ... }\n```\n","h2":"Modules"},{"title":null,"elms":"\n```ts\ninterface Building {\n  room: {\n    door: string,\n    walls: string[],\n  };\n}\n\ntype Walls = Building['room']['walls']; // string[]\n```","h2":"Type extraction"}]}