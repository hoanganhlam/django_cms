{"head":{"title":"ES2015+","category":"JavaScript","layout":"2017/sheet","tags":["Featured"],"updated":"2019-11-14T00:00:00.000Z","weight":-10,"intro":"A quick overview of new JavaScript features in ES2015, ES2016, ES2017, ES2018 and beyond.\n"},"body":[{"title":"Block scoping","elms":"\n#### Let\n\n```js\nfunction fn () {\n  let x = 0\n  if (true) {\n    let x = 1 // only inside this `if`\n  }\n}\n```\n{: data-line=\"2,4\"}\n\n#### Const\n\n```js\nconst a = 1\n```\n\n`let` is the new `var`. Constants work just like `let`, but can't be reassigned.\nSee: [Let and const](https://babeljs.io/learn-es2015/#let--const)\n","h2":null},{"title":"Backtick strings","elms":"\n#### Interpolation\n\n```js\nconst message = `Hello ${name}`\n```\n\n#### Multiline strings\n\n```js\nconst str = `\nhello\nworld\n`\n```\n\nTemplates and multiline strings.\nSee: [Template strings](https://babeljs.io/learn-es2015/#template-strings)\n","h2":null},{"title":"Binary and octal literals","elms":"\n```js\nlet bin = 0b1010010\nlet oct = 0o755\n```\n\nSee: [Binary and octal literals](https://babeljs.io/learn-es2015/#binary-and-octal-literals)\n","h2":null},{"title":"New methods","elms":"\n#### New string methods\n\n```js\n\"hello\".repeat(3)\n\"hello\".includes(\"ll\")\n\"hello\".startsWith(\"he\")\n\"hello\".padStart(8) // \"   hello\"\n\"hello\".padEnd(8) // \"hello   \" \n\"hello\".padEnd(8, '!') // hello!!!\n\"\\u1E9B\\u0323\".normalize(\"NFC\")\n```\n\nSee: [New methods](https://babeljs.io/learn-es2015/#math--number--string--object-apis)\n","h2":null},{"title":"Classes","elms":"\n```js\nclass Circle extends Shape {\n```\n\n#### Constructor\n\n```js\n  constructor (radius) {\n    this.radius = radius\n  }\n```\n{: data-line=\"1\"}\n\n#### Methods\n\n```js\n  getArea () {\n    return Math.PI * 2 * this.radius\n  }\n```\n{: data-line=\"1\"}\n\n#### Calling superclass methods\n\n```js\n  expand (n) {\n    return super.expand(n) * Math.PI\n  }\n```\n{: data-line=\"2\"}\n\n#### Static methods\n\n```js\n  static createFromDiameter(diameter) {\n    return new Circle(diameter / 2)\n  }\n}\n```\n{: data-line=\"1\"}\n\nSyntactic sugar for prototypes.\nSee: [Classes](https://babeljs.io/learn-es2015/#classes)\n","h2":null},{"title":"Exponent operator","elms":"\n```js\nconst byte = 2 ** 8\n// Same as: Math.pow(2, 8)\n```\n{: data-line=\"1\"}\n\nPromises\n--------\n{: .-three-column}\n","h2":null},{"title":"Making promises","elms":"\n```js\nnew Promise((resolve, reject) => {\n  if (ok) { resolve(result) }\n  else { reject(error) }\n})\n```\n{: data-line=\"1\"}\n\nFor asynchronous programming.\nSee: [Promises](https://babeljs.io/learn-es2015/#promises)\n","h2":null},{"title":"Using promises","elms":"\n```js\npromise\n  .then((result) => { ··· })\n  .catch((error) => { ··· })\n```\n{: data-line=\"2,3\"}\n\n","h2":null},{"title":"Using promises with finally","elms":"\n```js\npromise\n  .then((result) => { ··· })\n  .catch((error) => { ··· })\n  .finally(() => { // logic independent of success/error })\n```\n{: data-line=\"4\"}\n\nThe handler is called when the promise is fulfilled or rejected.\n\n","h2":null},{"title":"Promise functions","elms":"\n```js\nPromise.all(···)\nPromise.race(···)\nPromise.reject(···)\nPromise.resolve(···)\n```\n","h2":null},{"title":"Async-await","elms":"\n```js\nasync function run () {\n  const user = await getUser()\n  const tweets = await getTweets(user)\n  return [user, tweets]\n}\n```\n{: data-line=\"2,3\"}\n\n`async` functions are another way of using functions.\n\nSee: [async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n\nDestructuring\n-------------\n{: .-three-column}\n","h2":null},{"title":"Destructuring assignment","elms":"\n#### Arrays\n\n```js\nconst [first, last] = ['Nikola', 'Tesla']\n```\n{: data-line=\"1\"}\n\n#### Objects\n\n```js\nlet {title, author} = {\n  title: 'The Silkworm',\n  author: 'R. Galbraith'\n}\n```\n{: data-line=\"1\"}\n\nSupports for matching arrays and objects.\nSee: [Destructuring](https://babeljs.io/learn-es2015/#destructuring)\n","h2":null},{"title":"Default values","elms":"\n```js\nconst scores = [22, 33]\nconst [math = 50, sci = 50, arts = 50] = scores\n```\n\n```js\n// Result:\n// math === 22, sci === 33, arts === 50\n```\n\nDefault values can be assigned while destructuring arrays or objects.\n","h2":null},{"title":"Function arguments","elms":"\n```js\nfunction greet({ name, greeting }) {\n  console.log(`${greeting}, ${name}!`)\n}\n```\n{: data-line=\"1\"}\n\n```js\ngreet({ name: 'Larry', greeting: 'Ahoy' })\n```\n\nDestructuring of objects and arrays can also be done in function arguments.\n","h2":null},{"title":"Default values","elms":"\n```js\nfunction greet({ name = 'Rauno' } = {}) {\n  console.log(`Hi ${name}!`);\n}\n```\n{: data-line=\"1\"}\n\n```js\ngreet() // Hi Rauno!\ngreet({ name: 'Larry' }) // Hi Larry!\n```\n","h2":null},{"title":"Reassigning keys","elms":"\n```js\nfunction printCoordinates({ left: x, top: y }) {\n  console.log(`x: ${x}, y: ${y}`)\n}\n```\n{: data-line=\"1\"}\n\n```js\nprintCoordinates({ left: 25, top: 90 })\n```\n\nThis example assigns `x` to the value of the `left` key.\n","h2":null},{"title":"Loops","elms":"\n```js\nfor (let {title, artist} of songs) {\n  ···\n}\n```\n{: data-line=\"1\"}\n\nThe assignment expressions work in loops, too.\n\n","h2":null},{"title":"Object destructuring","elms":"\n```js\nconst { id, ...detail } = song;\n```\n{: data-line=\"1\"}\n\nExtract some keys individually and remaining keys in the object using rest (...) operator\n\n\nSpread\n------\n","h2":null},{"title":"Object spread","elms":"\n#### with Object spread\n\n```js\nconst options = {\n  ...defaults,\n  visible: true\n}\n```\n{: data-line=\"2\"}\n\n#### without Object spread\n\n```js\nconst options = Object.assign(\n  {}, defaults,\n  { visible: true })\n```\n\nThe Object spread operator lets you build new objects from other objects.\n\nSee: [Object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator)\n","h2":null},{"title":"Array spread","elms":"\n#### with Array spread\n\n```js\nconst users = [\n  ...admins,\n  ...editors,\n  'rstacruz'\n]\n```\n{: data-line=\"2,3\"}\n\n#### without Array spread\n\n```js\nconst users = admins\n  .concat(editors)\n  .concat([ 'rstacruz' ])\n```\n\nThe spread operator lets you build new arrays in the same way.\n\nSee: [Spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator)\n\nFunctions\n---------\n","h2":null},{"title":"Function arguments","elms":"\n#### Default arguments\n\n```js\nfunction greet (name = 'Jerry') {\n  return `Hello ${name}`\n}\n```\n{: data-line=\"1\"}\n\n#### Rest arguments\n\n```js\nfunction fn(x, ...y) {\n  // y is an Array\n  return x * y.length\n}\n```\n{: data-line=\"1\"}\n\n#### Spread\n\n```js\nfn(...[1, 2, 3])\n// same as fn(1, 2, 3)\n```\n{: data-line=\"1\"}\n\nDefault, rest, spread.\nSee: [Function arguments](https://babeljs.io/learn-es2015/#default--rest--spread)\n","h2":null},{"title":"Fat arrows","elms":"\n#### Fat arrows\n\n```js\nsetTimeout(() => {\n  ···\n})\n```\n{: data-line=\"1\"}\n\n#### With arguments\n\n```js\nreadFile('text.txt', (err, data) => {\n  ...\n})\n```\n{: data-line=\"1\"}\n\n#### Implicit return\n```js\nnumbers.map(n => n * 2)\n// No curly braces = implicit return\n// Same as: numbers.map(function (n) { return n * 2 })\nnumbers.map(n => ({\n  result: n * 2\n}))\n// Implicitly returning objects requires parentheses around the object\n```\n{: data-line=\"1,4,5,6\"}\n\nLike functions but with `this` preserved.\nSee: [Fat arrows](https://babeljs.io/learn-es2015/#arrows-and-lexical-this)\n\nObjects\n-------\n","h2":null},{"title":"Shorthand syntax","elms":"\n```js\nmodule.exports = { hello, bye }\n// Same as: module.exports = { hello: hello, bye: bye }\n```\n\nSee: [Object literal enhancements](https://babeljs.io/learn-es2015/#enhanced-object-literals)\n","h2":null},{"title":"Methods","elms":"\n```js\nconst App = {\n  start () {\n    console.log('running')\n  }\n}\n// Same as: App = { start: function () {···} }\n```\n{: data-line=\"2\"}\n\nSee: [Object literal enhancements](https://babeljs.io/learn-es2015/#enhanced-object-literals)\n","h2":null},{"title":"Getters and setters","elms":"\n```js\nconst App = {\n  get closed () {\n    return this.status === 'closed'\n  },\n  set closed (value) {\n    this.status = value ? 'closed' : 'open'\n  }\n}\n```\n{: data-line=\"2,5\"}\n\nSee: [Object literal enhancements](https://babeljs.io/learn-es2015/#enhanced-object-literals)\n","h2":null},{"title":"Computed property names","elms":"\n```js\nlet event = 'click'\nlet handlers = {\n  [`on${event}`]: true\n}\n// Same as: handlers = { 'onclick': true }\n```\n{: data-line=\"3\"}\n\nSee: [Object literal enhancements](https://babeljs.io/learn-es2015/#enhanced-object-literals)\n\n","h2":null},{"title":"Extract values","elms":"\n```js\nconst fatherJS = { age: 57, name: \"Brendan Eich\" }\n\nObject.values(fatherJS)\n// [57, \"Brendan Eich\"]\nObject.entries(fatherJS)\n// [[\"age\", 57], [\"name\", \"Brendan Eich\"]]\n```\n{: data-line=\"3,5\"}\n\n\nModules\n-------\n","h2":null},{"title":"Imports","elms":"\n```js\nimport 'helpers'\n// aka: require('···')\n```\n\n```js\nimport Express from 'cs/express'\n// aka: const Express = require('···').default || require('···')\n```\n\n```js\nimport { indent } from 'helpers'\n// aka: const indent = require('···').indent\n```\n\n```js\nimport * as Helpers from 'helpers'\n// aka: const Helpers = require('···')\n```\n\n```js\nimport { indentSpaces as indent } from 'helpers'\n// aka: const indent = require('···').indentSpaces\n```\n\n`import` is the new `require()`.\nSee: [Module imports](https://babeljs.io/learn-es2015/#modules)\n","h2":null},{"title":"Exports","elms":"\n```js\nexport default function () { ··· }\n// aka: module.exports.default = ···\n```\n\n```js\nexport function mymethod () { ··· }\n// aka: module.exports.mymethod = ···\n```\n\n```js\nexport const pi = 3.14159\n// aka: module.exports.pi = ···\n```\n\n`export` is the new `module.exports`.\nSee: [Module exports](https://babeljs.io/learn-es2015/#modules)\n\nGenerators\n----------\n","h2":null},{"title":"Generators","elms":"\n```js\nfunction* idMaker () {\n  let id = 0\n  while (true) { yield id++ }\n}\n```\n\n```js\nlet gen = idMaker()\ngen.next().value  // → 0\ngen.next().value  // → 1\ngen.next().value  // → 2\n```\n\nIt's complicated.\nSee: [Generators](https://babeljs.io/learn-es2015/#generators)\n","h2":null},{"title":"For..of iteration","elms":"\n```js\nfor (let i of iterable) {\n  ···\n}\n```\n\nFor iterating through generators and arrays.\nSee: [For..of iteration](https://babeljs.io/learn-es2015/#iterators--forof)","h2":null}]}