{"head":{"title":"Jasmine","category":"JavaScript libraries","layout":"2017/sheet","weight":-1},"body":[{"title":"Writing tests","elms":"\n```js\ndescribe('A suite', () => {\n  it('works', () => {\n    expect(true).toBe(true)\n  })\n})\n```\n\nNote: This cheatsheet may be a little outdated. Also see the [Jest cheatsheet](./jest). Jest uses Jasmine, and therefore has similar API.\n","h2":"Tests"},{"title":"Expectations","elms":"\n```js\nexpect(true).toBe(true)\nexpect(true).not.toBe(true)\n```\n\n```js\nexpect(a).toEqual(bar)\n```\n\n```js\nexpect(message).toMatch(/bar/)\nexpect(message).toMatch('bar')\n```\n\n```js\nexpect(a.foo).toBeDefined()\nexpect(a.foo).toBeUndefined()\nexpect(a.foo).toBeNull()\n```\n\n```js\nexpect(a.foo).toBeTruthy()\nexpect(a.foo).toBeFalsy()\n```\n\n```js\nexpect(message).toContain('hello')\n```\n\n```js\nexpect(pi).toBeGreaterThan(3)\nexpect(pi).toBeLessThan(4)\nexpect(pi).toBeCloseTo(3.1415, 0.1)\n```\n\n```js\nexpect(func).toThrow()\n```\n","h2":"Tests"},{"title":"Hooks","elms":"\n```js\nbeforeEach(() => {\n  ···\n})\n```\n\n```js\nafterEach(() => {\n  ···\n})\n```\n","h2":"Tests"},{"title":"Pending","elms":"\n```js\nxit('this is a pending test', () => {\n  ···\n})\n```\n\n```js\nxdescribe('this is a pending block', () => {\n  ···\n})\n```\n","h2":"Tests"},{"title":"Spies","elms":"\n```js\nspyOn(foo, 'setBar')\nspyOn(foo, 'setBar').andReturn(123)\nspyOn(foo, 'getBar').andCallFake(function() { return 1001; })\nfoo.setBar(123)\n```\n\n```js\nexpect(foo.setBar).toHaveBeenCalled()\nexpect(foo.setBar).toHaveBeenCalledWith(123)\nexpect(foo.setBar.calls.length).toEqual(2)\nexpect(foo.setBar.calls[0].args[0]).toEqual(123)\n```\n","h2":"Tests"},{"title":"Creating spies","elms":"\n```js\nstub = jasmine.createSpy('stub')\nstub('hello')\n```\n\n```js\nexpect(stub.identity).toEqual('stub')\nexpect(stub).toHaveBeenCalled()\n```\n","h2":"Tests"},{"title":"Async","elms":"\n```js\ntest('works with promises', () => {\n  return new Promise((resolve, reject) => {\n    ···\n  })\n})\n```\n\nMake your test return a promise.\n","h2":"Tests"},{"title":"HTML runner","elms":"\n```js\nvar jasmineEnv = jasmine.getEnv()\njasmineEnv.updateInterval = 250\n\nvar htmlReporter = new jasmine.HtmlReporter()\njasmineEnv.addReporter(htmlReporter)\n\n$(function() { jasmineEnv.execute() })\n```\n\nJasmine jQuery\n--------------\n","h2":"Tests"},{"title":"Expectations","elms":"\n```js\nexpect($('#id')).toBe('div')\nexpect($('input[type=checkbox]')).toBeChecked()\nexpect($('input[type=checkbox]')).toBeDisabled()\nexpect($('input[type=checkbox]')).toBeFocused()\nexpect($('#menu ul')).toBeEmpty()\n```\n\n```js\nexpect($('#toolbar')).toBeHidden()\nexpect($('#toolbar')).toBeVisible()\n```\n\n```js\nexpect($('#popup')).toHaveCss({ margin: \"10px\" })\nexpect($('option')).toBeSelected()\n```\n\n```js\nexpect($('.foo')).toExist()\n```\n\n```js\nexpect($('a')).toHaveAttr('rel')\nexpect($('a')).toHaveAttr('rel', 'nofollow')\n```\n\n```js\nexpect($('a')).toHaveClass('rel')\nexpect($('a')).toHaveId('home')\n```\n\n```js\nexpect($('a')).toHaveHtml('<span></span>')\nexpect($('a')).toContainHtml('<span></span>')\nexpect($('a')).toHaveText('hi')\n```\n\n```js\nexpect($form).toHandle('submit') // event\nexpect($form).toHandleWith('submit', onSumbit)\n```\n\nSee: [jasmine-jquery](https://github.com/velesin/jasmine-jquery)\n","h2":"Tests"},{"title":"Event spies","elms":"\n```js\nspyOnEvent($('#some_element'), 'click')\n$('#some_element').click()\nexpect('click').toHaveBeenPreventedOn($('#some_element'))\nexpect('click').toHaveBeenTriggeredOn($('#some_element'))\n```\n","h2":"Tests"},{"title":null,"elms":"{: .-one-column}\n\n* Also see the [Jest cheatsheet](./jest). Jest uses Jasmine, and therefore has similar API.\n* <https://jasmine.github.io>","h2":"References"}]}