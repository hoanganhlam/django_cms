{"head":{"title":"bluebird.js","category":"JavaScript libraries","layout":"2017/sheet","weight":-1,"updated":"2017-09-08T00:00:00.000Z"},"body":[{"title":"Also see","elms":"\nAlso see the [promise cheatsheet](promise.html) and [Bluebird.js API](https://github.com/petkaantonov/bluebird/blob/master/API.md) (github.com).\n","h2":null},{"title":"Example","elms":"\n```js\npromise\n  .then(okFn, errFn)\n  .spread(okFn, errFn)        // *\n  .catch(errFn)\n  .catch(TypeError, errFn)    // *\n  .finally(fn)\n  .map(function (e) { ··· })  // *\n  .each(function (e) { ··· }) // *\n```\n\nThose marked with `*` are non-standard Promise API that only work with Bluebird promises.\n","h2":null},{"title":"Multiple return values","elms":"\n```js\n.then(function () {\n  return [ 'abc', 'def' ]\n})\n.spread(function (abc, def) {\n  ···\n})\n```\n{: data-line=\"4\"}\n\nUse [Promise.spread](http://bluebirdjs.com/docs/api/promise.spread.html)\n","h2":null},{"title":"Multiple promises","elms":"\n```js\nPromise.join(\n  getPictures(),\n  getMessages(),\n  getTweets(),\n  function (pics, msgs, tweets) {\n    return ···\n  }\n)\n```\n{: data-line=\"1\"}\n\nUse [Promise.join](http://bluebirdjs.com/docs/api/promise.join.html)\n","h2":null},{"title":"Multiple promises (array)","elms":"\n- [Promise.all](http://bluebirdjs.com/docs/api/promise.all.html)([p]) - expect all to pass\n- [Promise.some](http://bluebirdjs.com/docs/api/promise.some.html)([p], count) - expect `count` to pass\n- [Promise.any](http://bluebirdjs.com/docs/api/promise.any.html)([p]) - same as `some([p], 1)`\n- [Promise.race](http://bluebirdjs.com/docs/api/promise.race.html)([p], count) - use `.any` instead\n- [Promise.map](http://bluebirdjs.com/docs/api/promise.map.html)([p], fn, options) - supports concurrency\n\n```js\nPromise.all([ promise1, promise2 ])\n  .then(results => {\n    results[0]\n    results[1]\n  })\n\n// succeeds if one succeeds first\nPromise.any(promises)\n  .then(results => {\n  })\n```\n{: data-line=\"1,8\"}\n\n```js\nPromise.map(urls, url => fetch(url))\n  .then(···)\n```\n{: data-line=\"1\"}\n\nUse [Promise.map](http://bluebirdjs.com/docs/api/promise.map.html) to \"promisify\" a list of values.\n","h2":null},{"title":"Object","elms":"\n```js\nPromise.props({\n  photos: get('photos'),\n  posts: get('posts')\n})\n.then(res => {\n  res.photos\n  res.posts\n})\n```\n{: data-line=\"1\"}\n\nUse [Promise.props](http://bluebirdjs.com/docs/api/promise.props.html).\n","h2":null},{"title":"Chain of promises","elms":"\n```js\nfunction getPhotos() {\n  return Promise.try(() => {\n    if (err) throw new Error(\"boo\")\n    return result\n  })\n}\n\ngetPhotos().then(···)\n```\n{: data-line=\"2\"}\n\nUse [Promise.try](http://bluebirdjs.com/docs/api/promise.try.html).\n","h2":null},{"title":"Node-style functions","elms":"\n```js\nvar readFile = Promise.promisify(fs.readFile)\nvar fs = Promise.promisifyAll(require('fs'))\n```\n{: data-line=\"2\"}\n\nSee [Promisification](http://bluebirdjs.com/docs/api/promisification.html).\n","h2":null},{"title":"Promise-returning methods","elms":"\n```js\nUser.login = Promise.method((email, password) => {\n  if (!valid)\n    throw new Error(\"Email not valid\")\n\n  return /* promise */\n})\n```\n{: data-line=\"1\"}\n\nSee [Promise.method](http://bluebirdjs.com/docs/api/promise.method.html).\n","h2":null},{"title":"Generators","elms":"\n```js\nUser.login = Promise.coroutine(function* (email, password) {\n  let user = yield User.find({email: email}).fetch()\n  return user\n})\n```\n{: data-line=\"1\"}\n\nSee [Promise.coroutine](http://bluebirdjs.com/docs/api/promise.coroutine.html).\n","h2":null},{"title":null,"elms":"\n<http://bluebirdjs.com/docs/api-reference.html>","h2":"Reference"}]}