{"head":{"title":101,"category":"JavaScript libraries","layout":"2017/sheet","updated":"2017-09-21T00:00:00.000Z","intro":"[101](https://www.npmjs.com/package/101) is a JavaScript library for dealing with immutable data in a functional manner.\n"},"body":[{"title":"Usage","elms":"\n```js\nconst isObject = require('101/isObject')\nisObject({}) // → true\n```\n\nEvery function is exposed as a module.\n\nSee: [101](https://github.com/tjmehta/101)\n","h2":null},{"title":"Type checking","elms":"\n```js\nisObject({})\nisString('str')\nisRegExp(/regexp/)\nisBoolean(true)\nisEmpty({})\nisfunction(x => x)\nisInteger(10)\nisNumber(10.1)\ninstanceOf(obj, 'string')\n```\n","h2":null},{"title":null,"elms":"{: .-three-column}\n","h2":"Objects"},{"title":"Example","elms":"{: .-prime}\n\n```js\nlet obj = {}\n```\n\n#### Update\n\n```js\nobj = put(obj, 'user.name', 'John')\n// → { user: { name: 'John' } }\n```\n\n#### Read\n\n```js\npluck(name, 'user.name')\n// → 'John'\n```\n\n#### Delete\n\n```js\nobj = del(obj, 'user')\n// → { }\n```\n","h2":"Objects"},{"title":"Getting","elms":"\n```js\npluck(state, 'user.profile.name')\n```\n\n```js\npick(state, ['user', 'ui'])\npick(state, /^_/)\n```\n\n`pluck` returns values, `pick` returns subsets of objects.\n\nSee:\n[pluck](https://github.com/tjmehta/101#pluck),\n[pick](https://github.com/tjmehta/101#pick)\n","h2":"Objects"},{"title":"Setting","elms":"\n```js\nput(state, 'user.profile.name', 'john')\n```\n\nSee:\n[put](https://github.com/tjmehta/101#put)\n","h2":"Objects"},{"title":"Deleting","elms":"\n```js\ndel(state, 'user.profile')\nomit(state, ['user', 'data'])\n```\n\n`omit` is like `del`, but supports multiple keys to be deleted.\n\nSee:\n[omit](https://github.com/tjmehta/101#omit),\n[del](https://github.com/tjmehta/101#del)\n","h2":"Objects"},{"title":"Keypath check","elms":"\n```js\nhasKeypaths(state, ['user'])\nhasKeypaths(state, { 'user.profile.name': 'john' })\n```\n\nSee:\n[hasKeypaths](https://github.com/tjmehta/101#haskeypaths)\n","h2":"Objects"},{"title":"Get values","elms":"\n```js\nvalues(state)\n```\n","h2":"Objects"},{"title":"Simple functions","elms":"\n| `and(x, y)` | `x && y` |\n| `or(x, y)` | `x || y` |\n| `xor(x, y)` | `!(!x && !y) && !(x && y)` |\n| `equals(x, y)` | `x === y` |\n| `exists(x)` | `!!x` |\n| `not(x)` | `!x` |\n\nUseful for function composition.\n\nSee:\n[and](https://github.com/tjmehta/101#and),\n[equals](https://github.com/tjmehta/101#equals),\n[exists](https://github.com/tjmehta/101#exists)\n","h2":"Functions"},{"title":"Composition","elms":"\n```js\ncompose(f, g)       // x => f(g(x))\ncurry(f)            // x => y => f(x, y)\nflip(f)             // f(x, y) --> f(y, x)\n```\n\nSee:\n[compose](https://github.com/tjmehta/101#compose),\n[curry](https://github.com/tjmehta/101#curry),\n[flip](https://github.com/tjmehta/101#flip)\n","h2":"Functions"},{"title":"And/or","elms":"\n```js\npassAll(f, g)       // x => f(x) && g(x)\npassAny(f, g)       // x => f(x) || g(x)\n```\n\nSee:\n[passAll](https://github.com/tjmehta/101#passall),\n[passAny](https://github.com/tjmehta/101#passany)\n","h2":"Functions"},{"title":"Converge","elms":"\n```js\nconverge(and, [pluck('a'), pluck('b')])(x)\n```\n\n```js\n// → and(pluck(x, 'a'), pluck(x, 'b'))\n```\n\nSee:\n[converge](https://github.com/tjmehta/101#converge)\n","h2":"Functions"},{"title":"Finding","elms":"\n```js\nfind(list, x => x.y === 2)\nfindIndex(list, x => ...)\nincludes(list, 'item')\nlast(list)\n```\n\n```js\nfind(list, hasProps('id'))\n```\n","h2":"Arrays"},{"title":"Grouping","elms":"\n```js\ngroupBy(list, 'id')\nindexBy(list, 'id')\n```\n","h2":"Arrays"},{"title":"Function composition","elms":"\n```js\nisFloat = passAll(isNumber, compose(isInteger, not))\n// n => isNumber(n) && not(isInteger(n))\n```\n\n```js\nfunction doStuff (object, options) { ... }\n\ndoStuffForce = curry(flip(doStuff))({ force: true })\n```\n","h2":"Examples"},{"title":null,"elms":"\n- <https://github.com/tjmehta/101>","h2":"Reference"}]}