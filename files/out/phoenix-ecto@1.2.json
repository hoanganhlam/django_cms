{"head":{"title":"Phoenix: Ecto models","category":"Elixir","deprecated":true},"body":[{"title":null,"elms":"\n```\n$ mix phoenix.gen.html Profile profiles email:string age:integer\n$ mix phoenix.gen.html User users email:string hashed_password:string\n```\n","h2":"Generating"},{"title":null,"elms":"\n```elixir\ndefmodule User do\n  use Ecto.Schema\n\n  schema \"users\" do\n    field :name\n    field :age, :integer\n    # :id :binary :integer :float :boolean :string :binary\n    # {:array, inner_type} :decimal :map\n\n    field :password, virtual: true\n  end\nend\n```\n","h2":"Schema"},{"title":null,"elms":"\n```elixir\ndef changeset(user, params \\\\ :empty) do\n  %User{}\n  |> Ecto.Changeset.change   # basic casting to changeset\n\n  user\n  |> cast(params, ~w(name email), ~w(age)) # params to Changeset\n\n  |> validate_format(:email, ~r/@/)\n\n  |> validate_inclusion(:age, 18..100)\n  |> validate_exclusion(:role, ~w(admin superadmin))\n  |> validate_subset(:pets, ~w(cat dog parrot whale))\n\n  |> validate_length(:body, min: 1)\n  |> validate_length(:body, min: 1, max: 160)\n  |> validate_length(:partners, is: 2)\n\n  |> validate_number(:pi, greater_than: 3)\n  |> validate_number(:pi, less_than: 4)\n  |> validate_number(:pi, equal_to: 42)\n\n  |> validate_change(:title, fn _, _ -> [])\n  |> validate_confirmation(:password, message: \"does not match\")\n\n  |> unique_constraint(:email)\n  |> foreign_key_constraint(:post_id)\n  |> assoc_constraint(:post)      # ensure post_id exists\n  |> no_assoc_constraint(:post)   # negative (useful for deletions)\nend\n```\n\n```elixir\nchangeset.valid?\nchangeset.errors     #=> [title: \"empty\"]\n\nchangeset.changes    #=> %{}\nchangeset.params[:title]\n\nchangeset.required   #=> [:title]\nchangeset.optional   #=> [:body]\n```\n","h2":"Changesets"},{"title":"Updating","elms":"\n```elixir\nchangeset #(or model)\n|> change(title: \"New title\")\n|> change(%{ title: \"New title\" })\n|> put_change(:title, \"New title\")\n|> force_change(:title, \"New title\")\n|> update_change(:title, &(&1 <> \"...\"))\n\n|> delete_change(:title)\n|> merge(other_changeset)\n\n|> add_error(:title, \"empty\")\n```\n","h2":"Changesets"},{"title":"Getting","elms":"\n```elixir\nget_change(changeset, :title)    #=> \"hi\" (if changed)\nget_field(changeset, :title)     #=> \"hi\" (even if unchanged)\n\nfetch_change(changeset, :title)  #=> {:ok, \"hi\"} | :error\nfetch_field(changeset, :title)   #=> {:changes | :model, \"value\"} | :error\n```\n","h2":"Changesets"},{"title":"Get one","elms":"\n```elixir\nRepo.get(User, id)\nRepo.get_by(User, email: \"john@hello.com\")  #=> %User{} | nil\n\n# also get! get_by!\n```\n","h2":"Ecto"},{"title":"Create/update","elms":"\n```elixir\nchangeset |> Repo.update\nchangeset |> Repo.insert\nchangeset |> Repo.insert_or_update\n```\n\n```\nUser\n|> Ecto.Changeset.change(%{name: \"hi\"})\n|> Repo.insert\n```\n","h2":"Ecto"},{"title":"Queries","elms":"\n```elixir\nfrom p in Post,\n  where: p.title == \"Hello\",\n  where: [state: \"Sweden\"],\n\n  limit: 1,\n  offset: 10,\n\n  order_by: c.name,\n  order_by: [c.name, c.title],\n  order_by: [asc: c.name, desc: c.title],\n\n  preload: [:comments],\n  preload: [comments: {c, likes: l}],\n\n  join: c in assoc(c, :comments),\n  join: p in Post, on: c.post_id == p.id,\n  group_by: p,\n\n  select: p,\n  select: {p.title, p.description},\n  select: [p.title, p.description],\n```\n","h2":"Many"},{"title":"Get many","elms":"\n```elixir\nRepo.all(User)\n```\n","h2":"Many"},{"title":"Update many","elms":"\n```elixir\nRepo.update_all(Post, set: [title: \"Title\"])\nRepo.update_all(Post, inc: [views: 1])\n```\n","h2":"Many"},{"title":"Chaining `_all` with queries","elms":"\n```elixir\nfrom(p in Post, where: p.id < 10)\n|> Repo.update_all(...)\n\nfrom(p in Post, where: p.id < 10)\n|> Repo.all()\n```","h2":"Many"}]}