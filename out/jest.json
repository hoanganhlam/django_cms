{"head":{"title":"Jest","category":"JavaScript libraries","layout":"2017/sheet","updated":"2020-06-17T00:00:00.000Z","weight":-3,"tags":["Featurable"],"intro":"A quick overview to [Jest](https://facebook.github.io/jest/), a test framework for Node.js. This guide targets Jest v20.\n"},"body":[{"title":"Quick start","elms":"{: .-prime}\n\n```bash\nnpm install --save-dev jest babel-jest\n```\n{: data-line=\"1\"}\n\n```js\n/* Add to package.json */\n\"scripts\": {\n  \"test\": \"jest\"\n}\n```\n\n```bash\n# Run your tests\nnpm test -- --watch\n```\n\nSee: [Getting started](http://facebook.github.io/jest/docs/en/getting-started.html)\n","h2":null},{"title":"Writing tests","elms":"\n```js\ndescribe('My work', () => {\n  test('works', () => {\n    expect(2).toEqual(2)\n  })\n})\n```\n\nSee: [describe()](http://facebook.github.io/jest/docs/en/api.html#describename-fn), [test()](http://facebook.github.io/jest/docs/en/api.html#testname-fn), [expect()](http://facebook.github.io/jest/docs/en/expect.html#content)\n","h2":null},{"title":"BDD syntax","elms":"\n```js\ndescribe('My work', () => {\n  it('works', () => {\n    ···\n  })\n})\n```\n\n`it` is an alias for `test`.\nSee: [test()](http://facebook.github.io/jest/docs/en/api.html#testname-fn)\n","h2":null},{"title":"Setup","elms":"\n```js\nbeforeEach(() => { ... })\nafterEach(() => { ... })\n```\n\n```js\nbeforeAll(() => { ... })\nafterAll(() => { ... })\n```\n\nSee: [afterAll() and more](http://facebook.github.io/jest/docs/en/api.html#afterallfn)\n","h2":null},{"title":"Focusing tests","elms":"\n```js\ndescribe.only(···)\nit.only(···) // alias: fit()\n```\n\nSee: [test.only](http://facebook.github.io/jest/docs/en/api.html#testonlyname-fn)\n\n","h2":null},{"title":"Skipping tests","elms":"\n```js\ndescribe.skip(···)\nit.skip(···) // alias: xit()\n```\n\nSee: [test.skip](http://facebook.github.io/jest/docs/en/api.html#testskipname-fn)\n\n","h2":null},{"title":"Optional flags","elms":"\n| Flag                  | Description                              |\n| --------------------- | ---------------------------------------- |\n| `--coverage`          | See a summary of test coverage           |\n| `--detectOpenHandles` | See a summary of ports that didn't close |\n| `--runInBand`         | Run all tests one after the other        |\n\nExpect\n------\n{: .-three-column}\n","h2":null},{"title":"Basic expectations","elms":"\n```js\nexpect(value)\n  .not\n  .toBe(value)\n  .toEqual(value)\n  .toBeTruthy()\n```\n\nNote that `toEqual` is a deep equality check.\nSee: [expect()](http://facebook.github.io/jest/docs/en/expect.html#expectvalue)\n","h2":null},{"title":"Snapshots","elms":"\n```js\nexpect(value)\n  .toMatchSnapshot()\n  .toMatchInlineSnapshot()\n```\n\nNote that `toMatchInlineSnapshot()` requires Prettier to be set up for the project.\nSee: [Inline snapshots](https://jestjs.io/docs/en/snapshot-testing#inline-snapshots)\n","h2":null},{"title":"Errors","elms":"\n```js\nexpect(value)\n  .toThrow(error)\n  .toThrowErrorMatchingSnapshot()\n```\n","h2":null},{"title":"Booleans","elms":"\n```js\nexpect(value)\n  .toBeFalsy()\n  .toBeNull()\n  .toBeTruthy()\n  .toBeUndefined()\n  .toBeDefined()\n```\n","h2":null},{"title":"Numbers","elms":"\n```js\nexpect(value)\n  .toBeCloseTo(number, numDigits)\n  .toBeGreaterThan(number)\n  .toBeGreaterThanOrEqual(number)\n  .toBeLessThan(number)\n  .toBeLessThanOrEqual(number)\n```\n","h2":null},{"title":"Objects","elms":"\n```js\nexpect(value)\n  .toBeInstanceOf(Class)\n  .toMatchObject(object)\n  .toHaveProperty(keyPath, value)\n```\n","h2":null},{"title":"Objects","elms":"\n```js\nexpect(value)\n  .toContain(item)\n  .toContainEqual(item)\n  .toHaveLength(number)\n```\n","h2":null},{"title":"Strings","elms":"\n```js\nexpect(value)\n  .toMatch(regexpOrString)\n```\n","h2":null},{"title":"Others","elms":"\n```js\nexpect.extend(matchers)\nexpect.any(constructor)\nexpect.addSnapshotSerializer(serializer)\n\nexpect.assertions(1)\n```\n\nMore features\n-------------\n","h2":null},{"title":"Asynchronous tests","elms":"\n```js\ntest('works with promises', () => {\n  return new Promise((resolve, reject) => {\n    ···\n  })\n})\n```\n{: data-line=\"2\"}\n\n```js\ntest('works with async/await', async () => {\n  const hello = await foo()\n  ···\n})\n```\n{: data-line=\"2\"}\n\nReturn promises, or use async/await.\nSee: [Async tutorial](http://facebook.github.io/jest/docs/en/tutorial-async.html)\n","h2":null},{"title":"Snapshots","elms":"\n```jsx\nit('works', () => {\n  const output = something()\n  expect(output).toMatchSnapshot()\n})\n```\n{: data-line=\"3\"}\n\nFirst run creates a snapshot. Subsequent runs match the saved snapshot.\nSee: [Snapshot testing](http://facebook.github.io/jest/docs/en/snapshot-testing.html)\n","h2":null},{"title":"React test renderer","elms":"\n```jsx\nimport renderer from 'react-test-renderer'\n```\n{: .-setup}\n\n```jsx\nit('works', () => {\n  const tree = renderer.create(\n    <Link page=\"http://www.facebook.com\">Facebook</Link>\n  ).toJSON()\n\n  expect(tree).toMatchSnapshot()\n})\n```\n{: data-line=\"2,3,4\"}\n\nReact's test renderer can be used for Jest snapshots.\nSee: [Snapshot test](http://facebook.github.io/jest/docs/en/tutorial-react-native.html#snapshot-test)\n","h2":null},{"title":"Timers","elms":"\n```js\njest.useFakeTimers()\n```\n\n```js\nit('works', () => {\n  jest.runOnlyPendingTimers()\n  jest.runTimersToTime(1000)\n  jest.runAllTimers()\n})\n```\n\nSee: [Timer Mocks](http://facebook.github.io/jest/docs/en/timer-mocks.html)\n","h2":null},{"title":"Mock functions","elms":"\n```js\nconst fn = jest.fn()\n```\n\n```js\nconst fn = jest.fn(n => n * n)\n```\n\nSee: [Mock functions](http://facebook.github.io/jest/docs/en/mock-functions.html#using-a-mock-function)\n","h2":"Mock functions"},{"title":"Assertions","elms":"\n```js\nexpect(fn)\n  .toHaveBeenCalled()\n  .toHaveBeenCalledTimes(number)\n  .toHaveBeenCalledWith(arg1, arg2, ...)\n  .toHaveBeenLastCalledWith(arg1, arg2, ...)\n```\n\n```js\nexpect(fn)\n  .toHaveBeenCalledWith(expect.anything())\n  .toHaveBeenCalledWith(expect.any(constructor))\n  .toHaveBeenCalledWith(expect.arrayContaining([ values ]))\n  .toHaveBeenCalledWith(expect.objectContaining({ props }))\n  .toHaveBeenCalledWith(expect.stringContaining(string))\n  .toHaveBeenCalledWith(expect.stringMatching(regexp))\n```\n","h2":"Mock functions"},{"title":"Instances","elms":"\n```js\nconst Fn = jest.fn()\n\na = new Fn()\nb = new Fn()\n```\n\n```js\nFn.mock.instances\n// → [a, b]\n```\n{: data-line=\"1\"}\n\nSee: [.mock property](http://facebook.github.io/jest/docs/en/mock-functions.html#mock-property)\n","h2":"Mock functions"},{"title":"Calls","elms":"\n```js\nconst fn = jest.fn()\nfn(123)\nfn(456)\n```\n\n```js\nfn.mock.calls.length   // → 2\nfn.mock.calls[0][0]    // → 123\nfn.mock.calls[1][0]    // → 456\n```\n{: data-line=\"1,2,3\"}\n\nSee: [.mock property](http://facebook.github.io/jest/docs/en/mock-functions.html#mock-property)\n","h2":"Mock functions"},{"title":"Return values","elms":"\n```js\nconst fn = jest.fn(() => 'hello')\n```\n\n#### or:\n\n```js\njest.fn().mockReturnValue('hello')\njest.fn().mockReturnValueOnce('hello')\n```\n","h2":"Mock functions"},{"title":"Mock implementations","elms":"\n```js\nconst fn = jest.fn()\n  .mockImplementationOnce(() => 1)\n  .mockImplementationOnce(() => 2)\n```\n{: data-line=\"2,3\"}\n\n```js\nfn()    // → 1\nfn()    // → 2\n```\n","h2":"Mock functions"},{"title":null,"elms":"{: .-one-column}\n\n- <http://facebook.github.io/jest/>\n{: .-also-see}","h2":"References"}]}