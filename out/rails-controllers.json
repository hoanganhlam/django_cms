{"head":{"title":"Controllers","category":"Rails"},"body":[{"title":"Common stuff","elms":"\n    redirect_to root_url\n    redirect_to root_url, notice: \"Good.\"\n","h2":null},{"title":"Special hashes","elms":"\n    session[:user_id] = nil\n\n    flash[:notice] = \"Hello\"    # Gets flushed on next request\n    flash.keep                  # Persist flash values\n    flash.now[:error] = \"Boo\"   # Available on the same request\n\n    cookies[:hello] = \"Hi\"\n\n    params[:page]\n\n    # params is a combination of:\n    query_parameters\n    path_parameters\n    request_parameters\n","h2":null},{"title":"respond_to","elms":"\n    respond_to do |format|\n      format.html\n      format.xml  { render xml: @users }\n      format.json { render json: @users }\n      format.js    # Will be executed by the browser\n    end\n","h2":null},{"title":"default_url_options","elms":"\n    # The options parameter is the hash passed in to 'url_for'\n    def default_url_options(options)\n      {:locale => I18n.locale}\n    end\n","h2":null},{"title":"Filters","elms":"\n    # Filter with callbacks\n    before_filter :authenticate\n    before_filter :authenticate, except: [:login]\n    before_filter :authenticate, only: [:login]\n    def authenticate\n      redirect_to login_url unless controller.logged_in?\n    end\n\n    # Filter with inline\n    before_filter do |controller|\n      redirect_to login_url unless controller.logged_in?\n    end\n\n    # Filter with external classes\n    before_filter LoginFilter\n    class LoginFilter\n      def self.filter(controller) ...; end\n    end\n\n    # Filter exceptions\n    skip_before_filter :require_login, only: [:new, :create]\n\n    # Before/after filters\n    around_filter :wrap_in_transaction\n    def wrap_in_transaction(&blk)\n      ActiveRecord::Base.transaction { yield }\n    end\n","h2":null},{"title":"HTTP basic authentication","elms":"\n    before_filter :authenticate\n\n    # Basic authentication:\n    def authenticate\n      authenticate_or_request_with_http_basic { |u, p|\n        u == \"root\" && p == \"alpine\"\n      }\n    end\n\n    # ...or digest (hashed) authentication:\n    # uses the ha1 hash (username:realm:password)\n    def authenticate_by_digest\n      realm = \"Secret3000\"\n      users = {\n        \"rsc\" => Digest::MD5.hexdigest(\"rsc:#{realm}:passwordhere\")\n      }\n\n      authenticate_or_request_with_http_digest(realm) { |user|\n        users[user]\n      }\n    end\n\n    # For integration tests\n    def test_access\n      auth = ActionController::HttpAuthentication::Basic.encode_credentials(user, pass)\n      get \"/notes/1.xml\", nil, 'HTTP_AUTHORIZATION' => auth\n    end\n\n    # Token auth\n    is_logged_in = authenticate_with_http_token do |token, options|\n      token == our_secret_token\n    end\n\n    request_http_token_authentication  unless is_logged_in\n","h2":null},{"title":"Request/response","elms":"\n    request.host            #=> \"www.example.com\"\n    request.domain          #=> \"www.example.com\"\n    request.domain(n=2)     #=> \"example.com\"\n    request.port            #=> 80\n    request.protocol        #=> \"http://\"\n    request.query_string    #=> \"q=duck+tales\"\n    request.url             #=> \"http://www.example.com/search?q=duck+tales\"\n    request.fullpath        #=> \"/search?q=duck+tales\"\n\n    request.headers         # Returns a hash\n\n    request.format          #=> \"text/html\"\n    request.remote_ip       #=> \"203.167.220.220\"\n    request.local?          #=> true (if localhost/127.0.0.1)\n\n    request.xhr?\n\n    request.method          #=> \"POST\"\n    request.method_symbol   #=> :post\n    request.get?\n    request.post?\n    request.put?\n    request.delete?\n    request.head?\n","h2":null},{"title":"response","elms":"\n    response.body\n    response.status         #=> 404\n    response.location       # Redirect location\n    response.content_type\n    response.charset\n    response.headers\n\n    response.headers[\"Content-Type\"] = \"application/pdf\"\n","h2":null},{"title":"Streaming","elms":"\n    send_data pdfdata, filename: \"foo.pdf\", type: \"application/pdf\"\n    send_file Rails.root.join('public','filename.txt') [filename: '..', type: '..']\n","h2":null},{"title":"References","elms":"\n * [Guide](http://guides.rubyonrails.org/action_controller_overview.html)\n * [HttpAuthentication::Basic](http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic.html)\n * [HttpAuthentication::Token](http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Token.html)","h2":null}]}