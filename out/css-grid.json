{"head":{"title":"CSS Grid","category":"CSS","updated":"2019-08-23T00:00:00.000Z","layout":"2017/sheet","prism_languages":["css"]},"body":[{"title":"Container","elms":"\n```css\n.grid-container {\n```\n{: .-setup}\n\n```css\n  /* Display properties */\n  display: grid;\n  display: inline-grid;\n  display: subgrid;\n```\n\n```css\n  /* Columns and rows */\n  grid-template-columns: 1rem 2rem 1rem; /* Measurement units */\n  grid-template-columns: 25% 50% 25%; /* Percentage units */\n  grid-template-columns: 1rem auto 1rem 2fr; /* Fill remaining widths with auto or fr units */\n  grid-template-columns: repeat(12, 1fr); /* Repeat columns without needing to write them */\n  \n  grid-template-rows: 1rem 10% auto repeat(5, 10px); /* Mix any group, same rules work for rows */\n```\n\n```css\n  /* Automatic columns and rows */\n\n  grid-auto-columns: 10px; /* No matter how many columns of content end up in the grid, each column will be this same width */\n  grid-auto-rows: 1rem; /* No matter how many rows of content end up in the grid, each row will be this same height */\n```\n\n```css\n  /* Areas */\n  grid-template-areas:\n    \"header header\"\n    \"main aside\"\n    \"footer footer\"; /* Grid-style */\n\n  grid-template-areas: \"header header\" \"main aside\" \"footer footer\"; /* Inline-style */\n```\n\n```css\n  /* Template shorthand */\n  grid-template:\n    \"header header\" auto\n    \"main aside\" 100vh\n    \"footer footer\" 10rem\n    / 80% 20%;\n\n  /* The above is the same as below long-hand */\n  grid-template-columns: 80% 20%;\n  grid-template-rows: auto 100vh 10rem;\n  grid-template-areas:\n    \"header header\"\n    \"main aside\"\n    \"footer footer\";\n```\n\n```css\n  /* Gaps */\n  grid-row-gap: 1rem;\n  grid-column-gap: 0.5rem; /* Define values separately */\n\n  grid-gap: 1rem 0.5rem; /* Short-hand for row / column */\n  grid-gap: 1rem; /* Gap in both dimensions */\n```\n\n```css\n  /* Item justification (horizontal or column alignment) */\n  justify-items: start; /* Align items to the left */\n  justify-items: center; /* Align items centered within its column */\n  justify-items: end; /* Align items to the right */\n  justify-items: stretch; /* (default) Fills available area (horizontally) */\n```\n\n```css\n  /* Item alignment (vertical or row alignment) */\n  align-items: start; /* Align items to the top */\n  align-items: center; /* Align items centered within its row */\n  align-items: end; /* Align items to the bottom */\n  align-items: stretch; /* (default) Fills available area (vertically) */\n```\n\n```css\n  /* Place item shorthand */\n  place-items: start stretch;\n\n  /* The above is the same as below long-hand */\n  align-items: start;\n  justify-items: stretch;\n```\n\n```css\n  /* Content justification (horizontal or column alignment) */\n  justify-content: start; /* Align content to the left */\n  justify-content: center; /* Align content centered horizontally within the grid */\n  justify-content: end; /* Align content to the right */\n  justify-content: stretch; /* (default) Fills available area (horizontally) */\n\n  justify-content: space-around; /* Chooses a space for both sides of the columns like a left and right margin */\n  justify-content: space-between; /* Chooses a space to go between columns, no margins on outside of content */\n  justify-content: space-evenly; /* Chooses a space that goes between all columns and edges consistently */\n```\n\n```css\n  /* Content alignment (horizontal or column alignment) */\n  align-content: start; /* Align content to the top */\n  align-content: center; /* Align content centered vertically within the grid */\n  align-content: end; /* Align content to the bottom */\n  align-content: stretch; /* (default) Fills available area (vertically) */\n\n  align-content: space-around; /* Chooses a space for the top and bottom of the rows like a top and bottom margin */\n  align-content: space-between; /* Chooses a space to go between rows, no margins on outside of content */\n  align-content: space-evenly; /* Chooses a space that goes between all rows and edges consistently */\n```\n\n```css\n  /* Place item shorthand */\n  place-content: center start;\n\n  /* The above is the same as below long-hand */\n  align-content: center;\n  justify-content: start;\n```\n\n```css\n  /* Automatic grid positioning */\n\n  grid-auto-flow: row; /* Left-to-right rows, then top-to-bottom*/\n  grid-auto-flow: column; /* Top-to-bottom columns, then left-to-right */\n  grid-auto-flow: dense; /* Responds with best-guess on left-to-right, top-to-bottom order with advanced layouts */\n```\n\n```css\n  /* There is one final shorthand for all container properties in one */\n\n  /* Explicit grid columns, rows, and areas */\n  grid:\n    \"header header\" auto\n    \"main aside\" 100vh\n    \"footer footer\" 10rem\n    / 80% 20%; /* You can include a template as the only value, which is equivalent to below */\n  grid-template:\n    \"header header\" auto\n    \"main aside\" 100vh\n    \"footer footer\" 10rem\n    / 80% 20%; /* Which is again equivalent to below */\n  grid-template-columns: 80% 20%;\n  grid-template-rows: auto 100vh 10rem;\n  grid-template-areas:\n    \"header header\"\n    \"main aside\"\n    \"footer footer\";\n\n  /* Automatic grid flows */\n  grid: 1rem / auto-flow dense 1fr; /* You can include rows, a flow, and automatic columns, which is equivalent to below */\n  grid-template-rows: 1rem;\n  grid-auto-flow: dense;\n  grid-auto-columns: 1fr;\n\n  grid: auto-flow dense 1rem / repeat(10, 10%); /* Conversely, you can do the same thing with automatic rows, and defined columns */\n  grid-auto-flow: dense;\n  grid-auto-rows: 1rem;\n  grid-template-columns: repeat(10, 10%);\n```\n\n```css\n}\n```\n{: .-setup}\n","h2":null},{"title":"Child","elms":"\n```css\n.grid-child {\n```\n{: .-setup}\n\n```css\n  /* Column position */\n  grid-column-start: 1;\n  grid-column-end: 2;\n\n  grid-column: 1 / 2; /* Short hand */\n  grid-column: 1 / span 2; /* Span 2 columns without explicitly defining an endpoint */\n  grid-column: 1; /* Start in and occupy a single column */\n```\n\n```css\n  /* Row position */\n  grid-row-start: 2;\n  grid-row-end: 4;\n\n  grid-row: 2 / 4; /* Short hand */\n  grid-row: 2 / span 3;/* Span 3 rows without explicitly defining an endpoint */\n  grid-row: 1; /* Start in and occupy a single row */\n```\n\n```css\n  /* Area positioning */\n  grid-area: header; /* You can use a named grid area from the container */\n\n  grid-area: 2 / 1 / 4 / 2; /* Or you can use positioning. This is equivalent to... */\n  grid-row-start: 2;\n  grid-column-start: 1;\n  grid-row-end: 4;\n  grid-column-end: 2;\n```\n\n```css\n  /* Self justification (horizontal or column alignment) */\n  justify-self: start; /* Align item to the left */\n  justify-self: center; /* Align item centered within its column */\n  justify-self: end; /* Align item to the right */\n  justify-self: stretch; /* (default) Fills available area (horizontally) */\n```\n\n```css\n  /* Self alignment (vertical or row alignment) */\n  align-self: start; /* Align item to the top */\n  align-self: center; /* Align item centered within its row */\n  align-self: end; /* Align item to the bottom */\n  align-self: stretch; /* (default) Fills available area (vertically) */\n```\n\n```css\n  /* Placement shorthand */\n  place-self: start stretch;\n\n  /* The above is the same as below long-hand */\n  align-self: start;\n  justify-self: stretch;\n```\n\n```css\n}\n```\n{: .-setup}\n\n","h2":null},{"title":null,"elms":"{: .-one-column}\n\n * [GRID: A simple visual cheatsheet](http://grid.malven.co/)\n * [CSS Tricks: A Complete Guide to Grid](https://css-tricks.com/snippets/css/complete-guide-grid/)\n * [Browser support](https://caniuse.com/#feat=css-grid)\n ","h2":"References"}]}