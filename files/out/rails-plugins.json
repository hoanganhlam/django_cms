{"head":{"title":"Rails plugins","category":"Rails"},"body":[{"title":"Basic","elms":"\n    # rails g initializer\n    # lib/generators/initializer_generator.rb\n    class InitializerGenerator < Rails::Generators::Base\n      def create_initializer_file\n        create_file \"config/initializers/initializer.rb\", \"# Add initialization content here\"\n      end\n    end\n\n * Extend `Rails::Generators::Base`.\n * Each public method in the generator is executed when a generator is invoked. \n","h2":null},{"title":"Generating a generator","elms":" \n    $ rails generate generator initializer\n","h2":null},{"title":"NamedBase","elms":"\nUse `NamedBase` instead if you want to take an argument. It will be available as \n`file_name`.\n\n    class InitializerGenerator < Rails::Generators::Base\n      def lol\n        puts file_name\n      end\n    end\n","h2":null},{"title":"More","elms":"\n    class InitializerGenerator < Rails::Generators::NamedBase\n      # \n      source_root File.expand_path(\"../templates\", __FILE__)\n      desc \"Description goes here.\"\n    end\n","h2":null},{"title":"Generators lookup","elms":"  \nWhen invoking `rails g XXX`:\n\n    [rails/]generators/XXX/XXX_generator.rb\n    [rails/]generators/XXX_generator.rb\n\nWhen invoking `rails g XXX:YYY`:\n\n    [rails/]generators/XXX/YYY_generator.rb\n\nActiveModel 'acts as'\n---------------------\n\n    # yaffle/lib/yaffle/acts_as_yaffle.rb\n    module Yaffle\n      module ActsAsYaffle\n        extend ActiveSupport::Concern\n     \n        included do\n        end\n     \n        module ClassMethods\n          def acts_as_yaffle(options = {})\n            # your code will go here\n          end\n        end\n      end\n    end\n     \n    ActiveRecord::Base.send :include, Yaffle::ActsAsYaffle\n","h2":null}]}