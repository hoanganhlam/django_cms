{"head":{"title":"Vimscript functions","category":"Vim"},"body":[{"title":"Buffer","elms":"\n    line('.')             \" current line number\n    col('.')\n    col('$')\n\n    getline('.')          \" current line as a string\n    getline(1)            \" get line 1\n    getline(1, 5)         \" get lines 1-5\n    search('^$')          \" next blank line, returns line number\n    search('^$','n')      \" but don't move cursor\n\n    getcurpos()           \" [bufnum, lnum, col, off, curswant]\n    getpos('.')           \" [bufnum, lnum, col, off]\n\n    nextnonblank(1)       \" next non-blank line after line1\n    prevnonblank()\n","h2":null},{"title":"Marks","elms":"\n    getpos(\"'a\")          \" position of a mark\n    setpos(\"'a\",...)\n\n    getpos(\"'<\")          \" position of selection start\n","h2":null},{"title":"Cursor","elms":"\n    cursor(line,col)      \" moves cursor\n    cursor(line,col,off,curswant)\n\n    getcurpos()           \" returns [bufnum,line,col,off,curswant]\n","h2":null},{"title":"Expand","elms":"\n    expand('<cword>')      \" word under cursor\n    expand('%')            \" current file\n\n    \" <cword>  current word on cursor\n    \" :p    full path\n    \" :h    head\n    \" :p:h  dirname   (/Users/rsc/project)\n    \" :t    tail      (file.txt)\n    \" :r    root      (file)\n    \" :e    extension (.txt)\n    \" see :h cmdline-special\n","h2":null},{"title":"Files","elms":"\n    fnameescape('string')\n    fnamemodify('main.c', ':p:h')\n    fnamemodify(fname, ':e')   \" current file extension - see expand()\n    filereadable(fname)\n    getfsize('file.txt')\n    getcwd()\n\n    globpath(&rtp, \"plugin/commentary.vim\")\n","h2":null},{"title":"Math","elms":"\n    fmod(9, 2)  \" modulus\n    abs(-0.5)\n    sqrt(9)\n\n    trunc(1.84)\n    floor(1.84)\n    ceil(1.84)\n    float2nr(3.14)\n","h2":null},{"title":"Casting","elms":"\n    str2float('0.2')\n    str2nr('240')\n    str2nr('ff', '16')\n\n    string(0.3)\n","h2":null},{"title":"Type checking","elms":"\n    type(var) == type(0)\n    type(var) == type(\"\")\n    type(var) == type(function(\"tr\"))\n    type(var) == type([])\n    type(var) == type({})\n    type(var) == type(0.0)\n","h2":null},{"title":"Date/time","elms":"\n    strftime('%c')\n    strftime('%c',getftime('file.c'))\n","h2":null},{"title":"Strings","elms":"\n    if a =~ '\\s*'\n    substitute(str, '.', 'x', 'g')\n    strpart(\"abcdef\", 3, 2)    \" == \"de\" (substring)\n    strpart(\"abcdef\", 3)       \" == \"def\"\n    stridx(\"abcdef\", \"e\")      \" == 4\n    strridx()                  \" reverse\n\n    matchstr('testing','test')  \" == 'test' (or '')\n    match('testing','test')     \" == 0\n    matchend('testing','test')  \" == 4\n    match('testing','\\ctest')   \" ignore case\n\n    split(str, '\\zs')           \" split into characters\n\n    strlen(str)\n    strchars()                  \" accounts for composing chars\n    strwidth()                  \" accounts for ambig characters\n    strdisplaywidth()           \" accounts for tab stops\n\n    toupper(str)\n    tolower(str)\n    tr('foo', '_-', '  ')\n","h2":null},{"title":"Syntax","elms":"\n    synstack(line('.'),col('.'))   \" returns many\n    synID(line('.'),col('.'),1)    \" only one\n\n    synIDattr(id,\"bg\")\n    synIDattr(id,\"name\")\n    synIDtrans()\n\n    \" syntax stack\n    map(synstack(line('.'), col('.')), 'synIDattr(v:val, \"name\")')\n","h2":null},{"title":"Shell","elms":"\n    system('ls '.shellescape(expand('%:h')))\n","h2":null},{"title":"Registers","elms":"\n    getreg('*')\n    getregtype('*')     \" v(char), V(line) <ctrl-v>(block)\n\nComparisons\n-----------\n\n    if name ==# 'John'     \" case-sensitive\n    if name ==? 'John'     \" case-insensitive\n    if name == 'John'      \" depends on :set ignorecase\n    \" also: is#, is?, >=#, >=?, and so on\n\n    if \"hello\" =~ '.*'\n    if \"hello\" !~ '.*'\n\nExecuting\n---------\n","h2":null},{"title":"Running commands","elms":"\n    normal 'ddahello'\n    exe 'normal ^C'  \" with expansions\n    wincmd J","h2":null}]}