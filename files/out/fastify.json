{"head":{"title":"Fastify","category":"JavaScript libraries","layout":"2017/sheet","updated":"2017-09-23T00:00:00.000Z"},"body":[{"title":"Introduction","elms":"{: .-intro}\n\n[Fastify](https://github.com/fastify/fastify) lets you create HTTP servers in Node.js with good performance. This guide targets fastify v0.28.x.\n\n- [Fastify source code](https://github.com/fastify/fastify) _(github.com)_\n- [Documentation](https://github.com/fastify/fastify#documentation) _(github.com)_\n","h2":"Getting started"},{"title":"Hello world","elms":"{: .-prime}\n\n```js\nconst fastify = require('cs/fastify')()\n\nfastify.get('/', (req, reply) => {\n  reply.send({ hello: 'world' })\n})\n\nfastify.listen(3000, err => {\n  if (err) throw err\n  const port = fastify.server.address().port\n  console.log(`server listening on ${port}`)\n})\n```\n","h2":"Getting started"},{"title":"Plugins","elms":"\n#### app.js\n\n```js\nfastify.register(require('./route'))\n```\n\n#### route.js\n\n```js\nfunction (fastify, opts, next) {\n  fastify.get('/', (req, reply) => {\n    reply.send({ hello: 'world' })\n  })\n\n  next()\n})\n```\n\nCompose your app functionality into plugins. Plugins are simply functions.\n\nSee: [Plugins](https://github.com/fastify/fastify/blob/master/docs/Plugins.md)\n","h2":"Getting started"},{"title":"Writing routes","elms":"\n```js\nfastify.route({\n  method: 'GET',\n  url: '/',\n  schema: { ··· },\n  handler: (req, reply) => { ··· }\n  beforeHandler: (req, reply, done) => { ··· }\n})\n```\n","h2":"Routes"},{"title":"Shorthand declarations","elms":"\n```js\nfastify.get(path, [options], handler)\nfastify.head(···)\nfastify.post(···)\nfastify.put(···)\nfastify.delete(···)\nfastify.options(···)\nfastify.patch(···)\n```\n","h2":"Routes"},{"title":"Async/await","elms":"\n```js\nfastify.get('/', options, async (req, reply) => {\n  return data\n  // or\n  reply.send(data)\n})\n```\n\nWhen using async functions, you can either `return` data or use `reply.send`.\n\nRequest/reply\n-------------\n","h2":"Routes"},{"title":"Request","elms":"\n```js\nrequest.query\nrequest.body\nrequest.params\nrequest.headers\nrequest.req  // Node.js core\nrequest.log.info('hello')\n```\n\nSee: [Request](https://github.com/fastify/fastify/blob/master/docs/Request.md)\n","h2":"Routes"},{"title":"Reply","elms":"\n#### Response headers\n\n```js\nreply.code(404)\nreply.header('Content-Type', 'text/html')\nreply.type('text/html')\n```\n\n#### Redirects\n\n```js\nreply.redirect('/foo')\nreply.redirect(302, '/foo')\n```\n\n#### Sending\n\n```js\nreply.send(payload)\nreply.sent // → true|false\n```\n\nSee: [Reply](https://github.com/fastify/fastify/blob/master/docs/Reply.md)\n","h2":"Routes"},{"title":"JSON schema","elms":"\n#### Define a JSON schema\n\n```js\nconst schema = {\n  querystring: {\n    name: { type: 'string' },\n    excitement: { type: 'integer' }\n  },\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        hello: { type: 'string' }\n      }\n    }\n  }\n}\n```\n\n#### Pass it to the route\n\n```js\nfastify.get('/', { schema }, (req, reply) => {\n  ···\n})\n```\n{: data-line=\"1\"}\n\n#### or (same as above)\n\n```js\nfastify.route({\n  method: 'GET',\n  url: '/',\n  schema,\n  handler: (req, reply) => { ··· }\n})\n```\n{: data-line=\"4\"}\n\nBy defining a JSON schema, you get validation and improved performance.\n\nSee: [Validation and serialization](https://github.com/fastify/fastify/blob/master/docs/Validation-And-Serialization.md)\n\nPlugins\n-------\n","h2":"Routes"},{"title":"With function","elms":"\n```js\nfastify.register(\n  require('./route'),\n  err => { if (err) throw err }\n)\n```\n{: data-line=\"3\"}\n\n#### route.js\n\n```js\nmodule.exports = (fastify, options, next) => {\n  fastify.get('/', ···)\n  next()\n}\n```\n\n\nSee: [Register](https://github.com/fastify/fastify/blob/master/docs/Getting-Started.md#register)\n","h2":"Routes"},{"title":"Multiple","elms":"\n```js\nfastify.register([\n  require('./another-route'),\n  require('./yet-another-route')\n], opts, (err) => {\n  if (err) throw err\n})\n```\n\nYou can pass arrays to `register()`.\n","h2":"Routes"},{"title":"Register with prefix","elms":"\n```js\nfastify.register(\n  require('./route'),\n  { prefix: '/v1' }\n)\n```\n\nThis prefixes all routes in that module.\n","h2":"Routes"},{"title":"Helmet","elms":"\n```js\nconst helmet = require('fastify-helmet')\n\nfastify.register(helmet)\n```\n\nSee: [fastify-helmet](https://github.com/fastify/fastify-helmet)\n","h2":"Routes"},{"title":"fastify-plugin","elms":"\n```js\nconst fp = require('fastify-plugin')\n\nmodule.exports = fp((fastify, opts, next) => {\n  // your plugin code\n  fastify.decorate('utility', () => {})\n\n  next()\n}, '0.x')\n```\n\nAllows you to limit Fastify versions via semver, and allows you not make a new Fastify scope.\n\nSee: [fastify-plugin](https://github.com/fastify/fastify-plugin)\n","h2":"Routes"},{"title":"Decorators","elms":"\nMiddleware\n----------\n","h2":"Routes"},{"title":"Middleware","elms":"\n```js\nfastify.use(require('cors')())\nfastify.use(require('dns-prefetch-control')())\nfastify.use(require('frameguard')())\nfastify.use(require('hide-powered-by')())\nfastify.use(require('hsts')())\nfastify.use(require('ienoopen')())\nfastify.use(require('x-xss-protection')())\n```\n\nCompatible with Express and Restify middlewares. (Don't use these middleware, these are covered by [fastify-helmet](https://github.com/fastify/fastify-helmet).)\n\nSee: [Middlewares](https://github.com/fastify/fastify/blob/master/docs/Middlewares.md)\n\nTemplate rendering\n------------------\n","h2":"Routes"},{"title":"point-of-view","elms":"\n```js\nconst fastify = require('fastify')()\n\nfastify.register(require('point-of-view'), {\n  engine: {\n    ejs: require('ejs')\n  }\n})\n```\n{: data-line=\"3\"}\n\n```js\nfastify.get('/', (req, reply) => {\n  reply.view('/templates/index.ejs', { text: 'text' })\n})\n```\n{: data-line=\"2\"}\n\nSupport `ejs`, `pug`, `handlebars` and `marko`.\n\nSee: [point-of-view](https://github.com/fastify/point-of-view)\n","h2":"Routes"},{"title":"Options","elms":"\n```js\nfastify.register(require('point-of-view'), {\n  engine: {\n    ejs: require('ejs')\n  },\n  templates: '/templates',\n  options: {}\n})\n```\n\n`templates` lets you update the templates folder. `options` are options passed onto the template engines.","h2":"Routes"}]}