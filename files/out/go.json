{"head":{"title":"Go","layout":"2017/sheet","prism_languages":["go","bash"],"weight":-3,"tags":["Featured"],"category":"C-like","updated":"2020-06-21T00:00:00.000Z"},"body":[{"title":null,"elms":"{: .-three-column}\n","h2":"Getting started"},{"title":"Introduction","elms":"{: .-intro}\n\n- [A tour of Go](https://tour.golang.org/welcome/1) _(tour.golang.org)_\n- [Go repl](https://repl.it/languages/go) _(repl.it)_\n- [Golang wiki](https://github.com/golang/go/wiki/) _(github.com)_\n","h2":"Getting started"},{"title":"Hello world","elms":"{: .-prime}\n\n#### hello.go\n{: .-file}\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  message := greetMe(\"world\")\n  fmt.Println(message)\n}\n\nfunc greetMe(name string) string {\n  return \"Hello, \" + name + \"!\"\n}\n```\n\n```bash\n$ go build\n```\n\nOr try it out in the [Go repl](https://repl.it/languages/go), or [A Tour of Go](https://tour.golang.org/welcome/1).\n","h2":"Getting started"},{"title":"Variables","elms":"\n#### Variable declaration\n\n```go\nvar msg string\nmsg = \"Hello\"\n```\n\n#### Shortcut of above (Infers type)\n\n```go\nmsg := \"Hello\"\n```\n","h2":"Getting started"},{"title":"Constants","elms":"\n```go\nconst Phi = 1.618\n```\n\nConstants can be character, string, boolean, or numeric values.\n\nSee: [Constants](https://tour.golang.org/basics/15)\n","h2":"Getting started"},{"title":null,"elms":"{: .-three-column}\n","h2":"Basic types"},{"title":"Strings","elms":"\n```go\nstr := \"Hello\"\n```\n\n```go\nstr := `Multiline\nstring`\n```\n\nStrings are of type `string`.\n","h2":"Basic types"},{"title":"Numbers","elms":"\n#### Typical types\n\n```go\nnum := 3          // int\nnum := 3.         // float64\nnum := 3 + 4i     // complex128\nnum := byte('a')  // byte (alias for uint8)\n```\n\n#### Other types\n\n```go\nvar u uint = 7        // uint (unsigned)\nvar p float32 = 22.7  // 32-bit float\n```\n","h2":"Basic types"},{"title":"Arrays","elms":"\n```go\n// var numbers [5]int\nnumbers := [...]int{0, 0, 0, 0, 0}\n```\n\nArrays have a fixed size.\n","h2":"Basic types"},{"title":"Slices","elms":"\n```go\nslice := []int{2, 3, 4}\n```\n\n```go\nslice := []byte(\"Hello\")\n```\n\nSlices have a dynamic size, unlike arrays.\n","h2":"Basic types"},{"title":"Pointers","elms":"\n```go\nfunc main () {\n  b := *getPointer()\n  fmt.Println(\"Value is\", b)\n}\n```\n{: data-line=\"2\"}\n\n```go\nfunc getPointer () (myPointer *int) {\n  a := 234\n  return &a\n}\n```\n{: data-line=\"3\"}\n\n```go\na := new(int)\n*a = 234\n```\n{: data-line=\"2\"}\n\nPointers point to a memory location of a variable. Go is fully garbage-collected.\n\nSee: [Pointers](https://tour.golang.org/moretypes/1)\n","h2":"Basic types"},{"title":"Type conversions","elms":"\n```go\ni := 2\nf := float64(i)\nu := uint(i)\n```\n\nSee: [Type conversions](https://tour.golang.org/basics/13)\n","h2":"Basic types"},{"title":null,"elms":"{: .-three-column}\n","h2":"Flow control"},{"title":"Conditional","elms":"\n```go\nif day == \"sunday\" || day == \"saturday\" {\n  rest()\n} else if day == \"monday\" && isTired() {\n  groan()\n} else {\n  work()\n}\n```\n{: data-line=\"1,3,5\"}\n\nSee: [If](https://tour.golang.org/flowcontrol/5)\n","h2":"Flow control"},{"title":"Statements in if","elms":"\n```go\nif _, err := doThing(); err != nil {\n  fmt.Println(\"Uh oh\")\n}\n```\n{: data-line=\"1\"}\n\nA condition in an `if` statement can be preceded with a statement before a `;`. Variables declared by the statement are only in scope until the end of the `if`.\n\nSee: [If with a short statement](https://tour.golang.org/flowcontrol/6)\n","h2":"Flow control"},{"title":"Switch","elms":"\n```go\nswitch day {\n  case \"sunday\":\n    // cases don't \"fall through\" by default!\n    fallthrough\n\n  case \"saturday\":\n    rest()\n\n  default:\n    work()\n}\n```\n\nSee: [Switch](https://github.com/golang/go/wiki/Switch)\n","h2":"Flow control"},{"title":"For loop","elms":"\n```go\nfor count := 0; count <= 10; count++ {\n  fmt.Println(\"My counter is at\", count)\n}\n```\n\nSee: [For loops](https://tour.golang.org/flowcontrol/1)\n","h2":"Flow control"},{"title":"For-Range loop","elms":"\n```go\nentry := []string{\"Jack\",\"John\",\"Jones\"}\nfor i, val := range entry {\n  fmt.Printf(\"At position %d, the character %s is present\\n\", i, val)\n}\n```\n\nSee: [For-Range loops](https://gobyexample.com/range)\n","h2":"Flow control"},{"title":"While loop","elms":"\n```go\nn := 0\nx := 42\nfor n != x {\n  n := guess()\n}\n```\n\nSee: [Go's \"while\"](https://tour.golang.org/flowcontrol/3)\n","h2":"Flow control"},{"title":null,"elms":"{: .-three-column}\n","h2":"Functions"},{"title":"Lambdas","elms":"\n```go\nmyfunc := func() bool {\n  return x > 10000\n}\n```\n{: data-line=\"1\"}\n\nFunctions are first class objects.\n","h2":"Functions"},{"title":"Multiple return types","elms":"\n```go\na, b := getMessage()\n```\n\n```go\nfunc getMessage() (a string, b string) {\n  return \"Hello\", \"World\"\n}\n```\n{: data-line=\"2\"}\n\n","h2":"Functions"},{"title":"Named return values","elms":"\n```go\nfunc split(sum int) (x, y int) {\n  x = sum * 4 / 9\n  y = sum - x\n  return\n}\n```\n{: data-line=\"4\"}\n\nBy defining the return value names in the signature, a `return` (no args) will return variables with those names.\n\nSee: [Named return values](https://tour.golang.org/basics/7)\n","h2":"Functions"},{"title":null,"elms":"{: .-three-column}\n","h2":"Packages"},{"title":"Importing","elms":"\n```go\nimport \"fmt\"\nimport \"math/rand\"\n```\n\n```go\nimport (\n  \"fmt\"        // gives fmt.Println\n  \"math/rand\"  // gives rand.Intn\n)\n```\n\nBoth are the same.\n\nSee: [Importing](https://tour.golang.org/basics/1)\n","h2":"Packages"},{"title":"Aliases","elms":"\n```go\nimport r \"math/rand\"\n```\n{: data-line=\"1\"}\n\n```go\nr.Intn()\n```\n","h2":"Packages"},{"title":"Exporting names","elms":"\n```go\nfunc Hello () {\n  ···\n}\n```\n\nExported names begin with capital letters.\n\nSee: [Exported names](https://tour.golang.org/basics/3)\n","h2":"Packages"},{"title":"Packages","elms":"\n```go\npackage hello\n```\n\nEvery package file has to start with `package`.\n","h2":"Packages"},{"title":null,"elms":"{: .-three-column}\n","h2":"Concurrency"},{"title":"Goroutines","elms":"\n```go\nfunc main() {\n  // A \"channel\"\n  ch := make(chan string)\n\n  // Start concurrent routines\n  go push(\"Moe\", ch)\n  go push(\"Larry\", ch)\n  go push(\"Curly\", ch)\n\n  // Read 3 results\n  // (Since our goroutines are concurrent,\n  // the order isn't guaranteed!)\n  fmt.Println(<-ch, <-ch, <-ch)\n}\n```\n{: data-line=\"3,6,7,8,13\"}\n\n```go\nfunc push(name string, ch chan string) {\n  msg := \"Hey, \" + name\n  ch <- msg\n}\n```\n{: data-line=\"3\"}\n\nChannels are concurrency-safe communication objects, used in goroutines.\n\nSee: [Goroutines](https://tour.golang.org/concurrency/1), [Channels](https://tour.golang.org/concurrency/2)\n","h2":"Concurrency"},{"title":"Buffered channels","elms":"\n```go\nch := make(chan int, 2)\nch <- 1\nch <- 2\nch <- 3\n// fatal error:\n// all goroutines are asleep - deadlock!\n```\n{: data-line=\"1\"}\n\nBuffered channels limit the amount of messages it can keep.\n\nSee: [Buffered channels](https://tour.golang.org/concurrency/3)\n","h2":"Concurrency"},{"title":"Closing channels","elms":"\n#### Closes a channel\n\n```go\nch <- 1\nch <- 2\nch <- 3\nclose(ch)\n```\n{: data-line=\"4\"}\n\n#### Iterates across a channel until its closed\n\n```go\nfor i := range ch {\n  ···\n}\n```\n{: data-line=\"1\"}\n\n#### Closed if `ok == false`\n\n```go\nv, ok := <- ch\n```\n\nSee: [Range and close](https://tour.golang.org/concurrency/4)\n","h2":"Concurrency"},{"title":"WaitGroup","elms":"\n```go\nimport \"sync\"\n\nfunc main() {\n  var wg sync.WaitGroup\n  \n  for _, item := range itemList {\n    // Increment WaitGroup Counter\n    wg.Add(1)\n    go doOperation(item)\n  }\n  // Wait for goroutines to finish\n  wg.Wait()\n  \n}\n```\n{: data-line=\"1,4,8,12\"}\n\n```go\nfunc doOperation(item string) {\n  defer wg.Done()\n  // do operation on item\n  // ...\n}\n```\n{: data-line=\"2\"}\n\nA WaitGroup waits for a collection of goroutines to finish. The main goroutine calls Add to set the number of goroutines to wait for. The goroutine calls `wg.Done()` when it finishes.\nSee: [WaitGroup](https://golang.org/pkg/sync/#WaitGroup)\n\n","h2":"Concurrency"},{"title":"Defer","elms":"\n```go\nfunc main() {\n  defer fmt.Println(\"Done\")\n  fmt.Println(\"Working...\")\n}\n```\n{: data-line=\"2\"}\n\nDefers running a function until the surrounding function returns.\nThe arguments are evaluated immediately, but the function call is not ran until later.\n\nSee: [Defer, panic and recover](https://blog.golang.org/defer-panic-and-recover)\n","h2":"Error control"},{"title":"Deferring functions","elms":"\n```go\nfunc main() {\n  defer func() {\n    fmt.Println(\"Done\")\n  }()\n  fmt.Println(\"Working...\")\n}\n```\n{: data-line=\"2,3,4\"}\n\nLambdas are better suited for defer blocks.\n\n```go\nfunc main() {\n  var d = int64(0)\n  defer func(d *int64) {\n    fmt.Printf(\"& %v Unix Sec\\n\", *d)\n  }(&d)\n  fmt.Print(\"Done \")\n  d = time.Now().Unix()\n}\n```\n{: data-line=\"3,4,5\"}\nThe defer func uses current value of d, unless we use a pointer to get final value at end of main.\n","h2":"Error control"},{"title":null,"elms":"{: .-three-column}\n","h2":"Structs"},{"title":"Defining","elms":"\n```go\ntype Vertex struct {\n  X int\n  Y int\n}\n```\n{: data-line=\"1,2,3,4\"}\n\n```go\nfunc main() {\n  v := Vertex{1, 2}\n  v.X = 4\n  fmt.Println(v.X, v.Y)\n}\n```\n\nSee: [Structs](https://tour.golang.org/moretypes/2)\n","h2":"Structs"},{"title":"Literals","elms":"\n```go\nv := Vertex{X: 1, Y: 2}\n```\n\n```go\n// Field names can be omitted\nv := Vertex{1, 2}\n```\n\n```go\n// Y is implicit\nv := Vertex{X: 1}\n```\n\nYou can also put field names.\n","h2":"Structs"},{"title":"Pointers to structs","elms":"\n```go\nv := &Vertex{1, 2}\nv.X = 2\n```\n\nDoing `v.X` is the same as doing `(*v).X`, when `v` is a pointer.\n","h2":"Structs"},{"title":"Receivers","elms":"\n```go\ntype Vertex struct {\n  X, Y float64\n}\n```\n\n```go\nfunc (v Vertex) Abs() float64 {\n  return math.Sqrt(v.X * v.X + v.Y * v.Y)\n}\n```\n{: data-line=\"1\"}\n\n```go\nv := Vertex{1, 2}\nv.Abs()\n```\n\nThere are no classes, but you can define functions with _receivers_.\n\nSee: [Methods](https://tour.golang.org/methods/1)\n","h2":"Methods"},{"title":"Mutation","elms":"\n```go\nfunc (v *Vertex) Scale(f float64) {\n  v.X = v.X * f\n  v.Y = v.Y * f\n}\n```\n{: data-line=\"1\"}\n\n```go\nv := Vertex{6, 12}\nv.Scale(0.5)\n// `v` is updated\n```\n\nBy defining your receiver as a pointer (`*Vertex`), you can do mutations.\n\nSee: [Pointer receivers](https://tour.golang.org/methods/4)\n","h2":"Methods"},{"title":"A basic interface","elms":"\n```go\ntype Shape interface {\n  Area() float64\n  Perimeter() float64\n}\n```\n","h2":"Interfaces"},{"title":"Struct","elms":"\n```go\ntype Rectangle struct {\n  Length, Width float64\n}\n```\n\nStruct `Rectangle` implicitly implements interface `Shape` by implementing all of its methods.\n","h2":"Interfaces"},{"title":"Methods","elms":"\n```go\nfunc (r Rectangle) Area() float64 {\n  return r.Length * r.Width\n}\n\nfunc (r Rectangle) Perimeter() float64 {\n  return 2 * (r.Length + r.Width)\n}\n```\n\nThe methods defined in `Shape` are implemented in `Rectangle`.\n","h2":"Interfaces"},{"title":"Interface example","elms":"\n```go\nfunc main() {\n  var r Shape = Rectangle{Length: 3, Width: 4}\n  fmt.Printf(\"Type of r: %T, Area: %v, Perimeter: %v.\", r, r.Area(), r.Perimeter())\n}\n```\n","h2":"Interfaces"},{"title":"Official resources","elms":"{: .-intro}\n\n- [A tour of Go](https://tour.golang.org/welcome/1) _(tour.golang.org)_\n- [Golang wiki](https://github.com/golang/go/wiki/) _(github.com)_\n- [Effective Go](https://golang.org/doc/effective_go.html) _(golang.org)_\n","h2":"References"},{"title":"Other links","elms":"{: .-intro}\n\n- [Go by Example](https://gobyexample.com/) _(gobyexample.com)_\n- [Awesome Go](https://awesome-go.com/) _(awesome-go.com)_\n- [JustForFunc Youtube](https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw) _(youtube.com)_\n- [Style Guide](https://github.com/golang/go/wiki/CodeReviewComments) _(github.com)_","h2":"References"}]}