{"head":{"title":"Q.js","category":"JavaScript libraries"},"body":[{"title":"Creating promises (Q.promise)","elms":"\n    Q.promise (ok, fail) =>\n      asyncFunction ->\n        if error\n          fail new Error(\"Failure\")\n        else\n          ok(data)\n","h2":null},{"title":"For arrays","elms":"\n    promises = [saveDisk(), saveCloud()]\n\n    # When all succeeds, or *at least one* error\n    Q.all(promises).done ->\n      alert \"Saved\"\n\n    # Same, but get the values\n    Q.all(promises).spread (a, b) ->\n      alert \"Result A:\" + a\n      alert \"Result B:\" + b\n\n    # When all either succeeds or errors\n    Q.allSettled(promises).done -> ...\n\n","h2":null},{"title":"Creating promises from Node","elms":"\n    # Works like .call() or .apply()\n\n    Q.nfcall(FS.readFile, 'foo.txt', 'utf-8')\n    .then -> ...\n\n    Q.nfapply(FS.readFile, ['foo.txt', 'utf-8'])\n    .then -> ...\n\n    Q.npost(FS, 'readFile', ['foo.txt, 'utf-8'])\n    .then -> ...\n\n    Q.npost(FS, 'readFile', 'foo.txt, 'utf-8')\n    .then -> ...\n\n    readFile = Q.denodeify(FS.readFile)\n    readFile('foo.txt').then -> ...\n","h2":null},{"title":"Promises to Node async","elms":"\n    createUser = (next) ->\n      promiseMaker()\n      .nodeify(next)\n","h2":null},{"title":"Promise sugars","elms":"\n    # Shortcut for .then(ok, fail, progress)\n    promise\n    .then (data) ->\n    .catch (err) ->\n    .progress (percent) ->\n","h2":null},{"title":"Try","elms":"\n  Q.try ->\n    promise()\n\n  .catch (e) ->\n    console.error \"Oh well\", e\n","h2":null},{"title":"Reference","elms":"\n * https://github.com/kriskowal/q/wiki/API-Reference","h2":null}]}