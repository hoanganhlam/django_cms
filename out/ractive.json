{"head":{"title":"Ractive.js","category":"JavaScript libraries","vim":"ft=javascript"},"body":[{"title":"[Initialization](http://docs.ractivejs.org/latest/options)","elms":"\n    new Ractive({\n      el: $('..'),\n      el: '#box',\n      template: '...', // required\n\n      // callbacks\n      init: function() {},    // on instantiate\n      complete: function() {}, // on finish animations\n\n      // objs\n      data: { ... },\n      partials: { ... },    // global: Ractive.partials\n      transitions: { ... }, // global: Ractive.transitions\n      components: { ... },\n      adaptors: [ ... ],\n\n      // options\n      magic: false\n      modifyArrays: true\n      twoway: true\n      noIntro: true // true = disable transition on initial render\n      lazy: false   // false = use keyevents, true = use change/blur\n      append: false // false = overwrite element, true = append\n      debug: false\n      sanitize: false\n    })\n","h2":null},{"title":"Updating values","elms":"\n    view.add('count', 1)       //=> promise\n    view.subtract('count', 1)  //=> promise\n    view.toggle('shown')       //=> promise\n\n    view.set('a', true)\n    view.set({ a: true })\n    view.reset({ a: true })\n    view.merge('list', [a,b,c])\n\n    view.get('a')\n    view.data.a\n","h2":"Instance methods"},{"title":"Nodes and components","elms":"\n    view.find('.klass')\n    view.findAll('.klass')\n    view.nodes\n    view.nodes['hello']   // .find('#hello')\n\n    view.findComponent('photo')\n    view.findAllComponents('photo')\n","h2":"Instance methods"},{"title":"Events","elms":"\n    view.on('event', function() { ... })\n    view.off('event', fn)\n    view.fire('event')\n","h2":"Instance methods"},{"title":"Others","elms":"\n    view.update()\n    view.updateModel()\n\n    view.insert('.node .path')\n\n    view.observe({ 'name': function() { ... } })\n\n    view.toHTML()  //=> String\n    view.render()\n","h2":"Instance methods"},{"title":null,"elms":"\n    View = Ractive.extend({\n      ...\n    })\n    new View()\n","h2":"Extend"},{"title":null,"elms":"\nSee: https://github.com/RactiveJS/Ractive/issues/74\n{:.center}\n\n    Widget = Ractive.extend({ ... })\n\n    ractive = new Ractive({\n      el: 'main',\n      template: '<widget foo=\"bar\"/>',\n      components: {\n        widget: Widget\n      }\n    });\n","h2":"[Components](https://github.com/RactiveJS/Ractive/wiki/Components)"},{"title":null,"elms":"\n    // Global partials\n    Ractive.partials.x = \"<..>\"\n","h2":"Partials"},{"title":null,"elms":"\n    view.on('teardown')\n","h2":"Events"},{"title":"DOM Events","elms":"\n    <button on-click='activate'>Activate!</button>\n\n    view.on({\n      activate: function () { ... }\n    });\n\n    <button on-click='sort:name'>Sort by name</button>\n    view.on('sort', function (e, column) {\n      console.log('sorting by #{column}');\n    });\n","h2":"Events"},{"title":"Observing","elms":"\n     view.observe(\"name\", function (name) {\n       console.log(\"Changed name to\", name);\n     }, { init: false });\n","h2":"Events"},{"title":null,"elms":"\n    Hello, {{name}}\n    Body: {{{unescaped}}}\n\n    <!-- each -->\n    {{#mylist:i}}\n      <li>{{this.name}}</li>\n      <li>{{name}}</li>\n      <li>{{.}}</li> <!-- same as 'this' -->\n    {{/mylist}}\n\n    {{^user}}Not logged in{{/user}} <!-- if false -->\n    {{#user}}Welcome, sire{{/user}} <!-- if true -->\n\n    {{>partialName}}\n    <component>\n\n    {{#statusDogs[selected]}}\n","h2":"Markup"},{"title":null,"elms":"\nThis transforms the `list` attribute via a helper function called `sort()`.\n\n    {{# sort(list, \"name\") :num }}\n      <li>{{num}} - {{name}}</li>\n    {{/ end. any text goes here }}\n\n    data: {\n      sort: function(array, column) { return array.whatever(); }\n    }\n","h2":"Transformed attributes"},{"title":null,"elms":"\n    <div intro=\"fade\">\n    <div intro=\"bump\">\n    <div intro=\"bump:{duration:400}\">\n\n    Ractive.transitions.bump = function(t, params) {\n       params = t.processParams( params, {\n         duration: 400,\n         color: t.isIntro ? 'rgb(0,255,0)' : 'rgb(255,0,0)'\n       });\n\n      if (t.isIntro) {\n        /* enter */\n      } else {\n        /* exit */\n      }\n\n      t.complete();\n    };\n","h2":"Transitions"},{"title":null,"elms":"\n    <span decorator=\"tooltip:hello there\">Hover me</span>\n\n    decorators: {\n      tooltip: function (node, content) {\n        // setup code here\n        return {\n          teardown: function () {\n            // cleanup code here\n          }\n        }\n      }\n    }\n\n    <span decorator=\"tooltip:'a','b',2,'c'\">Hover me</span>\n\n    tooltip: function (node, a, b, two, c) { ... }\n","h2":"[Decorators](http://docs.ractivejs.org/latest/decorators)"},{"title":null,"elms":"\n    myAdaptor = {\n      filter: function (object, keypath, ractive) {\n        // return `true` if a particular object is of the type we want to adapt\n      },\n      wrap: function (ractive, object, keypath, prefixer) {\n        // set up event bindings here\n        object.on('change', function () { ractive.set(prefixer({...})); });\n        // then return a wrapper:\n        return {\n          teardown: function () { .. },\n          // json representation\n          get: function () { return { a:2, b:3, c:4, ... }; },\n          // called on ractive.set\n          set: function (key, val) { },\n          // called on ractive.set on root (return false = die)\n          reset: function (data) { return false; }\n        };\n      }\n    };\n","h2":"[Adaptors](http://docs.ractivejs.org/latest/adaptors)"},{"title":null,"elms":"\n    new Ractive({\n      template: '{{area}}',\n      computed: {\n        area: function () { return this.get('width') * this.get('height'); }\n        area: '${width} * ${height}'\n        fullname: {\n          get: '${first} + \" \" + ${last}\"\n          set: function (name) { ... }\n        }\n      }\n    });\n\n{% endraw %}","h2":"[Computed properties](http://docs.ractivejs.org/latest/computed-properties)"}]}